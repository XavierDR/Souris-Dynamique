// Generated code for Python source for module 'pyasn1_modules.rfc2251'
// created by Nuitka version 0.5.16.1

// This code is in part copyright 2015 Kay Hayen.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "nuitka/prelude.hpp"

#include "__helpers.hpp"

// The _module_pyasn1_modules$rfc2251 is a Python object pointer of module type.

// Note: For full compatibility with CPython, every module variable access
// needs to go through it except for cases where the module cannot possibly
// have changed in the mean time.

PyObject *module_pyasn1_modules$rfc2251;
PyDictObject *moduledict_pyasn1_modules$rfc2251;

// The module constants used
extern PyObject *const_str_plain_Null;
static PyObject *const_tuple_str_digest_d5e75659fbb8dd91b485f53529ce6029_int_pos_81_tuple;
extern PyObject *const_int_pos_12;
extern PyObject *const_str_plain_NamedTypes;
extern PyObject *const_int_pos_20;
extern PyObject *const_int_pos_2147483647;
static PyObject *const_str_plain_modifyResponse;
extern PyObject *const_str_digest_7c8c58049edd248f8b1cb370445e702c;
static PyObject *const_tuple_str_plain_affectsMultipleDSAs_int_pos_71_tuple;
static PyObject *const_str_plain_matchValue;
extern PyObject *const_int_pos_9;
extern PyObject *const_str_plain_tagSet;
extern PyObject *const_str_plain_object;
static PyObject *const_tuple_str_plain_authMethodNotSupported_int_pos_7_tuple;
extern PyObject *const_str_plain_any;
static PyObject *const_str_plain_invalidCredentials;
static PyObject *const_str_plain_compareResponse;
extern PyObject *const_int_pos_19;
static PyObject *const_int_pos_52;
extern PyObject *const_int_pos_5;
static PyObject *const_str_plain_PartialAttributeList;
static PyObject *const_str_plain_CompareResponse;
static PyObject *const_str_plain_extendedReq;
static PyObject *const_str_plain_AttributeDescriptionList;
static PyObject *const_str_plain_ModifyRequest;
extern PyObject *const_str_plain_OptionalNamedType;
extern PyObject *const_int_pos_16;
extern PyObject *const_int_pos_32;
static PyObject *const_str_digest_c01ff8b1c3f7587c3342d653d8656713;
static PyObject *const_tuple_str_plain_objectClassViolation_int_pos_65_tuple;
static PyObject *const_str_plain_ava;
static PyObject *const_str_plain_LDAPOID;
static PyObject *const_str_plain_LDAPURL;
static PyObject *const_str_plain_constraintViolation;
static PyObject *const_tuple_str_plain_other_int_pos_80_tuple;
extern PyObject *const_str_plain_Choice;
extern PyObject *const_str_plain_rfc2251;
static PyObject *const_int_pos_68;
static PyObject *const_tuple_str_digest_4f4038e9c5903a8e36f1972133d3d29f_int_pos_84_tuple;
static PyObject *const_str_plain_dnAttributes;
extern PyObject *const_str_plain_namedval;
extern PyObject *const_int_pos_8;
static PyObject *const_str_plain_DelResponse;
static PyObject *const_tuple_str_digest_374cdbe4bbbf65f37e852f694e02c190_int_pos_88_tuple;
static PyObject *const_tuple_str_plain_decoder_str_plain_encoder_tuple;
static PyObject *const_str_plain_sasl;
static PyObject *const_str_digest_4902b3b8002754e9aa8d9efc06afe33c;
extern PyObject *const_str_plain___loader__;
extern PyObject *const_str_plain_name;
static PyObject *const_str_plain_assertionValue;
extern PyObject *const_tuple_355170992572810f6423c13272b77164_tuple;
static PyObject *const_str_plain_addRequest;
static PyObject *const_str_plain_LDAPDN;
static PyObject *const_str_plain_messageID;
static PyObject *const_str_digest_4f4038e9c5903a8e36f1972133d3d29f;
static PyObject *const_str_plain_unbindRequest;
static PyObject *const_str_plain_deleteoldrdn;
static PyObject *const_str_plain_ExtendedRequest;
extern PyObject *const_str_plain_namedValues;
static PyObject *const_str_plain_MatchingRuleAssertion;
extern PyObject *const_str_plain_False;
static PyObject *const_str_plain_timeLimit;
static PyObject *const_str_plain_Filter3;
extern PyObject *const_int_0;
extern PyObject *const_str_plain_response;
static PyObject *const_int_pos_84;
static PyObject *const_int_pos_51;
static PyObject *const_str_plain_searchRequest;
static PyObject *const_tuple_str_plain_derefFindingBaseObj_int_pos_2_tuple;
static PyObject *const_tuple_str_plain_compareTrue_int_pos_6_tuple;
extern PyObject *const_int_pos_64;
extern PyObject *const_str_plain_Attribute;
static PyObject *const_int_pos_36;
extern PyObject *const_int_pos_4;
static PyObject *const_str_plain_bindRequest;
static PyObject *const_str_plain_searchResRef;
extern PyObject *const_str_plain_type;
static PyObject *const_str_plain_aliasProblem;
extern PyObject *const_str_plain___cached__;
static PyObject *const_str_plain_sizeLimit;
static PyObject *const_str_plain_wholeSubtree;
static PyObject *const_tuple_str_digest_9d169277999c894465fa96c2be79fc53_int_pos_89_tuple;
static PyObject *const_str_plain_inappropriateAuthentication;
static PyObject *const_tuple_str_plain_adminLimitExceeded_int_pos_11_tuple;
extern PyObject *const_int_pos_1;
static PyObject *const_str_plain_noSuchObject;
static PyObject *const_str_plain_Controls;
extern PyObject *const_str_plain_replace;
static PyObject *const_str_plain_and;
static PyObject *const_str_plain_addResponse;
static PyObject *const_tuple_str_plain_aliasProblem_int_pos_33_tuple;
extern PyObject *const_str_plain_other;
extern PyObject *const_str_plain___prepare__;
static PyObject *const_tuple_str_plain_protocolError_int_pos_2_tuple;
extern PyObject *const_str_plain_encoder;
static PyObject *const_str_plain_notAllowedOnRDN;
extern PyObject *const_int_pos_53;
static PyObject *const_str_plain_saslBindInProgress;
static PyObject *const_str_plain_operationsError;
static PyObject *const_str_plain_affectsMultipleDSAs;
static PyObject *const_str_plain_noSuchAttribute;
static PyObject *const_tuple_str_plain_neverDerefAliases_int_0_tuple;
static PyObject *const_str_plain_modifyRequest;
static PyObject *const_tuple_str_digest_c01ff8b1c3f7587c3342d653d8656713_int_pos_87_tuple;
extern PyObject *const_str_plain_subtype;
extern PyObject *const_str_plain___file__;
static PyObject *const_str_plain_extensibleMatch;
static PyObject *const_int_pos_69;
extern PyObject *const_int_pos_11;
static PyObject *const_str_digest_d5e75659fbb8dd91b485f53529ce6029;
extern PyObject *const_str_plain_entry;
static PyObject *const_tuple_str_digest_9ecb9e98a4e53a42773177fd3208db1a_int_pos_35_tuple;
static PyObject *const_str_plain_compareFalse;
static PyObject *const_tuple_str_plain_strongAuthRequired_int_pos_8_tuple;
extern PyObject *const_int_pos_80;
static PyObject *const_str_plain_protocolError;
static PyObject *const_str_plain_controlType;
static PyObject *const_str_plain_matchingRule;
static PyObject *const_str_digest_f95e66addcd2fe5d78faabdeec24b203;
extern PyObject *const_str_plain_filter;
static PyObject *const_tuple_str_plain_noSuchAttribute_int_pos_16_tuple;
static PyObject *const_tuple_str_plain_operationsError_int_pos_1_tuple;
static PyObject *const_str_digest_c62754620912974b073e7a838e355782;
static PyObject *const_str_plain_AddRequest;
static PyObject *const_str_plain_confidentialityRequired;
static PyObject *const_str_plain_unwillingToPerform;
static PyObject *const_str_plain_SearchResultEntry;
static PyObject *const_str_plain_substrings;
static PyObject *const_int_pos_87;
static PyObject *const_int_pos_33;
static PyObject *const_str_plain_abandonRequest;
extern PyObject *const_str_plain_subtypeSpec;
static PyObject *const_str_plain_SubstringFilter;
static PyObject *const_str_digest_6a2f0605d1e2f8992d30eea76449f137;
static PyObject *const_str_plain_not;
static PyObject *const_str_plain_Referral;
static PyObject *const_str_plain_CompareRequest;
extern PyObject *const_str_plain___qualname__;
static PyObject *const_int_pos_83;
static PyObject *const_tuple_str_digest_f95e66addcd2fe5d78faabdeec24b203_int_pos_70_tuple;
static PyObject *const_tuple_str_plain_referral_int_pos_10_tuple;
static PyObject *const_str_plain_matchedDN;
static PyObject *const_int_pos_34;
extern PyObject *const_str_plain_tagFormatConstructed;
static PyObject *const_str_plain_AttributeValueAssertion;
static PyObject *const_tuple_str_plain_namingViolation_int_pos_64_tuple;
static PyObject *const_tuple_str_plain_wholeSubtree_int_pos_2_tuple;
static PyObject *const_str_plain_authMethodNotSupported;
extern PyObject *const_str_plain_SetOf;
extern PyObject *const_str_plain_tagImplicitly;
static PyObject *const_str_plain_SaslCredentials;
static PyObject *const_str_plain_operation;
extern PyObject *const_int_pos_15;
static PyObject *const_str_plain_searchResEntry;
static PyObject *const_int_pos_54;
static PyObject *const_tuple_str_plain_objectClassModsProhibited_int_pos_69_tuple;
static PyObject *const_str_plain_ModifyResponse;
extern PyObject *const_int_pos_18;
extern PyObject *const_str_plain_ValueRangeConstraint;
extern PyObject *const_str_plain_Boolean;
extern PyObject *const_str_plain_Tag;
static PyObject *const_str_plain_present;
static PyObject *const_tuple_str_plain_undefinedAttributeType_int_pos_17_tuple;
static PyObject *const_tuple_str_plain_timeLimitExceeded_int_pos_3_tuple;
static PyObject *const_tuple_str_digest_bc1245ca16d93bd4ffa7e606a9f4b445_int_pos_83_tuple;
static PyObject *const_str_plain_objectClassViolation;
extern PyObject *const_str_plain_Integer;
static PyObject *const_tuple_str_plain_invalidAttributeSyntax_int_pos_21_tuple;
extern PyObject *const_str_plain_pyasn1_modules;
extern PyObject *const_str_digest_989622ccef88eb949be48370a129282e;
static PyObject *const_str_plain_Filter;
static PyObject *const_tuple_str_plain_success_int_0_tuple;
extern PyObject *const_str_plain_decoder;
static PyObject *const_str_digest_bc1245ca16d93bd4ffa7e606a9f4b445;
static PyObject *const_str_plain_protocolOp;
extern PyObject *const_tuple_60e1d1aca2af647f8d112487c165344b_tuple;
static PyObject *const_str_plain_errorMessage;
static PyObject *const_str_plain_lessOrEqual;
static PyObject *const_str_plain_busy;
static PyObject *const_str_plain_bindResponse;
extern PyObject *const_str_plain_NamedValues;
extern PyObject *const_str_plain_version;
extern PyObject *const_str_plain_final;
static PyObject *const_str_plain_SearchRequest;
static PyObject *const_str_plain_maxInt;
extern PyObject *const_str_plain_delete;
static PyObject *const_str_plain_SearchResultReference;
static PyObject *const_tuple_str_plain_constraintViolation_int_pos_19_tuple;
extern PyObject *const_int_pos_14;
static PyObject *const_str_plain_success;
static PyObject *const_str_plain_neverDerefAliases;
static PyObject *const_tuple_str_plain_busy_int_pos_51_tuple;
static PyObject *const_str_plain_MessageID;
extern PyObject *const_int_pos_24;
static PyObject *const_str_plain_typesOnly;
static PyObject *const_tuple_str_plain_unavailable_int_pos_52_tuple;
static PyObject *const_str_digest_941c35c421ec5e89f5ed872865e8a629;
static PyObject *const_str_plain_sizeLimitExceeded;
static PyObject *const_str_plain_entryAlreadyExists;
static PyObject *const_tuple_str_plain_attributeOrValueExists_int_pos_20_tuple;
static PyObject *const_str_plain_inappropriateMatching;
static PyObject *const_str_plain_RelativeLDAPDN;
static PyObject *const_tuple_str_plain_unavailableCriticalExtension_int_pos_12_tuple;
static PyObject *const_tuple_str_plain_inappropriateMatching_int_pos_18_tuple;
extern PyObject *const_int_pos_23;
extern PyObject *const_int_pos_17;
static PyObject *const_tuple_str_plain_noSuchObject_int_pos_32_tuple;
static PyObject *const_tuple_str_digest_941c35c421ec5e89f5ed872865e8a629_int_pos_90_tuple;
static PyObject *const_str_plain_aliasDereferencingProblem;
static PyObject *const_tuple_str_plain_replace_int_pos_2_tuple;
static PyObject *const_str_plain_unavailable;
static PyObject *const_str_plain_unavailableCriticalExtension;
extern PyObject *const_str_plain___doc__;
static PyObject *const_str_plain_attributeOrValueExists;
extern PyObject *const_str_plain___package__;
static PyObject *const_str_plain_authentication;
extern PyObject *const_str_plain_add;
static PyObject *const_tuple_str_plain_invalidDNSyntax_int_pos_34_tuple;
static PyObject *const_str_plain_invalidDNSyntax;
static PyObject *const_str_plain_greaterOrEqual;
static PyObject *const_str_plain_newSuperior;
extern PyObject *const_str_plain_tagFormatSimple;
static PyObject *const_tuple_str_plain_compareFalse_int_pos_5_tuple;
extern PyObject *const_tuple_4db60887bb06fca3d042834bd18be106_tuple;
static PyObject *const_tuple_str_plain_derefInSearching_int_pos_1_tuple;
static PyObject *const_str_plain_insufficientAccessRights;
static PyObject *const_int_pos_82;
extern PyObject *const_tuple_empty;
static PyObject *const_str_plain_ModifyDNResponse;
static PyObject *const_str_plain_singleLevel;
static PyObject *const_str_plain_modDNRequest;
static PyObject *const_int_pos_48;
extern PyObject *const_int_pos_10;
static PyObject *const_str_plain_resultCode;
static PyObject *const_str_plain_newrdn;
static PyObject *const_tuple_str_digest_4f195fdd223b17cfd65e5f548667eea5_int_pos_9_tuple;
extern PyObject *const_str_plain_implicitTag;
static PyObject *const_str_plain_modification;
static PyObject *const_str_plain_AttributeTypeAndValues;
static PyObject *const_str_plain_LDAPMessage;
static PyObject *const_int_pos_67;
static PyObject *const_int_pos_71;
static PyObject *const_tuple_str_plain_inappropriateAuthentication_int_pos_48_tuple;
static PyObject *const_str_plain_criticality;
static PyObject *const_str_plain_objectName;
static PyObject *const_str_plain_derefInSearching;
static PyObject *const_str_plain_AbandonRequest;
extern PyObject *const_str_plain_NamedType;
extern PyObject *const_str_plain_SequenceOf;
static PyObject *const_str_plain_namingViolation;
static PyObject *const_str_plain_LDAPString;
static PyObject *const_str_plain_responseName;
static PyObject *const_str_plain_controls;
static PyObject *const_tuple_str_plain_sizeLimitExceeded_int_pos_4_tuple;
static PyObject *const_tuple_str_plain_saslBindInProgress_int_pos_14_tuple;
static PyObject *const_tuple_str_plain_delete_int_pos_1_tuple;
static PyObject *const_str_plain_baseObject;
extern PyObject *const_str_plain_componentType;
extern PyObject *const_str_plain_DefaultedNamedType;
static PyObject *const_str_plain_derefAliases;
static PyObject *const_str_plain_MatchingRuleId;
static PyObject *const_str_digest_4ab320b4362846230595808a8892977d;
extern PyObject *const_int_pos_13;
static PyObject *const_str_plain_Control;
extern PyObject *const_str_plain___class__;
static PyObject *const_tuple_str_plain_entryAlreadyExists_int_pos_68_tuple;
static PyObject *const_tuple_str_plain_notAllowedOnNonLeaf_int_pos_66_tuple;
extern PyObject *const_str_plain___module__;
static PyObject *const_str_plain_ExtendedResponse;
extern PyObject *const_str_plain_tagClassContext;
static PyObject *const_int_pos_81;
static PyObject *const_str_plain_mechanism;
static PyObject *const_str_plain_delRequest;
static PyObject *const_tuple_str_digest_c62754620912974b073e7a838e355782_int_pos_82_tuple;
static PyObject *const_int_pos_35;
static PyObject *const_str_plain_timeLimitExceeded;
static PyObject *const_str_plain_invalidAttributeSyntax;
extern PyObject *const_str_plain_attributes;
static PyObject *const_int_pos_49;
extern PyObject *const_str_plain_constraint;
static PyObject *const_str_plain_SearchResultDone;
static PyObject *const_str_plain_undefinedAttributeType;
extern PyObject *const_str_plain_tag;
extern PyObject *const_str_plain_metaclass;
extern PyObject *const_str_plain_credentials;
static PyObject *const_tuple_str_plain_invalidCredentials_int_pos_49_tuple;
static PyObject *const_tuple_str_plain_add_int_0_tuple;
extern PyObject *const_str_plain_univ;
static PyObject *const_str_plain_equalityMatch;
static PyObject *const_str_plain_BindRequest;
extern PyObject *const_str_plain_vals;
static PyObject *const_str_plain_requestName;
extern PyObject *const_int_pos_6;
extern PyObject *const_str_plain_scope;
static PyObject *const_tuple_str_plain_loopDetect_int_pos_54_tuple;
static PyObject *const_str_plain_controlValue;
static PyObject *const_str_plain_compareTrue;
extern PyObject *const_tuple_8d452a14c86d6dbde022d5740faa1c75_tuple;
static PyObject *const_int_pos_70;
static PyObject *const_str_plain_derefFindingBaseObj;
static PyObject *const_str_plain_modDNResponse;
static PyObject *const_str_plain_searchResDone;
static PyObject *const_tuple_str_plain_notAllowedOnRDN_int_pos_67_tuple;
static PyObject *const_tuple_str_plain_singleLevel_int_pos_1_tuple;
static PyObject *const_str_plain_AuthenticationChoice;
static PyObject *const_str_plain_attributeDesc;
static PyObject *const_tuple_str_plain_baseObject_int_0_tuple;
static PyObject *const_str_digest_4f195fdd223b17cfd65e5f548667eea5;
static PyObject *const_str_plain_referral;
static PyObject *const_str_plain_LDAPResult;
static PyObject *const_str_digest_e30baf3a42d48aa38c91959217bd1135;
static PyObject *const_str_plain_ModifyDNRequest;
static PyObject *const_str_digest_374cdbe4bbbf65f37e852f694e02c190;
static PyObject *const_str_plain_objectClassModsProhibited;
extern PyObject *const_tuple_529a73ff47a37941b922169536cbd288_tuple;
static PyObject *const_str_plain_requestValue;
static PyObject *const_str_plain_adminLimitExceeded;
static PyObject *const_tuple_str_plain_insufficientAccessRights_int_pos_50_tuple;
static PyObject *const_str_plain_serverSaslCreds;
static PyObject *const_str_plain_loopDetect;
extern PyObject *const_str_plain_char;
static PyObject *const_str_digest_94ef42bcdb99c0cee81fc3ee8ef2bafd;
static PyObject *const_tuple_str_plain_confidentialityRequired_int_pos_13_tuple;
extern PyObject *const_str_plain_Sequence;
static PyObject *const_str_digest_5be3009a60812e559c88a30ae87c9157;
static PyObject *const_str_plain_strongAuthRequired;
static PyObject *const_str_plain_Filter2;
static PyObject *const_str_plain_AddResponse;
extern PyObject *const_int_pos_21;
static PyObject *const_str_plain_AttributeDescription;
static PyObject *const_str_plain_simple;
extern PyObject *const_str_plain_useful;
extern PyObject *const_str_plain_AttributeType;
static PyObject *const_str_plain_DelRequest;
extern PyObject *const_str_plain_Enumerated;
static PyObject *const_int_pos_88;
static PyObject *const_int_pos_66;
static PyObject *const_str_plain_notAllowedOnNonLeaf;
static PyObject *const_str_plain_AttributeList;
static PyObject *const_int_pos_50;
static PyObject *const_tuple_str_digest_94ef42bcdb99c0cee81fc3ee8ef2bafd_int_pos_85_tuple;
static PyObject *const_int_pos_90;
static PyObject *const_str_plain_approxMatch;
extern PyObject *const_str_plain_tagClassApplication;
static PyObject *const_str_plain_or;
static PyObject *const_str_plain_AssertionValue;
extern PyObject *const_int_pos_127;
static PyObject *const_str_plain_derefAlways;
static PyObject *const_int_pos_89;
static PyObject *const_str_plain_BindResponse;
extern PyObject *const_str_plain_AttributeValue;
static PyObject *const_str_plain_initial;
static PyObject *const_str_plain_compareRequest;
static PyObject *const_str_digest_9ecb9e98a4e53a42773177fd3208db1a;
extern PyObject *const_int_pos_3;
static PyObject *const_tuple_str_plain_derefAlways_int_pos_3_tuple;
static PyObject *const_str_plain_UnbindRequest;
extern PyObject *const_int_pos_65;
extern PyObject *const_int_pos_7;
static PyObject *const_int_pos_85;
static PyObject *const_tuple_str_plain_aliasDereferencingProblem_int_pos_36_tuple;
static PyObject *const_int_pos_86;
extern PyObject *const_int_pos_2;
extern PyObject *const_str_plain_OctetString;
static PyObject *const_tuple_str_plain_unwillingToPerform_int_pos_53_tuple;
extern PyObject *const_str_plain_namedtype;
static PyObject *const_str_digest_9d169277999c894465fa96c2be79fc53;
static PyObject *const_str_plain_delResponse;
static PyObject *const_tuple_str_digest_4902b3b8002754e9aa8d9efc06afe33c_int_pos_86_tuple;
static PyObject *const_str_plain_extendedResp;
static PyObject *module_filename_obj;

static bool constants_created = false;

static void createModuleConstants( void )
{
    const_tuple_str_digest_d5e75659fbb8dd91b485f53529ce6029_int_pos_81_tuple = PyTuple_New( 2 );
    const_str_digest_d5e75659fbb8dd91b485f53529ce6029 = UNSTREAM_STRING( &constant_bin[ 315902 ], 11, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_d5e75659fbb8dd91b485f53529ce6029_int_pos_81_tuple, 0, const_str_digest_d5e75659fbb8dd91b485f53529ce6029 ); Py_INCREF( const_str_digest_d5e75659fbb8dd91b485f53529ce6029 );
    const_int_pos_81 = PyLong_FromUnsignedLong( 81ul );
    PyTuple_SET_ITEM( const_tuple_str_digest_d5e75659fbb8dd91b485f53529ce6029_int_pos_81_tuple, 1, const_int_pos_81 ); Py_INCREF( const_int_pos_81 );
    const_str_plain_modifyResponse = UNSTREAM_STRING( &constant_bin[ 315913 ], 14, 1 );
    const_tuple_str_plain_affectsMultipleDSAs_int_pos_71_tuple = PyTuple_New( 2 );
    const_str_plain_affectsMultipleDSAs = UNSTREAM_STRING( &constant_bin[ 315927 ], 19, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_affectsMultipleDSAs_int_pos_71_tuple, 0, const_str_plain_affectsMultipleDSAs ); Py_INCREF( const_str_plain_affectsMultipleDSAs );
    const_int_pos_71 = PyLong_FromUnsignedLong( 71ul );
    PyTuple_SET_ITEM( const_tuple_str_plain_affectsMultipleDSAs_int_pos_71_tuple, 1, const_int_pos_71 ); Py_INCREF( const_int_pos_71 );
    const_str_plain_matchValue = UNSTREAM_STRING( &constant_bin[ 315946 ], 10, 1 );
    const_tuple_str_plain_authMethodNotSupported_int_pos_7_tuple = PyTuple_New( 2 );
    const_str_plain_authMethodNotSupported = UNSTREAM_STRING( &constant_bin[ 315956 ], 22, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_authMethodNotSupported_int_pos_7_tuple, 0, const_str_plain_authMethodNotSupported ); Py_INCREF( const_str_plain_authMethodNotSupported );
    PyTuple_SET_ITEM( const_tuple_str_plain_authMethodNotSupported_int_pos_7_tuple, 1, const_int_pos_7 ); Py_INCREF( const_int_pos_7 );
    const_str_plain_invalidCredentials = UNSTREAM_STRING( &constant_bin[ 315978 ], 18, 1 );
    const_str_plain_compareResponse = UNSTREAM_STRING( &constant_bin[ 315996 ], 15, 1 );
    const_int_pos_52 = PyLong_FromUnsignedLong( 52ul );
    const_str_plain_PartialAttributeList = UNSTREAM_STRING( &constant_bin[ 52883 ], 20, 1 );
    const_str_plain_CompareResponse = UNSTREAM_STRING( &constant_bin[ 53991 ], 15, 1 );
    const_str_plain_extendedReq = UNSTREAM_STRING( &constant_bin[ 316011 ], 11, 1 );
    const_str_plain_AttributeDescriptionList = UNSTREAM_STRING( &constant_bin[ 53200 ], 24, 1 );
    const_str_plain_ModifyRequest = UNSTREAM_STRING( &constant_bin[ 53679 ], 13, 1 );
    const_str_digest_c01ff8b1c3f7587c3342d653d8656713 = UNSTREAM_STRING( &constant_bin[ 316022 ], 11, 0 );
    const_tuple_str_plain_objectClassViolation_int_pos_65_tuple = PyTuple_New( 2 );
    const_str_plain_objectClassViolation = UNSTREAM_STRING( &constant_bin[ 316033 ], 20, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_objectClassViolation_int_pos_65_tuple, 0, const_str_plain_objectClassViolation ); Py_INCREF( const_str_plain_objectClassViolation );
    PyTuple_SET_ITEM( const_tuple_str_plain_objectClassViolation_int_pos_65_tuple, 1, const_int_pos_65 ); Py_INCREF( const_int_pos_65 );
    const_str_plain_ava = UNSTREAM_STRING( &constant_bin[ 38372 ], 3, 1 );
    const_str_plain_LDAPOID = UNSTREAM_STRING( &constant_bin[ 52689 ], 7, 1 );
    const_str_plain_LDAPURL = UNSTREAM_STRING( &constant_bin[ 52747 ], 7, 1 );
    const_str_plain_constraintViolation = UNSTREAM_STRING( &constant_bin[ 316053 ], 19, 1 );
    const_tuple_str_plain_other_int_pos_80_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_other_int_pos_80_tuple, 0, const_str_plain_other ); Py_INCREF( const_str_plain_other );
    PyTuple_SET_ITEM( const_tuple_str_plain_other_int_pos_80_tuple, 1, const_int_pos_80 ); Py_INCREF( const_int_pos_80 );
    const_int_pos_68 = PyLong_FromUnsignedLong( 68ul );
    const_tuple_str_digest_4f4038e9c5903a8e36f1972133d3d29f_int_pos_84_tuple = PyTuple_New( 2 );
    const_str_digest_4f4038e9c5903a8e36f1972133d3d29f = UNSTREAM_STRING( &constant_bin[ 316072 ], 11, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_4f4038e9c5903a8e36f1972133d3d29f_int_pos_84_tuple, 0, const_str_digest_4f4038e9c5903a8e36f1972133d3d29f ); Py_INCREF( const_str_digest_4f4038e9c5903a8e36f1972133d3d29f );
    const_int_pos_84 = PyLong_FromUnsignedLong( 84ul );
    PyTuple_SET_ITEM( const_tuple_str_digest_4f4038e9c5903a8e36f1972133d3d29f_int_pos_84_tuple, 1, const_int_pos_84 ); Py_INCREF( const_int_pos_84 );
    const_str_plain_dnAttributes = UNSTREAM_STRING( &constant_bin[ 316083 ], 12, 1 );
    const_str_plain_DelResponse = UNSTREAM_STRING( &constant_bin[ 53847 ], 11, 1 );
    const_tuple_str_digest_374cdbe4bbbf65f37e852f694e02c190_int_pos_88_tuple = PyTuple_New( 2 );
    const_str_digest_374cdbe4bbbf65f37e852f694e02c190 = UNSTREAM_STRING( &constant_bin[ 316095 ], 11, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_374cdbe4bbbf65f37e852f694e02c190_int_pos_88_tuple, 0, const_str_digest_374cdbe4bbbf65f37e852f694e02c190 ); Py_INCREF( const_str_digest_374cdbe4bbbf65f37e852f694e02c190 );
    const_int_pos_88 = PyLong_FromUnsignedLong( 88ul );
    PyTuple_SET_ITEM( const_tuple_str_digest_374cdbe4bbbf65f37e852f694e02c190_int_pos_88_tuple, 1, const_int_pos_88 ); Py_INCREF( const_int_pos_88 );
    const_tuple_str_plain_decoder_str_plain_encoder_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_decoder_str_plain_encoder_tuple, 0, const_str_plain_decoder ); Py_INCREF( const_str_plain_decoder );
    PyTuple_SET_ITEM( const_tuple_str_plain_decoder_str_plain_encoder_tuple, 1, const_str_plain_encoder ); Py_INCREF( const_str_plain_encoder );
    const_str_plain_sasl = UNSTREAM_STRING( &constant_bin[ 316106 ], 4, 1 );
    const_str_digest_4902b3b8002754e9aa8d9efc06afe33c = UNSTREAM_STRING( &constant_bin[ 316110 ], 11, 0 );
    const_str_plain_assertionValue = UNSTREAM_STRING( &constant_bin[ 316121 ], 14, 1 );
    const_str_plain_addRequest = UNSTREAM_STRING( &constant_bin[ 316135 ], 10, 1 );
    const_str_plain_LDAPDN = UNSTREAM_STRING( &constant_bin[ 52813 ], 6, 1 );
    const_str_plain_messageID = UNSTREAM_STRING( &constant_bin[ 316145 ], 9, 1 );
    const_str_plain_unbindRequest = UNSTREAM_STRING( &constant_bin[ 316154 ], 13, 1 );
    const_str_plain_deleteoldrdn = UNSTREAM_STRING( &constant_bin[ 316167 ], 12, 1 );
    const_str_plain_ExtendedRequest = UNSTREAM_STRING( &constant_bin[ 54064 ], 15, 1 );
    const_str_plain_MatchingRuleAssertion = UNSTREAM_STRING( &constant_bin[ 53043 ], 21, 1 );
    const_str_plain_timeLimit = UNSTREAM_STRING( &constant_bin[ 316179 ], 9, 1 );
    const_str_plain_Filter3 = UNSTREAM_STRING( &constant_bin[ 53086 ], 7, 1 );
    const_int_pos_51 = PyLong_FromUnsignedLong( 51ul );
    const_str_plain_searchRequest = UNSTREAM_STRING( &constant_bin[ 316188 ], 13, 1 );
    const_tuple_str_plain_derefFindingBaseObj_int_pos_2_tuple = PyTuple_New( 2 );
    const_str_plain_derefFindingBaseObj = UNSTREAM_STRING( &constant_bin[ 316201 ], 19, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_derefFindingBaseObj_int_pos_2_tuple, 0, const_str_plain_derefFindingBaseObj ); Py_INCREF( const_str_plain_derefFindingBaseObj );
    PyTuple_SET_ITEM( const_tuple_str_plain_derefFindingBaseObj_int_pos_2_tuple, 1, const_int_pos_2 ); Py_INCREF( const_int_pos_2 );
    const_tuple_str_plain_compareTrue_int_pos_6_tuple = PyTuple_New( 2 );
    const_str_plain_compareTrue = UNSTREAM_STRING( &constant_bin[ 316220 ], 11, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_compareTrue_int_pos_6_tuple, 0, const_str_plain_compareTrue ); Py_INCREF( const_str_plain_compareTrue );
    PyTuple_SET_ITEM( const_tuple_str_plain_compareTrue_int_pos_6_tuple, 1, const_int_pos_6 ); Py_INCREF( const_int_pos_6 );
    const_int_pos_36 = PyLong_FromUnsignedLong( 36ul );
    const_str_plain_bindRequest = UNSTREAM_STRING( &constant_bin[ 53491 ], 11, 1 );
    const_str_plain_searchResRef = UNSTREAM_STRING( &constant_bin[ 316231 ], 12, 1 );
    const_str_plain_aliasProblem = UNSTREAM_STRING( &constant_bin[ 316243 ], 12, 1 );
    const_str_plain_sizeLimit = UNSTREAM_STRING( &constant_bin[ 316255 ], 9, 1 );
    const_str_plain_wholeSubtree = UNSTREAM_STRING( &constant_bin[ 316264 ], 12, 1 );
    const_tuple_str_digest_9d169277999c894465fa96c2be79fc53_int_pos_89_tuple = PyTuple_New( 2 );
    const_str_digest_9d169277999c894465fa96c2be79fc53 = UNSTREAM_STRING( &constant_bin[ 316276 ], 11, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_9d169277999c894465fa96c2be79fc53_int_pos_89_tuple, 0, const_str_digest_9d169277999c894465fa96c2be79fc53 ); Py_INCREF( const_str_digest_9d169277999c894465fa96c2be79fc53 );
    const_int_pos_89 = PyLong_FromUnsignedLong( 89ul );
    PyTuple_SET_ITEM( const_tuple_str_digest_9d169277999c894465fa96c2be79fc53_int_pos_89_tuple, 1, const_int_pos_89 ); Py_INCREF( const_int_pos_89 );
    const_str_plain_inappropriateAuthentication = UNSTREAM_STRING( &constant_bin[ 316287 ], 27, 1 );
    const_tuple_str_plain_adminLimitExceeded_int_pos_11_tuple = PyTuple_New( 2 );
    const_str_plain_adminLimitExceeded = UNSTREAM_STRING( &constant_bin[ 316314 ], 18, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_adminLimitExceeded_int_pos_11_tuple, 0, const_str_plain_adminLimitExceeded ); Py_INCREF( const_str_plain_adminLimitExceeded );
    PyTuple_SET_ITEM( const_tuple_str_plain_adminLimitExceeded_int_pos_11_tuple, 1, const_int_pos_11 ); Py_INCREF( const_int_pos_11 );
    const_str_plain_noSuchObject = UNSTREAM_STRING( &constant_bin[ 316332 ], 12, 1 );
    const_str_plain_Controls = UNSTREAM_STRING( &constant_bin[ 54139 ], 8, 1 );
    const_str_plain_and = UNSTREAM_STRING( &constant_bin[ 5738 ], 3, 1 );
    const_str_plain_addResponse = UNSTREAM_STRING( &constant_bin[ 316344 ], 11, 1 );
    const_tuple_str_plain_aliasProblem_int_pos_33_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_aliasProblem_int_pos_33_tuple, 0, const_str_plain_aliasProblem ); Py_INCREF( const_str_plain_aliasProblem );
    const_int_pos_33 = PyLong_FromUnsignedLong( 33ul );
    PyTuple_SET_ITEM( const_tuple_str_plain_aliasProblem_int_pos_33_tuple, 1, const_int_pos_33 ); Py_INCREF( const_int_pos_33 );
    const_tuple_str_plain_protocolError_int_pos_2_tuple = PyTuple_New( 2 );
    const_str_plain_protocolError = UNSTREAM_STRING( &constant_bin[ 316355 ], 13, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_protocolError_int_pos_2_tuple, 0, const_str_plain_protocolError ); Py_INCREF( const_str_plain_protocolError );
    PyTuple_SET_ITEM( const_tuple_str_plain_protocolError_int_pos_2_tuple, 1, const_int_pos_2 ); Py_INCREF( const_int_pos_2 );
    const_str_plain_notAllowedOnRDN = UNSTREAM_STRING( &constant_bin[ 316368 ], 15, 1 );
    const_str_plain_saslBindInProgress = UNSTREAM_STRING( &constant_bin[ 316383 ], 18, 1 );
    const_str_plain_operationsError = UNSTREAM_STRING( &constant_bin[ 316401 ], 15, 1 );
    const_str_plain_noSuchAttribute = UNSTREAM_STRING( &constant_bin[ 316416 ], 15, 1 );
    const_tuple_str_plain_neverDerefAliases_int_0_tuple = PyTuple_New( 2 );
    const_str_plain_neverDerefAliases = UNSTREAM_STRING( &constant_bin[ 316431 ], 17, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_neverDerefAliases_int_0_tuple, 0, const_str_plain_neverDerefAliases ); Py_INCREF( const_str_plain_neverDerefAliases );
    PyTuple_SET_ITEM( const_tuple_str_plain_neverDerefAliases_int_0_tuple, 1, const_int_0 ); Py_INCREF( const_int_0 );
    const_str_plain_modifyRequest = UNSTREAM_STRING( &constant_bin[ 316448 ], 13, 1 );
    const_tuple_str_digest_c01ff8b1c3f7587c3342d653d8656713_int_pos_87_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_digest_c01ff8b1c3f7587c3342d653d8656713_int_pos_87_tuple, 0, const_str_digest_c01ff8b1c3f7587c3342d653d8656713 ); Py_INCREF( const_str_digest_c01ff8b1c3f7587c3342d653d8656713 );
    const_int_pos_87 = PyLong_FromUnsignedLong( 87ul );
    PyTuple_SET_ITEM( const_tuple_str_digest_c01ff8b1c3f7587c3342d653d8656713_int_pos_87_tuple, 1, const_int_pos_87 ); Py_INCREF( const_int_pos_87 );
    const_str_plain_extensibleMatch = UNSTREAM_STRING( &constant_bin[ 316461 ], 15, 1 );
    const_int_pos_69 = PyLong_FromUnsignedLong( 69ul );
    const_tuple_str_digest_9ecb9e98a4e53a42773177fd3208db1a_int_pos_35_tuple = PyTuple_New( 2 );
    const_str_digest_9ecb9e98a4e53a42773177fd3208db1a = UNSTREAM_STRING( &constant_bin[ 316476 ], 11, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_9ecb9e98a4e53a42773177fd3208db1a_int_pos_35_tuple, 0, const_str_digest_9ecb9e98a4e53a42773177fd3208db1a ); Py_INCREF( const_str_digest_9ecb9e98a4e53a42773177fd3208db1a );
    const_int_pos_35 = PyLong_FromUnsignedLong( 35ul );
    PyTuple_SET_ITEM( const_tuple_str_digest_9ecb9e98a4e53a42773177fd3208db1a_int_pos_35_tuple, 1, const_int_pos_35 ); Py_INCREF( const_int_pos_35 );
    const_str_plain_compareFalse = UNSTREAM_STRING( &constant_bin[ 316487 ], 12, 1 );
    const_tuple_str_plain_strongAuthRequired_int_pos_8_tuple = PyTuple_New( 2 );
    const_str_plain_strongAuthRequired = UNSTREAM_STRING( &constant_bin[ 316499 ], 18, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_strongAuthRequired_int_pos_8_tuple, 0, const_str_plain_strongAuthRequired ); Py_INCREF( const_str_plain_strongAuthRequired );
    PyTuple_SET_ITEM( const_tuple_str_plain_strongAuthRequired_int_pos_8_tuple, 1, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    const_str_plain_controlType = UNSTREAM_STRING( &constant_bin[ 316517 ], 11, 1 );
    const_str_plain_matchingRule = UNSTREAM_STRING( &constant_bin[ 316528 ], 12, 1 );
    const_str_digest_f95e66addcd2fe5d78faabdeec24b203 = UNSTREAM_STRING( &constant_bin[ 316540 ], 11, 0 );
    const_tuple_str_plain_noSuchAttribute_int_pos_16_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_noSuchAttribute_int_pos_16_tuple, 0, const_str_plain_noSuchAttribute ); Py_INCREF( const_str_plain_noSuchAttribute );
    PyTuple_SET_ITEM( const_tuple_str_plain_noSuchAttribute_int_pos_16_tuple, 1, const_int_pos_16 ); Py_INCREF( const_int_pos_16 );
    const_tuple_str_plain_operationsError_int_pos_1_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_operationsError_int_pos_1_tuple, 0, const_str_plain_operationsError ); Py_INCREF( const_str_plain_operationsError );
    PyTuple_SET_ITEM( const_tuple_str_plain_operationsError_int_pos_1_tuple, 1, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    const_str_digest_c62754620912974b073e7a838e355782 = UNSTREAM_STRING( &constant_bin[ 316551 ], 11, 0 );
    const_str_plain_AddRequest = UNSTREAM_STRING( &constant_bin[ 53750 ], 10, 1 );
    const_str_plain_confidentialityRequired = UNSTREAM_STRING( &constant_bin[ 316562 ], 23, 1 );
    const_str_plain_unwillingToPerform = UNSTREAM_STRING( &constant_bin[ 316585 ], 18, 1 );
    const_str_plain_SearchResultEntry = UNSTREAM_STRING( &constant_bin[ 53559 ], 17, 1 );
    const_str_plain_substrings = UNSTREAM_STRING( &constant_bin[ 316603 ], 10, 1 );
    const_str_plain_abandonRequest = UNSTREAM_STRING( &constant_bin[ 316613 ], 14, 1 );
    const_str_plain_SubstringFilter = UNSTREAM_STRING( &constant_bin[ 53006 ], 15, 1 );
    const_str_digest_6a2f0605d1e2f8992d30eea76449f137 = UNSTREAM_STRING( &constant_bin[ 316627 ], 55, 0 );
    const_str_plain_not = UNSTREAM_STRING( &constant_bin[ 90 ], 3, 1 );
    const_str_plain_Referral = UNSTREAM_STRING( &constant_bin[ 53246 ], 8, 1 );
    const_str_plain_CompareRequest = UNSTREAM_STRING( &constant_bin[ 53955 ], 14, 1 );
    const_int_pos_83 = PyLong_FromUnsignedLong( 83ul );
    const_tuple_str_digest_f95e66addcd2fe5d78faabdeec24b203_int_pos_70_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_digest_f95e66addcd2fe5d78faabdeec24b203_int_pos_70_tuple, 0, const_str_digest_f95e66addcd2fe5d78faabdeec24b203 ); Py_INCREF( const_str_digest_f95e66addcd2fe5d78faabdeec24b203 );
    const_int_pos_70 = PyLong_FromUnsignedLong( 70ul );
    PyTuple_SET_ITEM( const_tuple_str_digest_f95e66addcd2fe5d78faabdeec24b203_int_pos_70_tuple, 1, const_int_pos_70 ); Py_INCREF( const_int_pos_70 );
    const_tuple_str_plain_referral_int_pos_10_tuple = PyTuple_New( 2 );
    const_str_plain_referral = UNSTREAM_STRING( &constant_bin[ 316682 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_referral_int_pos_10_tuple, 0, const_str_plain_referral ); Py_INCREF( const_str_plain_referral );
    PyTuple_SET_ITEM( const_tuple_str_plain_referral_int_pos_10_tuple, 1, const_int_pos_10 ); Py_INCREF( const_int_pos_10 );
    const_str_plain_matchedDN = UNSTREAM_STRING( &constant_bin[ 316690 ], 9, 1 );
    const_int_pos_34 = PyLong_FromUnsignedLong( 34ul );
    const_str_plain_AttributeValueAssertion = UNSTREAM_STRING( &constant_bin[ 52961 ], 23, 1 );
    const_tuple_str_plain_namingViolation_int_pos_64_tuple = PyTuple_New( 2 );
    const_str_plain_namingViolation = UNSTREAM_STRING( &constant_bin[ 316699 ], 15, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_namingViolation_int_pos_64_tuple, 0, const_str_plain_namingViolation ); Py_INCREF( const_str_plain_namingViolation );
    PyTuple_SET_ITEM( const_tuple_str_plain_namingViolation_int_pos_64_tuple, 1, const_int_pos_64 ); Py_INCREF( const_int_pos_64 );
    const_tuple_str_plain_wholeSubtree_int_pos_2_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_wholeSubtree_int_pos_2_tuple, 0, const_str_plain_wholeSubtree ); Py_INCREF( const_str_plain_wholeSubtree );
    PyTuple_SET_ITEM( const_tuple_str_plain_wholeSubtree_int_pos_2_tuple, 1, const_int_pos_2 ); Py_INCREF( const_int_pos_2 );
    const_str_plain_SaslCredentials = UNSTREAM_STRING( &constant_bin[ 52776 ], 15, 1 );
    const_str_plain_operation = UNSTREAM_STRING( &constant_bin[ 131100 ], 9, 1 );
    const_str_plain_searchResEntry = UNSTREAM_STRING( &constant_bin[ 316714 ], 14, 1 );
    const_int_pos_54 = PyLong_FromUnsignedLong( 54ul );
    const_tuple_str_plain_objectClassModsProhibited_int_pos_69_tuple = PyTuple_New( 2 );
    const_str_plain_objectClassModsProhibited = UNSTREAM_STRING( &constant_bin[ 316728 ], 25, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_objectClassModsProhibited_int_pos_69_tuple, 0, const_str_plain_objectClassModsProhibited ); Py_INCREF( const_str_plain_objectClassModsProhibited );
    PyTuple_SET_ITEM( const_tuple_str_plain_objectClassModsProhibited_int_pos_69_tuple, 1, const_int_pos_69 ); Py_INCREF( const_int_pos_69 );
    const_str_plain_ModifyResponse = UNSTREAM_STRING( &constant_bin[ 53714 ], 14, 1 );
    const_str_plain_present = UNSTREAM_STRING( &constant_bin[ 114575 ], 7, 1 );
    const_tuple_str_plain_undefinedAttributeType_int_pos_17_tuple = PyTuple_New( 2 );
    const_str_plain_undefinedAttributeType = UNSTREAM_STRING( &constant_bin[ 316753 ], 22, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_undefinedAttributeType_int_pos_17_tuple, 0, const_str_plain_undefinedAttributeType ); Py_INCREF( const_str_plain_undefinedAttributeType );
    PyTuple_SET_ITEM( const_tuple_str_plain_undefinedAttributeType_int_pos_17_tuple, 1, const_int_pos_17 ); Py_INCREF( const_int_pos_17 );
    const_tuple_str_plain_timeLimitExceeded_int_pos_3_tuple = PyTuple_New( 2 );
    const_str_plain_timeLimitExceeded = UNSTREAM_STRING( &constant_bin[ 316775 ], 17, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_timeLimitExceeded_int_pos_3_tuple, 0, const_str_plain_timeLimitExceeded ); Py_INCREF( const_str_plain_timeLimitExceeded );
    PyTuple_SET_ITEM( const_tuple_str_plain_timeLimitExceeded_int_pos_3_tuple, 1, const_int_pos_3 ); Py_INCREF( const_int_pos_3 );
    const_tuple_str_digest_bc1245ca16d93bd4ffa7e606a9f4b445_int_pos_83_tuple = PyTuple_New( 2 );
    const_str_digest_bc1245ca16d93bd4ffa7e606a9f4b445 = UNSTREAM_STRING( &constant_bin[ 316792 ], 11, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_bc1245ca16d93bd4ffa7e606a9f4b445_int_pos_83_tuple, 0, const_str_digest_bc1245ca16d93bd4ffa7e606a9f4b445 ); Py_INCREF( const_str_digest_bc1245ca16d93bd4ffa7e606a9f4b445 );
    PyTuple_SET_ITEM( const_tuple_str_digest_bc1245ca16d93bd4ffa7e606a9f4b445_int_pos_83_tuple, 1, const_int_pos_83 ); Py_INCREF( const_int_pos_83 );
    const_tuple_str_plain_invalidAttributeSyntax_int_pos_21_tuple = PyTuple_New( 2 );
    const_str_plain_invalidAttributeSyntax = UNSTREAM_STRING( &constant_bin[ 316803 ], 22, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_invalidAttributeSyntax_int_pos_21_tuple, 0, const_str_plain_invalidAttributeSyntax ); Py_INCREF( const_str_plain_invalidAttributeSyntax );
    PyTuple_SET_ITEM( const_tuple_str_plain_invalidAttributeSyntax_int_pos_21_tuple, 1, const_int_pos_21 ); Py_INCREF( const_int_pos_21 );
    const_str_plain_Filter = UNSTREAM_STRING( &constant_bin[ 53015 ], 6, 1 );
    const_tuple_str_plain_success_int_0_tuple = PyTuple_New( 2 );
    const_str_plain_success = UNSTREAM_STRING( &constant_bin[ 141749 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_success_int_0_tuple, 0, const_str_plain_success ); Py_INCREF( const_str_plain_success );
    PyTuple_SET_ITEM( const_tuple_str_plain_success_int_0_tuple, 1, const_int_0 ); Py_INCREF( const_int_0 );
    const_str_plain_protocolOp = UNSTREAM_STRING( &constant_bin[ 316825 ], 10, 1 );
    const_str_plain_errorMessage = UNSTREAM_STRING( &constant_bin[ 316835 ], 12, 1 );
    const_str_plain_lessOrEqual = UNSTREAM_STRING( &constant_bin[ 316847 ], 11, 1 );
    const_str_plain_busy = UNSTREAM_STRING( &constant_bin[ 316858 ], 4, 1 );
    const_str_plain_bindResponse = UNSTREAM_STRING( &constant_bin[ 316862 ], 12, 1 );
    const_str_plain_SearchRequest = UNSTREAM_STRING( &constant_bin[ 53524 ], 13, 1 );
    const_str_plain_maxInt = UNSTREAM_STRING( &constant_bin[ 53144 ], 6, 1 );
    const_str_plain_SearchResultReference = UNSTREAM_STRING( &constant_bin[ 53636 ], 21, 1 );
    const_tuple_str_plain_constraintViolation_int_pos_19_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_constraintViolation_int_pos_19_tuple, 0, const_str_plain_constraintViolation ); Py_INCREF( const_str_plain_constraintViolation );
    PyTuple_SET_ITEM( const_tuple_str_plain_constraintViolation_int_pos_19_tuple, 1, const_int_pos_19 ); Py_INCREF( const_int_pos_19 );
    const_tuple_str_plain_busy_int_pos_51_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_busy_int_pos_51_tuple, 0, const_str_plain_busy ); Py_INCREF( const_str_plain_busy );
    PyTuple_SET_ITEM( const_tuple_str_plain_busy_int_pos_51_tuple, 1, const_int_pos_51 ); Py_INCREF( const_int_pos_51 );
    const_str_plain_MessageID = UNSTREAM_STRING( &constant_bin[ 53391 ], 9, 1 );
    const_str_plain_typesOnly = UNSTREAM_STRING( &constant_bin[ 316874 ], 9, 1 );
    const_tuple_str_plain_unavailable_int_pos_52_tuple = PyTuple_New( 2 );
    const_str_plain_unavailable = UNSTREAM_STRING( &constant_bin[ 316883 ], 11, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_unavailable_int_pos_52_tuple, 0, const_str_plain_unavailable ); Py_INCREF( const_str_plain_unavailable );
    PyTuple_SET_ITEM( const_tuple_str_plain_unavailable_int_pos_52_tuple, 1, const_int_pos_52 ); Py_INCREF( const_int_pos_52 );
    const_str_digest_941c35c421ec5e89f5ed872865e8a629 = UNSTREAM_STRING( &constant_bin[ 316894 ], 11, 0 );
    const_str_plain_sizeLimitExceeded = UNSTREAM_STRING( &constant_bin[ 316905 ], 17, 1 );
    const_str_plain_entryAlreadyExists = UNSTREAM_STRING( &constant_bin[ 316922 ], 18, 1 );
    const_tuple_str_plain_attributeOrValueExists_int_pos_20_tuple = PyTuple_New( 2 );
    const_str_plain_attributeOrValueExists = UNSTREAM_STRING( &constant_bin[ 316940 ], 22, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_attributeOrValueExists_int_pos_20_tuple, 0, const_str_plain_attributeOrValueExists ); Py_INCREF( const_str_plain_attributeOrValueExists );
    PyTuple_SET_ITEM( const_tuple_str_plain_attributeOrValueExists_int_pos_20_tuple, 1, const_int_pos_20 ); Py_INCREF( const_int_pos_20 );
    const_str_plain_inappropriateMatching = UNSTREAM_STRING( &constant_bin[ 316962 ], 21, 1 );
    const_str_plain_RelativeLDAPDN = UNSTREAM_STRING( &constant_bin[ 53355 ], 14, 1 );
    const_tuple_str_plain_unavailableCriticalExtension_int_pos_12_tuple = PyTuple_New( 2 );
    const_str_plain_unavailableCriticalExtension = UNSTREAM_STRING( &constant_bin[ 316983 ], 28, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_unavailableCriticalExtension_int_pos_12_tuple, 0, const_str_plain_unavailableCriticalExtension ); Py_INCREF( const_str_plain_unavailableCriticalExtension );
    PyTuple_SET_ITEM( const_tuple_str_plain_unavailableCriticalExtension_int_pos_12_tuple, 1, const_int_pos_12 ); Py_INCREF( const_int_pos_12 );
    const_tuple_str_plain_inappropriateMatching_int_pos_18_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_inappropriateMatching_int_pos_18_tuple, 0, const_str_plain_inappropriateMatching ); Py_INCREF( const_str_plain_inappropriateMatching );
    PyTuple_SET_ITEM( const_tuple_str_plain_inappropriateMatching_int_pos_18_tuple, 1, const_int_pos_18 ); Py_INCREF( const_int_pos_18 );
    const_tuple_str_plain_noSuchObject_int_pos_32_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_noSuchObject_int_pos_32_tuple, 0, const_str_plain_noSuchObject ); Py_INCREF( const_str_plain_noSuchObject );
    PyTuple_SET_ITEM( const_tuple_str_plain_noSuchObject_int_pos_32_tuple, 1, const_int_pos_32 ); Py_INCREF( const_int_pos_32 );
    const_tuple_str_digest_941c35c421ec5e89f5ed872865e8a629_int_pos_90_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_digest_941c35c421ec5e89f5ed872865e8a629_int_pos_90_tuple, 0, const_str_digest_941c35c421ec5e89f5ed872865e8a629 ); Py_INCREF( const_str_digest_941c35c421ec5e89f5ed872865e8a629 );
    const_int_pos_90 = PyLong_FromUnsignedLong( 90ul );
    PyTuple_SET_ITEM( const_tuple_str_digest_941c35c421ec5e89f5ed872865e8a629_int_pos_90_tuple, 1, const_int_pos_90 ); Py_INCREF( const_int_pos_90 );
    const_str_plain_aliasDereferencingProblem = UNSTREAM_STRING( &constant_bin[ 317011 ], 25, 1 );
    const_tuple_str_plain_replace_int_pos_2_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_replace_int_pos_2_tuple, 0, const_str_plain_replace ); Py_INCREF( const_str_plain_replace );
    PyTuple_SET_ITEM( const_tuple_str_plain_replace_int_pos_2_tuple, 1, const_int_pos_2 ); Py_INCREF( const_int_pos_2 );
    const_str_plain_authentication = UNSTREAM_STRING( &constant_bin[ 136078 ], 14, 1 );
    const_tuple_str_plain_invalidDNSyntax_int_pos_34_tuple = PyTuple_New( 2 );
    const_str_plain_invalidDNSyntax = UNSTREAM_STRING( &constant_bin[ 317036 ], 15, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_invalidDNSyntax_int_pos_34_tuple, 0, const_str_plain_invalidDNSyntax ); Py_INCREF( const_str_plain_invalidDNSyntax );
    PyTuple_SET_ITEM( const_tuple_str_plain_invalidDNSyntax_int_pos_34_tuple, 1, const_int_pos_34 ); Py_INCREF( const_int_pos_34 );
    const_str_plain_greaterOrEqual = UNSTREAM_STRING( &constant_bin[ 317051 ], 14, 1 );
    const_str_plain_newSuperior = UNSTREAM_STRING( &constant_bin[ 317065 ], 11, 1 );
    const_tuple_str_plain_compareFalse_int_pos_5_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_compareFalse_int_pos_5_tuple, 0, const_str_plain_compareFalse ); Py_INCREF( const_str_plain_compareFalse );
    PyTuple_SET_ITEM( const_tuple_str_plain_compareFalse_int_pos_5_tuple, 1, const_int_pos_5 ); Py_INCREF( const_int_pos_5 );
    const_tuple_str_plain_derefInSearching_int_pos_1_tuple = PyTuple_New( 2 );
    const_str_plain_derefInSearching = UNSTREAM_STRING( &constant_bin[ 317076 ], 16, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_derefInSearching_int_pos_1_tuple, 0, const_str_plain_derefInSearching ); Py_INCREF( const_str_plain_derefInSearching );
    PyTuple_SET_ITEM( const_tuple_str_plain_derefInSearching_int_pos_1_tuple, 1, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    const_str_plain_insufficientAccessRights = UNSTREAM_STRING( &constant_bin[ 317092 ], 24, 1 );
    const_int_pos_82 = PyLong_FromUnsignedLong( 82ul );
    const_str_plain_ModifyDNResponse = UNSTREAM_STRING( &constant_bin[ 53917 ], 16, 1 );
    const_str_plain_singleLevel = UNSTREAM_STRING( &constant_bin[ 317116 ], 11, 1 );
    const_str_plain_modDNRequest = UNSTREAM_STRING( &constant_bin[ 317127 ], 12, 1 );
    const_int_pos_48 = PyLong_FromUnsignedLong( 48ul );
    const_str_plain_resultCode = UNSTREAM_STRING( &constant_bin[ 317139 ], 10, 1 );
    const_str_plain_newrdn = UNSTREAM_STRING( &constant_bin[ 317149 ], 6, 1 );
    const_tuple_str_digest_4f195fdd223b17cfd65e5f548667eea5_int_pos_9_tuple = PyTuple_New( 2 );
    const_str_digest_4f195fdd223b17cfd65e5f548667eea5 = UNSTREAM_STRING( &constant_bin[ 316894 ], 10, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_4f195fdd223b17cfd65e5f548667eea5_int_pos_9_tuple, 0, const_str_digest_4f195fdd223b17cfd65e5f548667eea5 ); Py_INCREF( const_str_digest_4f195fdd223b17cfd65e5f548667eea5 );
    PyTuple_SET_ITEM( const_tuple_str_digest_4f195fdd223b17cfd65e5f548667eea5_int_pos_9_tuple, 1, const_int_pos_9 ); Py_INCREF( const_int_pos_9 );
    const_str_plain_modification = UNSTREAM_STRING( &constant_bin[ 317155 ], 12, 1 );
    const_str_plain_AttributeTypeAndValues = UNSTREAM_STRING( &constant_bin[ 53276 ], 22, 1 );
    const_str_plain_LDAPMessage = UNSTREAM_STRING( &constant_bin[ 317167 ], 11, 1 );
    const_int_pos_67 = PyLong_FromUnsignedLong( 67ul );
    const_tuple_str_plain_inappropriateAuthentication_int_pos_48_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_inappropriateAuthentication_int_pos_48_tuple, 0, const_str_plain_inappropriateAuthentication ); Py_INCREF( const_str_plain_inappropriateAuthentication );
    PyTuple_SET_ITEM( const_tuple_str_plain_inappropriateAuthentication_int_pos_48_tuple, 1, const_int_pos_48 ); Py_INCREF( const_int_pos_48 );
    const_str_plain_criticality = UNSTREAM_STRING( &constant_bin[ 317178 ], 11, 1 );
    const_str_plain_objectName = UNSTREAM_STRING( &constant_bin[ 317189 ], 10, 1 );
    const_str_plain_AbandonRequest = UNSTREAM_STRING( &constant_bin[ 54028 ], 14, 1 );
    const_str_plain_LDAPString = UNSTREAM_STRING( &constant_bin[ 52511 ], 10, 1 );
    const_str_plain_responseName = UNSTREAM_STRING( &constant_bin[ 317199 ], 12, 1 );
    const_str_plain_controls = UNSTREAM_STRING( &constant_bin[ 317211 ], 8, 1 );
    const_tuple_str_plain_sizeLimitExceeded_int_pos_4_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_sizeLimitExceeded_int_pos_4_tuple, 0, const_str_plain_sizeLimitExceeded ); Py_INCREF( const_str_plain_sizeLimitExceeded );
    PyTuple_SET_ITEM( const_tuple_str_plain_sizeLimitExceeded_int_pos_4_tuple, 1, const_int_pos_4 ); Py_INCREF( const_int_pos_4 );
    const_tuple_str_plain_saslBindInProgress_int_pos_14_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_saslBindInProgress_int_pos_14_tuple, 0, const_str_plain_saslBindInProgress ); Py_INCREF( const_str_plain_saslBindInProgress );
    PyTuple_SET_ITEM( const_tuple_str_plain_saslBindInProgress_int_pos_14_tuple, 1, const_int_pos_14 ); Py_INCREF( const_int_pos_14 );
    const_tuple_str_plain_delete_int_pos_1_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_delete_int_pos_1_tuple, 0, const_str_plain_delete ); Py_INCREF( const_str_plain_delete );
    PyTuple_SET_ITEM( const_tuple_str_plain_delete_int_pos_1_tuple, 1, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    const_str_plain_baseObject = UNSTREAM_STRING( &constant_bin[ 317219 ], 10, 1 );
    const_str_plain_derefAliases = UNSTREAM_STRING( &constant_bin[ 317229 ], 12, 1 );
    const_str_plain_MatchingRuleId = UNSTREAM_STRING( &constant_bin[ 52925 ], 14, 1 );
    const_str_digest_4ab320b4362846230595808a8892977d = UNSTREAM_STRING( &constant_bin[ 317241 ], 10, 0 );
    const_str_plain_Control = UNSTREAM_STRING( &constant_bin[ 52718 ], 7, 1 );
    const_tuple_str_plain_entryAlreadyExists_int_pos_68_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_entryAlreadyExists_int_pos_68_tuple, 0, const_str_plain_entryAlreadyExists ); Py_INCREF( const_str_plain_entryAlreadyExists );
    PyTuple_SET_ITEM( const_tuple_str_plain_entryAlreadyExists_int_pos_68_tuple, 1, const_int_pos_68 ); Py_INCREF( const_int_pos_68 );
    const_tuple_str_plain_notAllowedOnNonLeaf_int_pos_66_tuple = PyTuple_New( 2 );
    const_str_plain_notAllowedOnNonLeaf = UNSTREAM_STRING( &constant_bin[ 317251 ], 19, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_notAllowedOnNonLeaf_int_pos_66_tuple, 0, const_str_plain_notAllowedOnNonLeaf ); Py_INCREF( const_str_plain_notAllowedOnNonLeaf );
    const_int_pos_66 = PyLong_FromUnsignedLong( 66ul );
    PyTuple_SET_ITEM( const_tuple_str_plain_notAllowedOnNonLeaf_int_pos_66_tuple, 1, const_int_pos_66 ); Py_INCREF( const_int_pos_66 );
    const_str_plain_ExtendedResponse = UNSTREAM_STRING( &constant_bin[ 54101 ], 16, 1 );
    const_str_plain_mechanism = UNSTREAM_STRING( &constant_bin[ 317270 ], 9, 1 );
    const_str_plain_delRequest = UNSTREAM_STRING( &constant_bin[ 317279 ], 10, 1 );
    const_tuple_str_digest_c62754620912974b073e7a838e355782_int_pos_82_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_digest_c62754620912974b073e7a838e355782_int_pos_82_tuple, 0, const_str_digest_c62754620912974b073e7a838e355782 ); Py_INCREF( const_str_digest_c62754620912974b073e7a838e355782 );
    PyTuple_SET_ITEM( const_tuple_str_digest_c62754620912974b073e7a838e355782_int_pos_82_tuple, 1, const_int_pos_82 ); Py_INCREF( const_int_pos_82 );
    const_int_pos_49 = PyLong_FromUnsignedLong( 49ul );
    const_str_plain_SearchResultDone = UNSTREAM_STRING( &constant_bin[ 53598 ], 16, 1 );
    const_tuple_str_plain_invalidCredentials_int_pos_49_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_invalidCredentials_int_pos_49_tuple, 0, const_str_plain_invalidCredentials ); Py_INCREF( const_str_plain_invalidCredentials );
    PyTuple_SET_ITEM( const_tuple_str_plain_invalidCredentials_int_pos_49_tuple, 1, const_int_pos_49 ); Py_INCREF( const_int_pos_49 );
    const_tuple_str_plain_add_int_0_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_add_int_0_tuple, 0, const_str_plain_add ); Py_INCREF( const_str_plain_add );
    PyTuple_SET_ITEM( const_tuple_str_plain_add_int_0_tuple, 1, const_int_0 ); Py_INCREF( const_int_0 );
    const_str_plain_equalityMatch = UNSTREAM_STRING( &constant_bin[ 317289 ], 13, 1 );
    const_str_plain_BindRequest = UNSTREAM_STRING( &constant_bin[ 53422 ], 11, 1 );
    const_str_plain_requestName = UNSTREAM_STRING( &constant_bin[ 317302 ], 11, 1 );
    const_tuple_str_plain_loopDetect_int_pos_54_tuple = PyTuple_New( 2 );
    const_str_plain_loopDetect = UNSTREAM_STRING( &constant_bin[ 317313 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_loopDetect_int_pos_54_tuple, 0, const_str_plain_loopDetect ); Py_INCREF( const_str_plain_loopDetect );
    PyTuple_SET_ITEM( const_tuple_str_plain_loopDetect_int_pos_54_tuple, 1, const_int_pos_54 ); Py_INCREF( const_int_pos_54 );
    const_str_plain_controlValue = UNSTREAM_STRING( &constant_bin[ 317323 ], 12, 1 );
    const_str_plain_modDNResponse = UNSTREAM_STRING( &constant_bin[ 317335 ], 13, 1 );
    const_str_plain_searchResDone = UNSTREAM_STRING( &constant_bin[ 317348 ], 13, 1 );
    const_tuple_str_plain_notAllowedOnRDN_int_pos_67_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_notAllowedOnRDN_int_pos_67_tuple, 0, const_str_plain_notAllowedOnRDN ); Py_INCREF( const_str_plain_notAllowedOnRDN );
    PyTuple_SET_ITEM( const_tuple_str_plain_notAllowedOnRDN_int_pos_67_tuple, 1, const_int_pos_67 ); Py_INCREF( const_int_pos_67 );
    const_tuple_str_plain_singleLevel_int_pos_1_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_singleLevel_int_pos_1_tuple, 0, const_str_plain_singleLevel ); Py_INCREF( const_str_plain_singleLevel );
    PyTuple_SET_ITEM( const_tuple_str_plain_singleLevel_int_pos_1_tuple, 1, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    const_str_plain_AuthenticationChoice = UNSTREAM_STRING( &constant_bin[ 52841 ], 20, 1 );
    const_str_plain_attributeDesc = UNSTREAM_STRING( &constant_bin[ 317361 ], 13, 1 );
    const_tuple_str_plain_baseObject_int_0_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_baseObject_int_0_tuple, 0, const_str_plain_baseObject ); Py_INCREF( const_str_plain_baseObject );
    PyTuple_SET_ITEM( const_tuple_str_plain_baseObject_int_0_tuple, 1, const_int_0 ); Py_INCREF( const_int_0 );
    const_str_plain_LDAPResult = UNSTREAM_STRING( &constant_bin[ 52543 ], 10, 1 );
    const_str_digest_e30baf3a42d48aa38c91959217bd1135 = UNSTREAM_STRING( &constant_bin[ 317374 ], 22, 0 );
    const_str_plain_ModifyDNRequest = UNSTREAM_STRING( &constant_bin[ 53880 ], 15, 1 );
    const_str_plain_requestValue = UNSTREAM_STRING( &constant_bin[ 317396 ], 12, 1 );
    const_tuple_str_plain_insufficientAccessRights_int_pos_50_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_insufficientAccessRights_int_pos_50_tuple, 0, const_str_plain_insufficientAccessRights ); Py_INCREF( const_str_plain_insufficientAccessRights );
    const_int_pos_50 = PyLong_FromUnsignedLong( 50ul );
    PyTuple_SET_ITEM( const_tuple_str_plain_insufficientAccessRights_int_pos_50_tuple, 1, const_int_pos_50 ); Py_INCREF( const_int_pos_50 );
    const_str_plain_serverSaslCreds = UNSTREAM_STRING( &constant_bin[ 317408 ], 15, 1 );
    const_str_digest_94ef42bcdb99c0cee81fc3ee8ef2bafd = UNSTREAM_STRING( &constant_bin[ 317423 ], 11, 0 );
    const_tuple_str_plain_confidentialityRequired_int_pos_13_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_confidentialityRequired_int_pos_13_tuple, 0, const_str_plain_confidentialityRequired ); Py_INCREF( const_str_plain_confidentialityRequired );
    PyTuple_SET_ITEM( const_tuple_str_plain_confidentialityRequired_int_pos_13_tuple, 1, const_int_pos_13 ); Py_INCREF( const_int_pos_13 );
    const_str_digest_5be3009a60812e559c88a30ae87c9157 = UNSTREAM_STRING( &constant_bin[ 317434 ], 10, 0 );
    const_str_plain_Filter2 = UNSTREAM_STRING( &constant_bin[ 53115 ], 7, 1 );
    const_str_plain_AddResponse = UNSTREAM_STRING( &constant_bin[ 53782 ], 11, 1 );
    const_str_plain_AttributeDescription = UNSTREAM_STRING( &constant_bin[ 52575 ], 20, 1 );
    const_str_plain_simple = UNSTREAM_STRING( &constant_bin[ 183928 ], 6, 1 );
    const_str_plain_DelRequest = UNSTREAM_STRING( &constant_bin[ 53815 ], 10, 1 );
    const_str_plain_AttributeList = UNSTREAM_STRING( &constant_bin[ 52890 ], 13, 1 );
    const_tuple_str_digest_94ef42bcdb99c0cee81fc3ee8ef2bafd_int_pos_85_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_digest_94ef42bcdb99c0cee81fc3ee8ef2bafd_int_pos_85_tuple, 0, const_str_digest_94ef42bcdb99c0cee81fc3ee8ef2bafd ); Py_INCREF( const_str_digest_94ef42bcdb99c0cee81fc3ee8ef2bafd );
    const_int_pos_85 = PyLong_FromUnsignedLong( 85ul );
    PyTuple_SET_ITEM( const_tuple_str_digest_94ef42bcdb99c0cee81fc3ee8ef2bafd_int_pos_85_tuple, 1, const_int_pos_85 ); Py_INCREF( const_int_pos_85 );
    const_str_plain_approxMatch = UNSTREAM_STRING( &constant_bin[ 317444 ], 11, 1 );
    const_str_plain_or = UNSTREAM_STRING( &constant_bin[ 36 ], 2, 1 );
    const_str_plain_AssertionValue = UNSTREAM_STRING( &constant_bin[ 52617 ], 14, 1 );
    const_str_plain_derefAlways = UNSTREAM_STRING( &constant_bin[ 317455 ], 11, 1 );
    const_str_plain_BindResponse = UNSTREAM_STRING( &constant_bin[ 53455 ], 12, 1 );
    const_str_plain_initial = UNSTREAM_STRING( &constant_bin[ 7835 ], 7, 1 );
    const_str_plain_compareRequest = UNSTREAM_STRING( &constant_bin[ 317466 ], 14, 1 );
    const_tuple_str_plain_derefAlways_int_pos_3_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_derefAlways_int_pos_3_tuple, 0, const_str_plain_derefAlways ); Py_INCREF( const_str_plain_derefAlways );
    PyTuple_SET_ITEM( const_tuple_str_plain_derefAlways_int_pos_3_tuple, 1, const_int_pos_3 ); Py_INCREF( const_int_pos_3 );
    const_str_plain_UnbindRequest = UNSTREAM_STRING( &constant_bin[ 53489 ], 13, 1 );
    const_tuple_str_plain_aliasDereferencingProblem_int_pos_36_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_aliasDereferencingProblem_int_pos_36_tuple, 0, const_str_plain_aliasDereferencingProblem ); Py_INCREF( const_str_plain_aliasDereferencingProblem );
    PyTuple_SET_ITEM( const_tuple_str_plain_aliasDereferencingProblem_int_pos_36_tuple, 1, const_int_pos_36 ); Py_INCREF( const_int_pos_36 );
    const_int_pos_86 = PyLong_FromUnsignedLong( 86ul );
    const_tuple_str_plain_unwillingToPerform_int_pos_53_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_unwillingToPerform_int_pos_53_tuple, 0, const_str_plain_unwillingToPerform ); Py_INCREF( const_str_plain_unwillingToPerform );
    PyTuple_SET_ITEM( const_tuple_str_plain_unwillingToPerform_int_pos_53_tuple, 1, const_int_pos_53 ); Py_INCREF( const_int_pos_53 );
    const_str_plain_delResponse = UNSTREAM_STRING( &constant_bin[ 317480 ], 11, 1 );
    const_tuple_str_digest_4902b3b8002754e9aa8d9efc06afe33c_int_pos_86_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_digest_4902b3b8002754e9aa8d9efc06afe33c_int_pos_86_tuple, 0, const_str_digest_4902b3b8002754e9aa8d9efc06afe33c ); Py_INCREF( const_str_digest_4902b3b8002754e9aa8d9efc06afe33c );
    PyTuple_SET_ITEM( const_tuple_str_digest_4902b3b8002754e9aa8d9efc06afe33c_int_pos_86_tuple, 1, const_int_pos_86 ); Py_INCREF( const_int_pos_86 );
    const_str_plain_extendedResp = UNSTREAM_STRING( &constant_bin[ 317491 ], 12, 1 );

    constants_created = true;
}

#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_pyasn1_modules$rfc2251( void )
{
    // The module may not have been used at all.
    if (constants_created == false) return;


}
#endif

// The module code objects.
static PyCodeObject *codeobj_4b370decf1b9c123d23dc8614dd2c245;
static PyCodeObject *codeobj_767099aea699b034785d5ae02bdc6bf7;
static PyCodeObject *codeobj_205923a8856722e973ba85c99a78bf15;
static PyCodeObject *codeobj_17aaf7078125e0e23f715d88dce92f72;
static PyCodeObject *codeobj_0ff4c53127c0c8277da229d44fbc7d67;
static PyCodeObject *codeobj_82942d0809b2fd3ee97888daf00f88b6;
static PyCodeObject *codeobj_b42d8b22f16b49ae0e4ab8164adefd60;
static PyCodeObject *codeobj_c7c020e7ba85ac482e813933fa4055cb;
static PyCodeObject *codeobj_7965d177925b6db78ac6ce5aa18fe114;
static PyCodeObject *codeobj_360ca0fddace67c9c014fe79b07f72d9;
static PyCodeObject *codeobj_7ab1e00a32c35979a51b27c9e6de58db;
static PyCodeObject *codeobj_b7b66113ea3a2a989838da0f416ccaa7;
static PyCodeObject *codeobj_44248db67ed4a55521fb94f679f329ec;
static PyCodeObject *codeobj_b0ac539a8aef94dbc9e8b588473c3025;
static PyCodeObject *codeobj_ce824f6a9f6cfecb2dbb68e1a410ee88;
static PyCodeObject *codeobj_eba51d586277c350f335171b371e458b;
static PyCodeObject *codeobj_bb67dd1960f3bef6bfe9eca371e279f0;
static PyCodeObject *codeobj_b9cd1b9aeb9c66cd50d04d261b0cca8f;
static PyCodeObject *codeobj_5fa2e0b09e584254a5247313d767b7e8;
static PyCodeObject *codeobj_f0769f38cbd9500ffde47811fc29640c;
static PyCodeObject *codeobj_08ba46efb96ae52858a8aa41f9fffca3;
static PyCodeObject *codeobj_6b5c0255269a67400035a7c6dd4e74c6;
static PyCodeObject *codeobj_e7c833233274c9eee1aaa211089a1f8e;
static PyCodeObject *codeobj_54ba82b6adef30254995f738da61b708;
static PyCodeObject *codeobj_95ff97d41f7149a0005d1441a7241b4b;
static PyCodeObject *codeobj_ddb6cda0d2f59c4dc1bd961b622d2557;
static PyCodeObject *codeobj_636a5a14e7b65066b8237f19b12d0fed;
static PyCodeObject *codeobj_5b83b09e9d39beebdd313d0e4804111d;
static PyCodeObject *codeobj_1f5d22a2498067def2f384cc0318bc6b;
static PyCodeObject *codeobj_f7ceda2ab7c77efb1c6b2699943b7cdc;
static PyCodeObject *codeobj_d498a00102badb68050ea419a3ca4f01;
static PyCodeObject *codeobj_ef645f74bf5561d8c6d33192b2e40e6e;
static PyCodeObject *codeobj_ac4f236064e3d7be68a55cecd3073479;
static PyCodeObject *codeobj_ae47938dc0e08d6e637f809497487beb;
static PyCodeObject *codeobj_38dc2553afed3fd291770f6dc04378e4;
static PyCodeObject *codeobj_4ea12dcf825c9573d705982199d097d3;
static PyCodeObject *codeobj_8987c184f1b88c81d54777ff9b8aa6ce;
static PyCodeObject *codeobj_1b6bdf1ae56c8d6a6a3684845c518346;
static PyCodeObject *codeobj_294d6b59b5d966299571bb0f2af8586c;
static PyCodeObject *codeobj_c935d0f03df1c2ef037118536ace7a98;

static void createModuleCodeObjects(void)
{
    module_filename_obj = MAKE_RELATIVE_PATH( const_str_digest_6a2f0605d1e2f8992d30eea76449f137 );
    codeobj_4b370decf1b9c123d23dc8614dd2c245 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_AbandonRequest, 281, const_tuple_4db60887bb06fca3d042834bd18be106_tuple, 0, 0, CO_NOFREE );
    codeobj_767099aea699b034785d5ae02bdc6bf7 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_AddRequest, 226, const_tuple_355170992572810f6423c13272b77164_tuple, 0, 0, CO_NOFREE );
    codeobj_205923a8856722e973ba85c99a78bf15 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_AddResponse, 235, const_tuple_4db60887bb06fca3d042834bd18be106_tuple, 0, 0, CO_NOFREE );
    codeobj_17aaf7078125e0e23f715d88dce92f72 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_Attribute, 36, const_tuple_529a73ff47a37941b922169536cbd288_tuple, 0, 0, CO_NOFREE );
    codeobj_0ff4c53127c0c8277da229d44fbc7d67 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_AttributeDescriptionList, 23, const_tuple_529a73ff47a37941b922169536cbd288_tuple, 0, 0, CO_NOFREE );
    codeobj_82942d0809b2fd3ee97888daf00f88b6 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_AttributeList, 223, const_tuple_529a73ff47a37941b922169536cbd288_tuple, 0, 0, CO_NOFREE );
    codeobj_b42d8b22f16b49ae0e4ab8164adefd60 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_AttributeTypeAndValues, 203, const_tuple_529a73ff47a37941b922169536cbd288_tuple, 0, 0, CO_NOFREE );
    codeobj_c7c020e7ba85ac482e813933fa4055cb = MAKE_CODEOBJ( module_filename_obj, const_str_plain_AttributeValueAssertion, 30, const_tuple_529a73ff47a37941b922169536cbd288_tuple, 0, 0, CO_NOFREE );
    codeobj_7965d177925b6db78ac6ce5aa18fe114 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_AuthenticationChoice, 65, const_tuple_529a73ff47a37941b922169536cbd288_tuple, 0, 0, CO_NOFREE );
    codeobj_360ca0fddace67c9c014fe79b07f72d9 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_BindRequest, 73, const_tuple_355170992572810f6423c13272b77164_tuple, 0, 0, CO_NOFREE );
    codeobj_7ab1e00a32c35979a51b27c9e6de58db = MAKE_CODEOBJ( module_filename_obj, const_str_plain_BindResponse, 172, const_tuple_355170992572810f6423c13272b77164_tuple, 0, 0, CO_NOFREE );
    codeobj_b7b66113ea3a2a989838da0f416ccaa7 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_CompareRequest, 267, const_tuple_355170992572810f6423c13272b77164_tuple, 0, 0, CO_NOFREE );
    codeobj_44248db67ed4a55521fb94f679f329ec = MAKE_CODEOBJ( module_filename_obj, const_str_plain_CompareResponse, 276, const_tuple_4db60887bb06fca3d042834bd18be106_tuple, 0, 0, CO_NOFREE );
    codeobj_b0ac539a8aef94dbc9e8b588473c3025 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_Control, 44, const_tuple_529a73ff47a37941b922169536cbd288_tuple, 0, 0, CO_NOFREE );
    codeobj_ce824f6a9f6cfecb2dbb68e1a410ee88 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_Controls, 51, const_tuple_529a73ff47a37941b922169536cbd288_tuple, 0, 0, CO_NOFREE );
    codeobj_eba51d586277c350f335171b371e458b = MAKE_CODEOBJ( module_filename_obj, const_str_plain_DelRequest, 240, const_tuple_4db60887bb06fca3d042834bd18be106_tuple, 0, 0, CO_NOFREE );
    codeobj_bb67dd1960f3bef6bfe9eca371e279f0 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_DelResponse, 245, const_tuple_4db60887bb06fca3d042834bd18be106_tuple, 0, 0, CO_NOFREE );
    codeobj_b9cd1b9aeb9c66cd50d04d261b0cca8f = MAKE_CODEOBJ( module_filename_obj, const_str_plain_ExtendedRequest, 286, const_tuple_355170992572810f6423c13272b77164_tuple, 0, 0, CO_NOFREE );
    codeobj_5fa2e0b09e584254a5247313d767b7e8 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_ExtendedResponse, 295, const_tuple_355170992572810f6423c13272b77164_tuple, 0, 0, CO_NOFREE );
    codeobj_f0769f38cbd9500ffde47811fc29640c = MAKE_CODEOBJ( module_filename_obj, const_str_plain_Filter, 136, const_tuple_529a73ff47a37941b922169536cbd288_tuple, 0, 0, CO_NOFREE );
    codeobj_08ba46efb96ae52858a8aa41f9fffca3 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_Filter2, 122, const_tuple_529a73ff47a37941b922169536cbd288_tuple, 0, 0, CO_NOFREE );
    codeobj_6b5c0255269a67400035a7c6dd4e74c6 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_Filter3, 111, const_tuple_529a73ff47a37941b922169536cbd288_tuple, 0, 0, CO_NOFREE );
    codeobj_e7c833233274c9eee1aaa211089a1f8e = MAKE_CODEOBJ( module_filename_obj, const_str_plain_LDAPMessage, 314, const_tuple_529a73ff47a37941b922169536cbd288_tuple, 0, 0, CO_NOFREE );
    codeobj_54ba82b6adef30254995f738da61b708 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_LDAPResult, 184, const_tuple_529a73ff47a37941b922169536cbd288_tuple, 0, 0, CO_NOFREE );
    codeobj_95ff97d41f7149a0005d1441a7241b4b = MAKE_CODEOBJ( module_filename_obj, const_str_plain_MatchingRuleAssertion, 95, const_tuple_529a73ff47a37941b922169536cbd288_tuple, 0, 0, CO_NOFREE );
    codeobj_ddb6cda0d2f59c4dc1bd961b622d2557 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_MessageID, 309, const_tuple_60e1d1aca2af647f8d112487c165344b_tuple, 0, 0, CO_NOFREE );
    codeobj_636a5a14e7b65066b8237f19b12d0fed = MAKE_CODEOBJ( module_filename_obj, const_str_plain_ModifyDNRequest, 250, const_tuple_355170992572810f6423c13272b77164_tuple, 0, 0, CO_NOFREE );
    codeobj_5b83b09e9d39beebdd313d0e4804111d = MAKE_CODEOBJ( module_filename_obj, const_str_plain_ModifyDNResponse, 262, const_tuple_4db60887bb06fca3d042834bd18be106_tuple, 0, 0, CO_NOFREE );
    codeobj_1f5d22a2498067def2f384cc0318bc6b = MAKE_CODEOBJ( module_filename_obj, const_str_plain_ModifyRequest, 209, const_tuple_355170992572810f6423c13272b77164_tuple, 0, 0, CO_NOFREE );
    codeobj_f7ceda2ab7c77efb1c6b2699943b7cdc = MAKE_CODEOBJ( module_filename_obj, const_str_plain_ModifyResponse, 218, const_tuple_4db60887bb06fca3d042834bd18be106_tuple, 0, 0, CO_NOFREE );
    codeobj_d498a00102badb68050ea419a3ca4f01 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_PartialAttributeList, 83, const_tuple_529a73ff47a37941b922169536cbd288_tuple, 0, 0, CO_NOFREE );
    codeobj_ef645f74bf5561d8c6d33192b2e40e6e = MAKE_CODEOBJ( module_filename_obj, const_str_plain_Referral, 56, const_tuple_529a73ff47a37941b922169536cbd288_tuple, 0, 0, CO_NOFREE );
    codeobj_ac4f236064e3d7be68a55cecd3073479 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_SaslCredentials, 59, const_tuple_529a73ff47a37941b922169536cbd288_tuple, 0, 0, CO_NOFREE );
    codeobj_ae47938dc0e08d6e637f809497487beb = MAKE_CODEOBJ( module_filename_obj, const_str_plain_SearchRequest, 152, const_tuple_355170992572810f6423c13272b77164_tuple, 0, 0, CO_NOFREE );
    codeobj_38dc2553afed3fd291770f6dc04378e4 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_SearchResultDone, 198, const_tuple_4db60887bb06fca3d042834bd18be106_tuple, 0, 0, CO_NOFREE );
    codeobj_4ea12dcf825c9573d705982199d097d3 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_SearchResultEntry, 86, const_tuple_355170992572810f6423c13272b77164_tuple, 0, 0, CO_NOFREE );
    codeobj_8987c184f1b88c81d54777ff9b8aa6ce = MAKE_CODEOBJ( module_filename_obj, const_str_plain_SearchResultReference, 192, const_tuple_355170992572810f6423c13272b77164_tuple, 0, 0, CO_NOFREE );
    codeobj_1b6bdf1ae56c8d6a6a3684845c518346 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_SubstringFilter, 103, const_tuple_529a73ff47a37941b922169536cbd288_tuple, 0, 0, CO_NOFREE );
    codeobj_294d6b59b5d966299571bb0f2af8586c = MAKE_CODEOBJ( module_filename_obj, const_str_plain_UnbindRequest, 167, const_tuple_4db60887bb06fca3d042834bd18be106_tuple, 0, 0, CO_NOFREE );
    codeobj_c935d0f03df1c2ef037118536ace7a98 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_rfc2251, 0, const_tuple_empty, 0, 0, CO_NOFREE );
}

// The module function declarations.
NUITKA_LOCAL_MODULE PyObject *impl_class_1_LDAPString_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_1__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_1__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_1__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_1__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_2_LDAPOID_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_2__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_2__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_2__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_2__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_3_LDAPDN_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_3__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_3__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_3__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_3__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_4_RelativeLDAPDN_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_4__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_4__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_4__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_4__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_5_AttributeType_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_5__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_5__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_5__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_5__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_6_AttributeDescription_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_6__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_6__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_6__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_6__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_7_AttributeDescriptionList_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_7__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_7__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_7__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_7__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_8_AttributeValue_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_8__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_8__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_8__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_8__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_9_AssertionValue_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_9__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_9__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_9__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_9__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_10_AttributeValueAssertion_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_10__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_10__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_10__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_10__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_11_Attribute_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_11__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_11__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_11__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_11__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_12_MatchingRuleId_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_12__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_12__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_12__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_12__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_13_Control_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_13__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_13__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_13__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_13__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_14_Controls_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_14__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_14__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_14__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_14__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_15_LDAPURL_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_15__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_15__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_15__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_15__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_16_Referral_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_16__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_16__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_16__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_16__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_17_SaslCredentials_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_17__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_17__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_17__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_17__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_18_AuthenticationChoice_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_18__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_18__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_18__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_18__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_19_BindRequest_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_19__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_19__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_19__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_19__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_20_PartialAttributeList_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_20__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_20__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_20__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_20__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_21_SearchResultEntry_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_21__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_21__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_21__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_21__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_22_MatchingRuleAssertion_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_22__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_22__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_22__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_22__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_23_SubstringFilter_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_23__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_23__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_23__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_23__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_24_Filter3_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_24__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_24__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_24__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_24__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_25_Filter2_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_25__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_25__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_25__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_25__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_26_Filter_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_26__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_26__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_26__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_26__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_27_SearchRequest_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_27__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_27__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_27__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_27__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_28_UnbindRequest_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_28__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_28__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_28__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_28__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_29_BindResponse_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_29__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_29__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_29__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_29__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_30_LDAPResult_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_30__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_30__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_30__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_30__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_31_SearchResultReference_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_31__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_31__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_31__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_31__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_32_SearchResultDone_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_32__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_32__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_32__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_32__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_33_AttributeTypeAndValues_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_33__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_33__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_33__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_33__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_34_ModifyRequest_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_34__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_34__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_34__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_34__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_35_ModifyResponse_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_35__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_35__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_35__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_35__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_36_AttributeList_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_36__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_36__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_36__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_36__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_37_AddRequest_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_37__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_37__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_37__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_37__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_38_AddResponse_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_38__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_38__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_38__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_38__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_39_DelRequest_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_39__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_39__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_39__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_39__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_40_DelResponse_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_40__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_40__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_40__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_40__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_41_ModifyDNRequest_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_41__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_41__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_41__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_41__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_42_ModifyDNResponse_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_42__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_42__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_42__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_42__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_43_CompareRequest_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_43__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_43__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_43__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_43__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_44_CompareResponse_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_44__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_44__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_44__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_44__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_45_AbandonRequest_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_45__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_45__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_45__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_45__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_46_ExtendedRequest_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_46__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_46__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_46__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_46__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_47_ExtendedResponse_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_47__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_47__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_47__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_47__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_48_MessageID_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_48__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_48__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_48__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_48__prepared );


NUITKA_LOCAL_MODULE PyObject *impl_class_49_LDAPMessage_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_49__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_49__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_49__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_49__prepared );


// The module function definitions.
NUITKA_LOCAL_MODULE PyObject *impl_class_1_LDAPString_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_1__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_1__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_1__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_1__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_tuple_element_1;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_1__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_LDAPString;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    tmp_called_name_1 = closure_pyasn1_modules$rfc2251_class_creation_1__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_LDAPString;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_1__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_1__class_decl_dict;

    tmp_assign_source_3 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_3;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_1_LDAPString_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_1_LDAPString_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_2_LDAPOID_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_2__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_2__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_2__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_2__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_tuple_element_1;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_2__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_LDAPOID;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    tmp_called_name_1 = closure_pyasn1_modules$rfc2251_class_creation_2__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_LDAPOID;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_2__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_2__class_decl_dict;

    tmp_assign_source_3 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_3;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_2_LDAPOID_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_2_LDAPOID_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_3_LDAPDN_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_3__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_3__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_3__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_3__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_tuple_element_1;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_3__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_LDAPDN;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    tmp_called_name_1 = closure_pyasn1_modules$rfc2251_class_creation_3__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_LDAPDN;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_3__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_3__class_decl_dict;

    tmp_assign_source_3 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_3;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_3_LDAPDN_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_3_LDAPDN_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_4_RelativeLDAPDN_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_4__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_4__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_4__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_4__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_tuple_element_1;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_4__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_RelativeLDAPDN;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    tmp_called_name_1 = closure_pyasn1_modules$rfc2251_class_creation_4__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_RelativeLDAPDN;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_4__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_4__class_decl_dict;

    tmp_assign_source_3 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_3;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_4_RelativeLDAPDN_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_4_RelativeLDAPDN_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_5_AttributeType_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_5__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_5__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_5__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_5__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_tuple_element_1;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_5__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_AttributeType;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    tmp_called_name_1 = closure_pyasn1_modules$rfc2251_class_creation_5__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_AttributeType;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_5__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_5__class_decl_dict;

    tmp_assign_source_3 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_3;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_5_AttributeType_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_5_AttributeType_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_6_AttributeDescription_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_6__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_6__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_6__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_6__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_tuple_element_1;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_6__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_AttributeDescription;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    tmp_called_name_1 = closure_pyasn1_modules$rfc2251_class_creation_6__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_AttributeDescription;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_6__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_6__class_decl_dict;

    tmp_assign_source_3 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_3;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_6_AttributeDescription_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_6_AttributeDescription_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_7_AttributeDescriptionList_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_7__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_7__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_7__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_7__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_componentType = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_7__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_AttributeDescriptionList;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_0ff4c53127c0c8277da229d44fbc7d67, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_name_1 = PyDict_GetItem( locals_dict, const_str_plain_AttributeDescription );

    if ( tmp_called_name_1 == NULL )
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeDescription );

        if (unlikely( tmp_called_name_1 == NULL ))
        {
            tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeDescription );
        }

        if ( tmp_called_name_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52569 ], 42, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 24;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 24;
    tmp_assign_source_3 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 24;
        goto frame_exception_exit_1;
    }
    assert( var_componentType == NULL );
    var_componentType = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 23;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 23;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 23;
                goto frame_exception_exit_1;
            }
            }
            if ( var_componentType != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_componentType,
                    var_componentType
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 23;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_2 = closure_pyasn1_modules$rfc2251_class_creation_7__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_AttributeDescriptionList;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_7__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_componentType != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_componentType,
            var_componentType
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_7__class_decl_dict;

    tmp_assign_source_4 = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_4;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_7_AttributeDescriptionList_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_7_AttributeDescriptionList_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_8_AttributeValue_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_8__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_8__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_8__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_8__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_tuple_element_1;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_8__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_AttributeValue;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    tmp_called_name_1 = closure_pyasn1_modules$rfc2251_class_creation_8__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_AttributeValue;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_8__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_8__class_decl_dict;

    tmp_assign_source_3 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_3;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_8_AttributeValue_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_8_AttributeValue_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_9_AssertionValue_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_9__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_9__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_9__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_9__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_tuple_element_1;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_9__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_AssertionValue;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    tmp_called_name_1 = closure_pyasn1_modules$rfc2251_class_creation_9__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_AssertionValue;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_9__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_9__class_decl_dict;

    tmp_assign_source_3 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_3;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_9_AssertionValue_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_9_AssertionValue_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_10_AttributeValueAssertion_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_10__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_10__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_10__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_10__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_componentType = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_10__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_AttributeValueAssertion;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_c7c020e7ba85ac482e813933fa4055cb, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_1 == NULL )
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_1 == NULL ))
        {
            tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 31;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_NamedTypes );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 31;
        goto frame_exception_exit_1;
    }
    tmp_source_name_2 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_2 == NULL )
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_2 == NULL ))
        {
            tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_2 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 32;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_NamedType );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 32;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = const_str_plain_attributeDesc;
    tmp_called_name_3 = PyDict_GetItem( locals_dict, const_str_plain_AttributeDescription );

    if ( tmp_called_name_3 == NULL )
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeDescription );

        if (unlikely( tmp_called_name_3 == NULL ))
        {
            tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeDescription );
        }

        if ( tmp_called_name_3 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52569 ], 42, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 32;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 32;
    tmp_args_element_name_3 = CALL_FUNCTION_NO_ARGS( tmp_called_name_3 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 32;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 32;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 32;
        goto frame_exception_exit_1;
    }
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_3 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 33;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_NamedType );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 33;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_5 = const_str_plain_assertionValue;
    tmp_called_name_5 = PyDict_GetItem( locals_dict, const_str_plain_AssertionValue );

    if ( tmp_called_name_5 == NULL )
    {
        tmp_called_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AssertionValue );

        if (unlikely( tmp_called_name_5 == NULL ))
        {
            tmp_called_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AssertionValue );
        }

        if ( tmp_called_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52611 ], 36, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 33;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 33;
    tmp_args_element_name_6 = CALL_FUNCTION_NO_ARGS( tmp_called_name_5 );
    if ( tmp_args_element_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 33;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 33;
    tmp_args_element_name_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, tmp_args_element_name_5, tmp_args_element_name_6 );
    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_args_element_name_6 );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 33;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 33;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, tmp_args_element_name_1, tmp_args_element_name_4 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 33;
        goto frame_exception_exit_1;
    }
    assert( var_componentType == NULL );
    var_componentType = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 30;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 30;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 30;
                goto frame_exception_exit_1;
            }
            }
            if ( var_componentType != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_componentType,
                    var_componentType
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 30;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_6 = closure_pyasn1_modules$rfc2251_class_creation_10__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_AttributeValueAssertion;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_10__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_componentType != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_componentType,
            var_componentType
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_10__class_decl_dict;

    tmp_assign_source_4 = CALL_FUNCTION( tmp_called_name_6, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_4;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_10_AttributeValueAssertion_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_10_AttributeValueAssertion_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_11_Attribute_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_11__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_11__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_11__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_11__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_componentType = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_11__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_Attribute;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_17aaf7078125e0e23f715d88dce92f72, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_1 == NULL )
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_1 == NULL ))
        {
            tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 37;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_NamedTypes );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 37;
        goto frame_exception_exit_1;
    }
    tmp_source_name_2 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_2 == NULL )
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_2 == NULL ))
        {
            tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_2 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 38;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_NamedType );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 38;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = const_str_plain_type;
    tmp_called_name_3 = PyDict_GetItem( locals_dict, const_str_plain_AttributeDescription );

    if ( tmp_called_name_3 == NULL )
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeDescription );

        if (unlikely( tmp_called_name_3 == NULL ))
        {
            tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeDescription );
        }

        if ( tmp_called_name_3 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52569 ], 42, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 38;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 38;
    tmp_args_element_name_3 = CALL_FUNCTION_NO_ARGS( tmp_called_name_3 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 38;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 38;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 38;
        goto frame_exception_exit_1;
    }
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_3 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 39;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_NamedType );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 39;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_5 = const_str_plain_vals;
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 39;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_SetOf );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 39;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_called_name_6 = PyDict_GetItem( locals_dict, const_str_plain_AttributeValue );

    if ( tmp_called_name_6 == NULL )
    {
        tmp_called_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeValue );

        if (unlikely( tmp_called_name_6 == NULL ))
        {
            tmp_called_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeValue );
        }

        if ( tmp_called_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52647 ], 36, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 39;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 39;
    tmp_dict_value_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_6 );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 39;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_1 = const_str_plain_componentType;
    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    frame_function->f_lineno = 39;
    tmp_args_element_name_6 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_5, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_5 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_args_element_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 39;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 39;
    tmp_args_element_name_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, tmp_args_element_name_5, tmp_args_element_name_6 );
    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_args_element_name_6 );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 39;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 39;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, tmp_args_element_name_1, tmp_args_element_name_4 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 39;
        goto frame_exception_exit_1;
    }
    assert( var_componentType == NULL );
    var_componentType = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 36;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 36;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 36;
                goto frame_exception_exit_1;
            }
            }
            if ( var_componentType != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_componentType,
                    var_componentType
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 36;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_7 = closure_pyasn1_modules$rfc2251_class_creation_11__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_Attribute;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_11__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_componentType != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_componentType,
            var_componentType
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_2 = closure_pyasn1_modules$rfc2251_class_creation_11__class_decl_dict;

    tmp_assign_source_4 = CALL_FUNCTION( tmp_called_name_7, tmp_args_name_1, tmp_kw_name_2 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_4;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_11_Attribute_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_11_Attribute_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_12_MatchingRuleId_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_12__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_12__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_12__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_12__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_tuple_element_1;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_12__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_MatchingRuleId;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    tmp_called_name_1 = closure_pyasn1_modules$rfc2251_class_creation_12__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_MatchingRuleId;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_12__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_12__class_decl_dict;

    tmp_assign_source_3 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_3;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_12_MatchingRuleId_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_12_MatchingRuleId_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_13_Control_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_13__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_13__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_13__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_13__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_componentType = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_13__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_Control;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_b0ac539a8aef94dbc9e8b588473c3025, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_1 == NULL )
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_1 == NULL ))
        {
            tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 45;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_NamedTypes );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 45;
        goto frame_exception_exit_1;
    }
    tmp_source_name_2 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_2 == NULL )
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_2 == NULL ))
        {
            tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_2 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 46;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_NamedType );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 46;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = const_str_plain_controlType;
    tmp_called_name_3 = PyDict_GetItem( locals_dict, const_str_plain_LDAPOID );

    if ( tmp_called_name_3 == NULL )
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPOID );

        if (unlikely( tmp_called_name_3 == NULL ))
        {
            tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPOID );
        }

        if ( tmp_called_name_3 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52683 ], 29, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 46;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 46;
    tmp_args_element_name_3 = CALL_FUNCTION_NO_ARGS( tmp_called_name_3 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 46;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 46;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 46;
        goto frame_exception_exit_1;
    }
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_3 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 47;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_DefaultedNamedType );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 47;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_5 = const_str_plain_criticality;
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 47;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_Boolean );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 47;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = const_str_plain_False;
    frame_function->f_lineno = 47;
    tmp_args_element_name_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_name_5 );
    if ( tmp_args_element_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 47;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 47;
    tmp_args_element_name_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, tmp_args_element_name_5, tmp_args_element_name_6 );
    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_args_element_name_6 );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 47;
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 48;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_OptionalNamedType );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_4 );

        exception_lineno = 48;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_8 = const_str_plain_controlValue;
    tmp_source_name_6 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_6 == NULL )
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_6 == NULL ))
        {
            tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_4 );
            Py_DECREF( tmp_called_name_6 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 48;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_OctetString );
    if ( tmp_called_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_4 );
        Py_DECREF( tmp_called_name_6 );

        exception_lineno = 48;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 48;
    tmp_args_element_name_9 = CALL_FUNCTION_NO_ARGS( tmp_called_name_7 );
    Py_DECREF( tmp_called_name_7 );
    if ( tmp_args_element_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_4 );
        Py_DECREF( tmp_called_name_6 );

        exception_lineno = 48;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 48;
    tmp_args_element_name_7 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_6, tmp_args_element_name_8, tmp_args_element_name_9 );
    Py_DECREF( tmp_called_name_6 );
    Py_DECREF( tmp_args_element_name_9 );
    if ( tmp_args_element_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_4 );

        exception_lineno = 48;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 48;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, tmp_args_element_name_1, tmp_args_element_name_4, tmp_args_element_name_7 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    Py_DECREF( tmp_args_element_name_4 );
    Py_DECREF( tmp_args_element_name_7 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 48;
        goto frame_exception_exit_1;
    }
    assert( var_componentType == NULL );
    var_componentType = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 44;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 44;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 44;
                goto frame_exception_exit_1;
            }
            }
            if ( var_componentType != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_componentType,
                    var_componentType
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 44;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_8 = closure_pyasn1_modules$rfc2251_class_creation_13__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_Control;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_13__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_componentType != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_componentType,
            var_componentType
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_13__class_decl_dict;

    tmp_assign_source_4 = CALL_FUNCTION( tmp_called_name_8, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_4;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_13_Control_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_13_Control_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_14_Controls_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_14__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_14__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_14__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_14__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_componentType = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_14__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_Controls;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_ce824f6a9f6cfecb2dbb68e1a410ee88, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_name_1 = PyDict_GetItem( locals_dict, const_str_plain_Control );

    if ( tmp_called_name_1 == NULL )
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_Control );

        if (unlikely( tmp_called_name_1 == NULL ))
        {
            tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Control );
        }

        if ( tmp_called_name_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52712 ], 29, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 52;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 52;
    tmp_assign_source_3 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 52;
        goto frame_exception_exit_1;
    }
    assert( var_componentType == NULL );
    var_componentType = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 51;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 51;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 51;
                goto frame_exception_exit_1;
            }
            }
            if ( var_componentType != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_componentType,
                    var_componentType
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 51;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_2 = closure_pyasn1_modules$rfc2251_class_creation_14__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_Controls;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_14__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_componentType != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_componentType,
            var_componentType
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_14__class_decl_dict;

    tmp_assign_source_4 = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_4;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_14_Controls_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_14_Controls_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_15_LDAPURL_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_15__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_15__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_15__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_15__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_tuple_element_1;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_15__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_LDAPURL;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    tmp_called_name_1 = closure_pyasn1_modules$rfc2251_class_creation_15__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_LDAPURL;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_15__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_15__class_decl_dict;

    tmp_assign_source_3 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_3;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_15_LDAPURL_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_15_LDAPURL_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_16_Referral_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_16__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_16__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_16__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_16__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_componentType = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_16__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_Referral;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_ef645f74bf5561d8c6d33192b2e40e6e, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_name_1 = PyDict_GetItem( locals_dict, const_str_plain_LDAPURL );

    if ( tmp_called_name_1 == NULL )
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPURL );

        if (unlikely( tmp_called_name_1 == NULL ))
        {
            tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPURL );
        }

        if ( tmp_called_name_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52741 ], 29, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 57;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 57;
    tmp_assign_source_3 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 57;
        goto frame_exception_exit_1;
    }
    assert( var_componentType == NULL );
    var_componentType = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 56;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 56;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 56;
                goto frame_exception_exit_1;
            }
            }
            if ( var_componentType != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_componentType,
                    var_componentType
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 56;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_2 = closure_pyasn1_modules$rfc2251_class_creation_16__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_Referral;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_16__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_componentType != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_componentType,
            var_componentType
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_16__class_decl_dict;

    tmp_assign_source_4 = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_4;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_16_Referral_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_16_Referral_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_17_SaslCredentials_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_17__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_17__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_17__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_17__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_componentType = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_17__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_SaslCredentials;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_ac4f236064e3d7be68a55cecd3073479, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_1 == NULL )
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_1 == NULL ))
        {
            tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 60;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_NamedTypes );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 60;
        goto frame_exception_exit_1;
    }
    tmp_source_name_2 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_2 == NULL )
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_2 == NULL ))
        {
            tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_2 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 61;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_NamedType );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 61;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = const_str_plain_mechanism;
    tmp_called_name_3 = PyDict_GetItem( locals_dict, const_str_plain_LDAPString );

    if ( tmp_called_name_3 == NULL )
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPString );

        if (unlikely( tmp_called_name_3 == NULL ))
        {
            tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPString );
        }

        if ( tmp_called_name_3 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52505 ], 32, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 61;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 61;
    tmp_args_element_name_3 = CALL_FUNCTION_NO_ARGS( tmp_called_name_3 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 61;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 61;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 61;
        goto frame_exception_exit_1;
    }
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_3 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 62;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_OptionalNamedType );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 62;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_5 = const_str_plain_credentials;
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 62;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_OctetString );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 62;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 62;
    tmp_args_element_name_6 = CALL_FUNCTION_NO_ARGS( tmp_called_name_5 );
    Py_DECREF( tmp_called_name_5 );
    if ( tmp_args_element_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 62;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 62;
    tmp_args_element_name_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, tmp_args_element_name_5, tmp_args_element_name_6 );
    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_args_element_name_6 );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 62;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 62;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, tmp_args_element_name_1, tmp_args_element_name_4 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 62;
        goto frame_exception_exit_1;
    }
    assert( var_componentType == NULL );
    var_componentType = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 59;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 59;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 59;
                goto frame_exception_exit_1;
            }
            }
            if ( var_componentType != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_componentType,
                    var_componentType
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 59;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_6 = closure_pyasn1_modules$rfc2251_class_creation_17__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_SaslCredentials;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_17__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_componentType != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_componentType,
            var_componentType
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_17__class_decl_dict;

    tmp_assign_source_4 = CALL_FUNCTION( tmp_called_name_6, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_4;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_17_SaslCredentials_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_17_SaslCredentials_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_18_AuthenticationChoice_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_18__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_18__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_18__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_18__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_componentType = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_args_element_name_20;
    PyObject *tmp_args_element_name_21;
    PyObject *tmp_args_element_name_22;
    PyObject *tmp_args_element_name_23;
    PyObject *tmp_args_element_name_24;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_called_name_16;
    PyObject *tmp_called_name_17;
    PyObject *tmp_called_name_18;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    PyObject *tmp_kw_name_3;
    PyObject *tmp_kw_name_4;
    PyObject *tmp_kw_name_5;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_source_name_22;
    PyObject *tmp_source_name_23;
    PyObject *tmp_source_name_24;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_18__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_AuthenticationChoice;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_7965d177925b6db78ac6ce5aa18fe114, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_1 == NULL )
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_1 == NULL ))
        {
            tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 66;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_NamedTypes );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 66;
        goto frame_exception_exit_1;
    }
    tmp_source_name_2 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_2 == NULL )
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_2 == NULL ))
        {
            tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_2 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 67;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_NamedType );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 67;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = const_str_plain_simple;
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 67;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_OctetString );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 67;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 67;
    tmp_source_name_3 = CALL_FUNCTION_NO_ARGS( tmp_called_name_4 );
    Py_DECREF( tmp_called_name_4 );
    if ( tmp_source_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 67;
        goto frame_exception_exit_1;
    }
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_3 );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 67;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_kw_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 67;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_Tag );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 67;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_6 == NULL )
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_6 == NULL ))
        {
            tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_5 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 67;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_5 );

        exception_lineno = 67;
        goto frame_exception_exit_1;
    }
    tmp_source_name_7 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_7 == NULL )
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_7 == NULL ))
        {
            tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_7 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_args_element_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 67;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_tagFormatSimple );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_4 );

        exception_lineno = 67;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_6 = const_int_0;
    frame_function->f_lineno = 67;
    tmp_dict_value_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_5, tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6 );
    Py_DECREF( tmp_called_name_5 );
    Py_DECREF( tmp_args_element_name_4 );
    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 67;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_1 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    frame_function->f_lineno = 67;
    tmp_args_element_name_3 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_3, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 67;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 67;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 67;
        goto frame_exception_exit_1;
    }
    tmp_source_name_8 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_8 == NULL )
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_8 == NULL ))
        {
            tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_8 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 68;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_NamedType );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 68;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_8 = const_str_digest_5be3009a60812e559c88a30ae87c9157;
    tmp_source_name_10 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_10 == NULL )
    {
        tmp_source_name_10 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_10 == NULL ))
        {
            tmp_source_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_10 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_6 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 68;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_OctetString );
    if ( tmp_called_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_6 );

        exception_lineno = 68;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 68;
    tmp_source_name_9 = CALL_FUNCTION_NO_ARGS( tmp_called_name_8 );
    Py_DECREF( tmp_called_name_8 );
    if ( tmp_source_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_6 );

        exception_lineno = 68;
        goto frame_exception_exit_1;
    }
    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_9 );
    if ( tmp_called_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_6 );

        exception_lineno = 68;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_2 = _PyDict_NewPresized( 1 );
    tmp_source_name_11 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_11 == NULL )
    {
        tmp_source_name_11 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_11 == NULL ))
        {
            tmp_source_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_11 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_kw_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 68;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_Tag );
    if ( tmp_called_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_kw_name_2 );

        exception_lineno = 68;
        goto frame_exception_exit_1;
    }
    tmp_source_name_12 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_12 == NULL )
    {
        tmp_source_name_12 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_12 == NULL ))
        {
            tmp_source_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_12 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_9 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 68;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_9 );

        exception_lineno = 68;
        goto frame_exception_exit_1;
    }
    tmp_source_name_13 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_13 == NULL )
    {
        tmp_source_name_13 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_13 == NULL ))
        {
            tmp_source_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_13 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_9 );
            Py_DECREF( tmp_args_element_name_10 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 68;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_tagFormatSimple );
    if ( tmp_args_element_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_args_element_name_10 );

        exception_lineno = 68;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_12 = const_int_pos_1;
    frame_function->f_lineno = 68;
    tmp_dict_value_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_9, tmp_args_element_name_10, tmp_args_element_name_11, tmp_args_element_name_12 );
    Py_DECREF( tmp_called_name_9 );
    Py_DECREF( tmp_args_element_name_10 );
    Py_DECREF( tmp_args_element_name_11 );
    if ( tmp_dict_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_kw_name_2 );

        exception_lineno = 68;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_2 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
    Py_DECREF( tmp_dict_value_2 );
    frame_function->f_lineno = 68;
    tmp_args_element_name_9 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_7, tmp_kw_name_2 );
    Py_DECREF( tmp_called_name_7 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_args_element_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_6 );

        exception_lineno = 68;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 68;
    tmp_args_element_name_7 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_6, tmp_args_element_name_8, tmp_args_element_name_9 );
    Py_DECREF( tmp_called_name_6 );
    Py_DECREF( tmp_args_element_name_9 );
    if ( tmp_args_element_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 68;
        goto frame_exception_exit_1;
    }
    tmp_source_name_14 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_14 == NULL )
    {
        tmp_source_name_14 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_14 == NULL ))
        {
            tmp_source_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_14 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 69;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_NamedType );
    if ( tmp_called_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );

        exception_lineno = 69;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_14 = const_str_digest_4ab320b4362846230595808a8892977d;
    tmp_source_name_16 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_16 == NULL )
    {
        tmp_source_name_16 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_16 == NULL ))
        {
            tmp_source_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_16 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_called_name_10 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 69;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_OctetString );
    if ( tmp_called_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_10 );

        exception_lineno = 69;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 69;
    tmp_source_name_15 = CALL_FUNCTION_NO_ARGS( tmp_called_name_12 );
    Py_DECREF( tmp_called_name_12 );
    if ( tmp_source_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_10 );

        exception_lineno = 69;
        goto frame_exception_exit_1;
    }
    tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_15 );
    if ( tmp_called_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_10 );

        exception_lineno = 69;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_3 = _PyDict_NewPresized( 1 );
    tmp_source_name_17 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_17 == NULL )
    {
        tmp_source_name_17 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_17 == NULL ))
        {
            tmp_source_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_17 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_called_name_10 );
            Py_DECREF( tmp_called_name_11 );
            Py_DECREF( tmp_kw_name_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 69;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_Tag );
    if ( tmp_called_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_kw_name_3 );

        exception_lineno = 69;
        goto frame_exception_exit_1;
    }
    tmp_source_name_18 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_18 == NULL )
    {
        tmp_source_name_18 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_18 == NULL ))
        {
            tmp_source_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_18 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_called_name_10 );
            Py_DECREF( tmp_called_name_11 );
            Py_DECREF( tmp_kw_name_3 );
            Py_DECREF( tmp_called_name_13 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 69;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_16 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_kw_name_3 );
        Py_DECREF( tmp_called_name_13 );

        exception_lineno = 69;
        goto frame_exception_exit_1;
    }
    tmp_source_name_19 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_19 == NULL )
    {
        tmp_source_name_19 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_19 == NULL ))
        {
            tmp_source_name_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_19 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_called_name_10 );
            Py_DECREF( tmp_called_name_11 );
            Py_DECREF( tmp_kw_name_3 );
            Py_DECREF( tmp_called_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 69;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_tagFormatSimple );
    if ( tmp_args_element_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_kw_name_3 );
        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_args_element_name_16 );

        exception_lineno = 69;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_18 = const_int_pos_2;
    frame_function->f_lineno = 69;
    tmp_dict_value_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_13, tmp_args_element_name_16, tmp_args_element_name_17, tmp_args_element_name_18 );
    Py_DECREF( tmp_called_name_13 );
    Py_DECREF( tmp_args_element_name_16 );
    Py_DECREF( tmp_args_element_name_17 );
    if ( tmp_dict_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_kw_name_3 );

        exception_lineno = 69;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_3 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_3, tmp_dict_value_3 );
    Py_DECREF( tmp_dict_value_3 );
    frame_function->f_lineno = 69;
    tmp_args_element_name_15 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_11, tmp_kw_name_3 );
    Py_DECREF( tmp_called_name_11 );
    Py_DECREF( tmp_kw_name_3 );
    if ( tmp_args_element_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_10 );

        exception_lineno = 69;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 69;
    tmp_args_element_name_13 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_10, tmp_args_element_name_14, tmp_args_element_name_15 );
    Py_DECREF( tmp_called_name_10 );
    Py_DECREF( tmp_args_element_name_15 );
    if ( tmp_args_element_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );

        exception_lineno = 69;
        goto frame_exception_exit_1;
    }
    tmp_source_name_20 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_20 == NULL )
    {
        tmp_source_name_20 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_20 == NULL ))
        {
            tmp_source_name_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_20 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 70;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_NamedType );
    if ( tmp_called_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );

        exception_lineno = 70;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_20 = const_str_plain_sasl;
    tmp_called_name_16 = PyDict_GetItem( locals_dict, const_str_plain_SaslCredentials );

    if ( tmp_called_name_16 == NULL )
    {
        tmp_called_name_16 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_SaslCredentials );

        if (unlikely( tmp_called_name_16 == NULL ))
        {
            tmp_called_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SaslCredentials );
        }

        if ( tmp_called_name_16 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_called_name_14 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52770 ], 37, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 70;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 70;
    tmp_source_name_21 = CALL_FUNCTION_NO_ARGS( tmp_called_name_16 );
    if ( tmp_source_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_14 );

        exception_lineno = 70;
        goto frame_exception_exit_1;
    }
    tmp_called_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_21 );
    if ( tmp_called_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_14 );

        exception_lineno = 70;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_4 = _PyDict_NewPresized( 1 );
    tmp_source_name_22 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_22 == NULL )
    {
        tmp_source_name_22 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_22 == NULL ))
        {
            tmp_source_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_22 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_called_name_14 );
            Py_DECREF( tmp_called_name_15 );
            Py_DECREF( tmp_kw_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 70;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_Tag );
    if ( tmp_called_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_14 );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_kw_name_4 );

        exception_lineno = 70;
        goto frame_exception_exit_1;
    }
    tmp_source_name_23 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_23 == NULL )
    {
        tmp_source_name_23 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_23 == NULL ))
        {
            tmp_source_name_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_23 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_called_name_14 );
            Py_DECREF( tmp_called_name_15 );
            Py_DECREF( tmp_kw_name_4 );
            Py_DECREF( tmp_called_name_17 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 70;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_22 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_14 );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_kw_name_4 );
        Py_DECREF( tmp_called_name_17 );

        exception_lineno = 70;
        goto frame_exception_exit_1;
    }
    tmp_source_name_24 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_24 == NULL )
    {
        tmp_source_name_24 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_24 == NULL ))
        {
            tmp_source_name_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_24 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_called_name_14 );
            Py_DECREF( tmp_called_name_15 );
            Py_DECREF( tmp_kw_name_4 );
            Py_DECREF( tmp_called_name_17 );
            Py_DECREF( tmp_args_element_name_22 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 70;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_23 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_tagFormatSimple );
    if ( tmp_args_element_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_14 );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_kw_name_4 );
        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_args_element_name_22 );

        exception_lineno = 70;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_24 = const_int_pos_3;
    frame_function->f_lineno = 70;
    tmp_dict_value_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_17, tmp_args_element_name_22, tmp_args_element_name_23, tmp_args_element_name_24 );
    Py_DECREF( tmp_called_name_17 );
    Py_DECREF( tmp_args_element_name_22 );
    Py_DECREF( tmp_args_element_name_23 );
    if ( tmp_dict_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_14 );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_kw_name_4 );

        exception_lineno = 70;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_4 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_4, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    frame_function->f_lineno = 70;
    tmp_args_element_name_21 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_15, tmp_kw_name_4 );
    Py_DECREF( tmp_called_name_15 );
    Py_DECREF( tmp_kw_name_4 );
    if ( tmp_args_element_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_14 );

        exception_lineno = 70;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 70;
    tmp_args_element_name_19 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_14, tmp_args_element_name_20, tmp_args_element_name_21 );
    Py_DECREF( tmp_called_name_14 );
    Py_DECREF( tmp_args_element_name_21 );
    if ( tmp_args_element_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );

        exception_lineno = 70;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 70;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, tmp_args_element_name_1, tmp_args_element_name_7, tmp_args_element_name_13, tmp_args_element_name_19 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    Py_DECREF( tmp_args_element_name_7 );
    Py_DECREF( tmp_args_element_name_13 );
    Py_DECREF( tmp_args_element_name_19 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 70;
        goto frame_exception_exit_1;
    }
    assert( var_componentType == NULL );
    var_componentType = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 65;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 65;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 65;
                goto frame_exception_exit_1;
            }
            }
            if ( var_componentType != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_componentType,
                    var_componentType
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 65;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_18 = closure_pyasn1_modules$rfc2251_class_creation_18__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_AuthenticationChoice;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_18__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_componentType != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_componentType,
            var_componentType
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_5 = closure_pyasn1_modules$rfc2251_class_creation_18__class_decl_dict;

    tmp_assign_source_4 = CALL_FUNCTION( tmp_called_name_18, tmp_args_name_1, tmp_kw_name_5 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_4;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_18_AuthenticationChoice_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_18_AuthenticationChoice_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_19_BindRequest_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_19__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_19__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_19__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_19__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_tagSet = NULL;
    PyObject *var_componentType = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_19__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_BindRequest;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_360ca0fddace67c9c014fe79b07f72d9, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 74;
            goto frame_exception_exit_1;
        }

    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_Sequence );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 74;
        goto frame_exception_exit_1;
    }
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_tagSet );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 74;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_tagImplicitly );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 74;
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 75;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_Tag );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 75;
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 75;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_tagClassApplication );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 75;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_6 == NULL )
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_6 == NULL ))
        {
            tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 75;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 75;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = const_int_0;
    frame_function->f_lineno = 75;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 75;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 75;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, tmp_args_element_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 75;
        goto frame_exception_exit_1;
    }
    assert( var_tagSet == NULL );
    var_tagSet = tmp_assign_source_3;

    tmp_source_name_7 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_7 == NULL )
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_7 == NULL ))
        {
            tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_7 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 77;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_NamedTypes );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 77;
        goto frame_exception_exit_1;
    }
    tmp_source_name_8 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_8 == NULL )
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_8 == NULL ))
        {
            tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_8 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 78;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_NamedType );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 78;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_6 = const_str_plain_version;
    tmp_source_name_10 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_10 == NULL )
    {
        tmp_source_name_10 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_10 == NULL ))
        {
            tmp_source_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_10 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_called_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 78;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_Integer );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 78;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 78;
    tmp_source_name_9 = CALL_FUNCTION_NO_ARGS( tmp_called_name_6 );
    Py_DECREF( tmp_called_name_6 );
    if ( tmp_source_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 78;
        goto frame_exception_exit_1;
    }
    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_9 );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 78;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_source_name_11 = PyDict_GetItem( locals_dict, const_str_plain_constraint );

    if ( tmp_source_name_11 == NULL )
    {
        tmp_source_name_11 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_constraint );

        if (unlikely( tmp_source_name_11 == NULL ))
        {
            tmp_source_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constraint );
        }

        if ( tmp_source_name_11 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 49934 ], 32, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 78;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_ValueRangeConstraint );
    if ( tmp_called_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 78;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = const_int_pos_1;
    tmp_call_arg_element_2 = const_int_pos_127;
    frame_function->f_lineno = 78;
    tmp_dict_value_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_7, tmp_call_arg_element_1, tmp_call_arg_element_2 );
    Py_DECREF( tmp_called_name_7 );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 78;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_1 = const_str_plain_subtypeSpec;
    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    frame_function->f_lineno = 78;
    tmp_args_element_name_7 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_5, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_5 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_args_element_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 78;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 78;
    tmp_args_element_name_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, tmp_args_element_name_6, tmp_args_element_name_7 );
    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_args_element_name_7 );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 78;
        goto frame_exception_exit_1;
    }
    tmp_source_name_12 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_12 == NULL )
    {
        tmp_source_name_12 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_12 == NULL ))
        {
            tmp_source_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_12 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 79;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_NamedType );
    if ( tmp_called_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );

        exception_lineno = 79;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_9 = const_str_plain_name;
    tmp_called_name_9 = PyDict_GetItem( locals_dict, const_str_plain_LDAPDN );

    if ( tmp_called_name_9 == NULL )
    {
        tmp_called_name_9 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPDN );

        if (unlikely( tmp_called_name_9 == NULL ))
        {
            tmp_called_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPDN );
        }

        if ( tmp_called_name_9 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_called_name_8 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52807 ], 28, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 79;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 79;
    tmp_args_element_name_10 = CALL_FUNCTION_NO_ARGS( tmp_called_name_9 );
    if ( tmp_args_element_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_8 );

        exception_lineno = 79;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 79;
    tmp_args_element_name_8 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_8, tmp_args_element_name_9, tmp_args_element_name_10 );
    Py_DECREF( tmp_called_name_8 );
    Py_DECREF( tmp_args_element_name_10 );
    if ( tmp_args_element_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );

        exception_lineno = 79;
        goto frame_exception_exit_1;
    }
    tmp_source_name_13 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_13 == NULL )
    {
        tmp_source_name_13 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_13 == NULL ))
        {
            tmp_source_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_13 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 80;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_NamedType );
    if ( tmp_called_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );

        exception_lineno = 80;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_12 = const_str_plain_authentication;
    tmp_called_name_11 = PyDict_GetItem( locals_dict, const_str_plain_AuthenticationChoice );

    if ( tmp_called_name_11 == NULL )
    {
        tmp_called_name_11 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AuthenticationChoice );

        if (unlikely( tmp_called_name_11 == NULL ))
        {
            tmp_called_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AuthenticationChoice );
        }

        if ( tmp_called_name_11 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_called_name_10 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52835 ], 42, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 80;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 80;
    tmp_args_element_name_13 = CALL_FUNCTION_NO_ARGS( tmp_called_name_11 );
    if ( tmp_args_element_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_called_name_10 );

        exception_lineno = 80;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 80;
    tmp_args_element_name_11 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_10, tmp_args_element_name_12, tmp_args_element_name_13 );
    Py_DECREF( tmp_called_name_10 );
    Py_DECREF( tmp_args_element_name_13 );
    if ( tmp_args_element_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );

        exception_lineno = 80;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 80;
    tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_3, tmp_args_element_name_5, tmp_args_element_name_8, tmp_args_element_name_11 );
    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_5 );
    Py_DECREF( tmp_args_element_name_8 );
    Py_DECREF( tmp_args_element_name_11 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 80;
        goto frame_exception_exit_1;
    }
    assert( var_componentType == NULL );
    var_componentType = tmp_assign_source_4;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 73;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 73;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 73;
                goto frame_exception_exit_1;
            }
            }
            if ( var_tagSet != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_tagSet,
                    var_tagSet
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 73;
                goto frame_exception_exit_1;
            }
            }
            if ( var_componentType != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_componentType,
                    var_componentType
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 73;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_12 = closure_pyasn1_modules$rfc2251_class_creation_19__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_BindRequest;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_19__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_tagSet != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_tagSet,
            var_tagSet
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_componentType != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_componentType,
            var_componentType
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_2 = closure_pyasn1_modules$rfc2251_class_creation_19__class_decl_dict;

    tmp_assign_source_5 = CALL_FUNCTION( tmp_called_name_12, tmp_args_name_1, tmp_kw_name_2 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_5;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_19_BindRequest_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_19_BindRequest_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_20_PartialAttributeList_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_20__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_20__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_20__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_20__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_componentType = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    PyObject *tmp_kw_name_3;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_20__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_PartialAttributeList;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_d498a00102badb68050ea419a3ca4f01, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_1 == NULL )
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_1 == NULL ))
        {
            tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 84;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_Sequence );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 84;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_source_name_2 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_2 == NULL )
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_2 == NULL ))
        {
            tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_2 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_kw_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 84;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_NamedTypes );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 84;
        goto frame_exception_exit_1;
    }
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_3 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 84;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_NamedType );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 84;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = const_str_plain_type;
    tmp_called_name_4 = PyDict_GetItem( locals_dict, const_str_plain_AttributeDescription );

    if ( tmp_called_name_4 == NULL )
    {
        tmp_called_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeDescription );

        if (unlikely( tmp_called_name_4 == NULL ))
        {
            tmp_called_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeDescription );
        }

        if ( tmp_called_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_called_name_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52569 ], 42, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 84;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 84;
    tmp_args_element_name_3 = CALL_FUNCTION_NO_ARGS( tmp_called_name_4 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 84;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 84;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, tmp_args_element_name_2, tmp_args_element_name_3 );
    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 84;
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 84;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_NamedType );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 84;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_5 = const_str_plain_vals;
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_5 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 84;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_SetOf );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_5 );

        exception_lineno = 84;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_2 = _PyDict_NewPresized( 1 );
    tmp_called_name_7 = PyDict_GetItem( locals_dict, const_str_plain_AttributeValue );

    if ( tmp_called_name_7 == NULL )
    {
        tmp_called_name_7 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeValue );

        if (unlikely( tmp_called_name_7 == NULL ))
        {
            tmp_called_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeValue );
        }

        if ( tmp_called_name_7 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_kw_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52647 ], 36, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 84;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 84;
    tmp_dict_value_2 = CALL_FUNCTION_NO_ARGS( tmp_called_name_7 );
    if ( tmp_dict_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );

        exception_lineno = 84;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_2 = const_str_plain_componentType;
    PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
    Py_DECREF( tmp_dict_value_2 );
    frame_function->f_lineno = 84;
    tmp_args_element_name_6 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_6, tmp_kw_name_2 );
    Py_DECREF( tmp_called_name_6 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_args_element_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_5 );

        exception_lineno = 84;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 84;
    tmp_args_element_name_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_5, tmp_args_element_name_5, tmp_args_element_name_6 );
    Py_DECREF( tmp_called_name_5 );
    Py_DECREF( tmp_args_element_name_6 );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 84;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 84;
    tmp_dict_value_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, tmp_args_element_name_1, tmp_args_element_name_4 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_1 );
    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 84;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_1 = const_str_plain_componentType;
    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    frame_function->f_lineno = 84;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 84;
        goto frame_exception_exit_1;
    }
    assert( var_componentType == NULL );
    var_componentType = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 83;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 83;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 83;
                goto frame_exception_exit_1;
            }
            }
            if ( var_componentType != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_componentType,
                    var_componentType
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 83;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_8 = closure_pyasn1_modules$rfc2251_class_creation_20__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_PartialAttributeList;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_20__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_componentType != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_componentType,
            var_componentType
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_3 = closure_pyasn1_modules$rfc2251_class_creation_20__class_decl_dict;

    tmp_assign_source_4 = CALL_FUNCTION( tmp_called_name_8, tmp_args_name_1, tmp_kw_name_3 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_4;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_20_PartialAttributeList_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_20_PartialAttributeList_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_21_SearchResultEntry_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_21__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_21__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_21__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_21__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_tagSet = NULL;
    PyObject *var_componentType = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_21__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_SearchResultEntry;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_4ea12dcf825c9573d705982199d097d3, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 87;
            goto frame_exception_exit_1;
        }

    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_Sequence );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 87;
        goto frame_exception_exit_1;
    }
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_tagSet );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 87;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_tagImplicitly );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 87;
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 88;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_Tag );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 88;
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 88;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_tagClassApplication );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 88;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_6 == NULL )
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_6 == NULL ))
        {
            tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 88;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 88;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = const_int_pos_4;
    frame_function->f_lineno = 88;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 88;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 88;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, tmp_args_element_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 88;
        goto frame_exception_exit_1;
    }
    assert( var_tagSet == NULL );
    var_tagSet = tmp_assign_source_3;

    tmp_source_name_7 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_7 == NULL )
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_7 == NULL ))
        {
            tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_7 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 90;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_NamedTypes );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 90;
        goto frame_exception_exit_1;
    }
    tmp_source_name_8 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_8 == NULL )
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_8 == NULL ))
        {
            tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_8 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 91;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_NamedType );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 91;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_6 = const_str_plain_objectName;
    tmp_called_name_5 = PyDict_GetItem( locals_dict, const_str_plain_LDAPDN );

    if ( tmp_called_name_5 == NULL )
    {
        tmp_called_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPDN );

        if (unlikely( tmp_called_name_5 == NULL ))
        {
            tmp_called_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPDN );
        }

        if ( tmp_called_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_called_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52807 ], 28, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 91;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 91;
    tmp_args_element_name_7 = CALL_FUNCTION_NO_ARGS( tmp_called_name_5 );
    if ( tmp_args_element_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 91;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 91;
    tmp_args_element_name_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, tmp_args_element_name_6, tmp_args_element_name_7 );
    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_args_element_name_7 );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 91;
        goto frame_exception_exit_1;
    }
    tmp_source_name_9 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_9 == NULL )
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_9 == NULL ))
        {
            tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_9 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 92;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_NamedType );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );

        exception_lineno = 92;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_9 = const_str_plain_attributes;
    tmp_called_name_7 = PyDict_GetItem( locals_dict, const_str_plain_PartialAttributeList );

    if ( tmp_called_name_7 == NULL )
    {
        tmp_called_name_7 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_PartialAttributeList );

        if (unlikely( tmp_called_name_7 == NULL ))
        {
            tmp_called_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PartialAttributeList );
        }

        if ( tmp_called_name_7 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_called_name_6 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52877 ], 42, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 92;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 92;
    tmp_args_element_name_10 = CALL_FUNCTION_NO_ARGS( tmp_called_name_7 );
    if ( tmp_args_element_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_6 );

        exception_lineno = 92;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 92;
    tmp_args_element_name_8 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_6, tmp_args_element_name_9, tmp_args_element_name_10 );
    Py_DECREF( tmp_called_name_6 );
    Py_DECREF( tmp_args_element_name_10 );
    if ( tmp_args_element_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );

        exception_lineno = 92;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 92;
    tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, tmp_args_element_name_5, tmp_args_element_name_8 );
    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_5 );
    Py_DECREF( tmp_args_element_name_8 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 92;
        goto frame_exception_exit_1;
    }
    assert( var_componentType == NULL );
    var_componentType = tmp_assign_source_4;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 86;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 86;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 86;
                goto frame_exception_exit_1;
            }
            }
            if ( var_tagSet != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_tagSet,
                    var_tagSet
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 86;
                goto frame_exception_exit_1;
            }
            }
            if ( var_componentType != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_componentType,
                    var_componentType
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 86;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_8 = closure_pyasn1_modules$rfc2251_class_creation_21__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_SearchResultEntry;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_21__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_tagSet != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_tagSet,
            var_tagSet
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_componentType != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_componentType,
            var_componentType
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_21__class_decl_dict;

    tmp_assign_source_5 = CALL_FUNCTION( tmp_called_name_8, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_5;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_21_SearchResultEntry_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_21_SearchResultEntry_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_22_MatchingRuleAssertion_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_22__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_22__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_22__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_22__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_componentType = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_args_element_name_20;
    PyObject *tmp_args_element_name_21;
    PyObject *tmp_args_element_name_22;
    PyObject *tmp_args_element_name_23;
    PyObject *tmp_args_element_name_24;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_called_name_16;
    PyObject *tmp_called_name_17;
    PyObject *tmp_called_name_18;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    PyObject *tmp_kw_name_3;
    PyObject *tmp_kw_name_4;
    PyObject *tmp_kw_name_5;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_source_name_22;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_22__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_MatchingRuleAssertion;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_95ff97d41f7149a0005d1441a7241b4b, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_1 == NULL )
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_1 == NULL ))
        {
            tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 96;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_NamedTypes );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 96;
        goto frame_exception_exit_1;
    }
    tmp_source_name_2 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_2 == NULL )
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_2 == NULL ))
        {
            tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_2 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 97;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_OptionalNamedType );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 97;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = const_str_plain_matchingRule;
    tmp_called_name_4 = PyDict_GetItem( locals_dict, const_str_plain_MatchingRuleId );

    if ( tmp_called_name_4 == NULL )
    {
        tmp_called_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_MatchingRuleId );

        if (unlikely( tmp_called_name_4 == NULL ))
        {
            tmp_called_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MatchingRuleId );
        }

        if ( tmp_called_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52919 ], 36, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 97;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 97;
    tmp_source_name_3 = CALL_FUNCTION_NO_ARGS( tmp_called_name_4 );
    if ( tmp_source_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 97;
        goto frame_exception_exit_1;
    }
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_3 );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 97;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_kw_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 97;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_Tag );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 97;
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_5 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 97;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_5 );

        exception_lineno = 97;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_6 == NULL )
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_6 == NULL ))
        {
            tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_args_element_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 97;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_tagFormatSimple );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_4 );

        exception_lineno = 97;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_6 = const_int_pos_1;
    frame_function->f_lineno = 97;
    tmp_dict_value_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_5, tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6 );
    Py_DECREF( tmp_called_name_5 );
    Py_DECREF( tmp_args_element_name_4 );
    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 97;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_1 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    frame_function->f_lineno = 97;
    tmp_args_element_name_3 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_3, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 97;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 97;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 97;
        goto frame_exception_exit_1;
    }
    tmp_source_name_7 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_7 == NULL )
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_7 == NULL ))
        {
            tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_7 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 98;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_OptionalNamedType );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 98;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_8 = const_str_plain_type;
    tmp_called_name_8 = PyDict_GetItem( locals_dict, const_str_plain_AttributeDescription );

    if ( tmp_called_name_8 == NULL )
    {
        tmp_called_name_8 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeDescription );

        if (unlikely( tmp_called_name_8 == NULL ))
        {
            tmp_called_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeDescription );
        }

        if ( tmp_called_name_8 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_6 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52569 ], 42, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 98;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 98;
    tmp_source_name_8 = CALL_FUNCTION_NO_ARGS( tmp_called_name_8 );
    if ( tmp_source_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_6 );

        exception_lineno = 98;
        goto frame_exception_exit_1;
    }
    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_8 );
    if ( tmp_called_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_6 );

        exception_lineno = 98;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_2 = _PyDict_NewPresized( 1 );
    tmp_source_name_9 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_9 == NULL )
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_9 == NULL ))
        {
            tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_9 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_kw_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 98;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_Tag );
    if ( tmp_called_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_kw_name_2 );

        exception_lineno = 98;
        goto frame_exception_exit_1;
    }
    tmp_source_name_10 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_10 == NULL )
    {
        tmp_source_name_10 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_10 == NULL ))
        {
            tmp_source_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_10 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_9 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 98;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_9 );

        exception_lineno = 98;
        goto frame_exception_exit_1;
    }
    tmp_source_name_11 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_11 == NULL )
    {
        tmp_source_name_11 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_11 == NULL ))
        {
            tmp_source_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_11 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_9 );
            Py_DECREF( tmp_args_element_name_10 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 98;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_tagFormatSimple );
    if ( tmp_args_element_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_args_element_name_10 );

        exception_lineno = 98;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_12 = const_int_pos_2;
    frame_function->f_lineno = 98;
    tmp_dict_value_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_9, tmp_args_element_name_10, tmp_args_element_name_11, tmp_args_element_name_12 );
    Py_DECREF( tmp_called_name_9 );
    Py_DECREF( tmp_args_element_name_10 );
    Py_DECREF( tmp_args_element_name_11 );
    if ( tmp_dict_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_kw_name_2 );

        exception_lineno = 98;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_2 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
    Py_DECREF( tmp_dict_value_2 );
    frame_function->f_lineno = 98;
    tmp_args_element_name_9 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_7, tmp_kw_name_2 );
    Py_DECREF( tmp_called_name_7 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_args_element_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_6 );

        exception_lineno = 98;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 98;
    tmp_args_element_name_7 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_6, tmp_args_element_name_8, tmp_args_element_name_9 );
    Py_DECREF( tmp_called_name_6 );
    Py_DECREF( tmp_args_element_name_9 );
    if ( tmp_args_element_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 98;
        goto frame_exception_exit_1;
    }
    tmp_source_name_12 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_12 == NULL )
    {
        tmp_source_name_12 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_12 == NULL ))
        {
            tmp_source_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_12 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 99;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_NamedType );
    if ( tmp_called_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );

        exception_lineno = 99;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_14 = const_str_plain_matchValue;
    tmp_called_name_12 = PyDict_GetItem( locals_dict, const_str_plain_AssertionValue );

    if ( tmp_called_name_12 == NULL )
    {
        tmp_called_name_12 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AssertionValue );

        if (unlikely( tmp_called_name_12 == NULL ))
        {
            tmp_called_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AssertionValue );
        }

        if ( tmp_called_name_12 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_called_name_10 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52611 ], 36, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 99;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 99;
    tmp_source_name_13 = CALL_FUNCTION_NO_ARGS( tmp_called_name_12 );
    if ( tmp_source_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_10 );

        exception_lineno = 99;
        goto frame_exception_exit_1;
    }
    tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_13 );
    if ( tmp_called_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_10 );

        exception_lineno = 99;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_3 = _PyDict_NewPresized( 1 );
    tmp_source_name_14 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_14 == NULL )
    {
        tmp_source_name_14 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_14 == NULL ))
        {
            tmp_source_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_14 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_called_name_10 );
            Py_DECREF( tmp_called_name_11 );
            Py_DECREF( tmp_kw_name_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 99;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_Tag );
    if ( tmp_called_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_kw_name_3 );

        exception_lineno = 99;
        goto frame_exception_exit_1;
    }
    tmp_source_name_15 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_15 == NULL )
    {
        tmp_source_name_15 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_15 == NULL ))
        {
            tmp_source_name_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_15 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_called_name_10 );
            Py_DECREF( tmp_called_name_11 );
            Py_DECREF( tmp_kw_name_3 );
            Py_DECREF( tmp_called_name_13 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 99;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_16 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_kw_name_3 );
        Py_DECREF( tmp_called_name_13 );

        exception_lineno = 99;
        goto frame_exception_exit_1;
    }
    tmp_source_name_16 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_16 == NULL )
    {
        tmp_source_name_16 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_16 == NULL ))
        {
            tmp_source_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_16 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_called_name_10 );
            Py_DECREF( tmp_called_name_11 );
            Py_DECREF( tmp_kw_name_3 );
            Py_DECREF( tmp_called_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 99;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_tagFormatSimple );
    if ( tmp_args_element_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_kw_name_3 );
        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_args_element_name_16 );

        exception_lineno = 99;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_18 = const_int_pos_3;
    frame_function->f_lineno = 99;
    tmp_dict_value_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_13, tmp_args_element_name_16, tmp_args_element_name_17, tmp_args_element_name_18 );
    Py_DECREF( tmp_called_name_13 );
    Py_DECREF( tmp_args_element_name_16 );
    Py_DECREF( tmp_args_element_name_17 );
    if ( tmp_dict_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_kw_name_3 );

        exception_lineno = 99;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_3 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_3, tmp_dict_value_3 );
    Py_DECREF( tmp_dict_value_3 );
    frame_function->f_lineno = 99;
    tmp_args_element_name_15 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_11, tmp_kw_name_3 );
    Py_DECREF( tmp_called_name_11 );
    Py_DECREF( tmp_kw_name_3 );
    if ( tmp_args_element_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_10 );

        exception_lineno = 99;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 99;
    tmp_args_element_name_13 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_10, tmp_args_element_name_14, tmp_args_element_name_15 );
    Py_DECREF( tmp_called_name_10 );
    Py_DECREF( tmp_args_element_name_15 );
    if ( tmp_args_element_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );

        exception_lineno = 99;
        goto frame_exception_exit_1;
    }
    tmp_source_name_17 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_17 == NULL )
    {
        tmp_source_name_17 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_17 == NULL ))
        {
            tmp_source_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_17 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 100;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_DefaultedNamedType );
    if ( tmp_called_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );

        exception_lineno = 100;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_20 = const_str_plain_dnAttributes;
    tmp_source_name_19 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_19 == NULL )
    {
        tmp_source_name_19 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_19 == NULL ))
        {
            tmp_source_name_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_19 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_called_name_14 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 100;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_16 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_Boolean );
    if ( tmp_called_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_14 );

        exception_lineno = 100;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = const_str_plain_False;
    frame_function->f_lineno = 100;
    tmp_source_name_18 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_16, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_name_16 );
    if ( tmp_source_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_14 );

        exception_lineno = 100;
        goto frame_exception_exit_1;
    }
    tmp_called_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_18 );
    if ( tmp_called_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_14 );

        exception_lineno = 100;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_4 = _PyDict_NewPresized( 1 );
    tmp_source_name_20 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_20 == NULL )
    {
        tmp_source_name_20 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_20 == NULL ))
        {
            tmp_source_name_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_20 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_called_name_14 );
            Py_DECREF( tmp_called_name_15 );
            Py_DECREF( tmp_kw_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 100;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_Tag );
    if ( tmp_called_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_14 );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_kw_name_4 );

        exception_lineno = 100;
        goto frame_exception_exit_1;
    }
    tmp_source_name_21 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_21 == NULL )
    {
        tmp_source_name_21 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_21 == NULL ))
        {
            tmp_source_name_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_21 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_called_name_14 );
            Py_DECREF( tmp_called_name_15 );
            Py_DECREF( tmp_kw_name_4 );
            Py_DECREF( tmp_called_name_17 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 100;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_22 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_14 );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_kw_name_4 );
        Py_DECREF( tmp_called_name_17 );

        exception_lineno = 100;
        goto frame_exception_exit_1;
    }
    tmp_source_name_22 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_22 == NULL )
    {
        tmp_source_name_22 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_22 == NULL ))
        {
            tmp_source_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_22 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_called_name_14 );
            Py_DECREF( tmp_called_name_15 );
            Py_DECREF( tmp_kw_name_4 );
            Py_DECREF( tmp_called_name_17 );
            Py_DECREF( tmp_args_element_name_22 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 100;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_23 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_tagFormatSimple );
    if ( tmp_args_element_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_14 );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_kw_name_4 );
        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_args_element_name_22 );

        exception_lineno = 100;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_24 = const_int_pos_4;
    frame_function->f_lineno = 100;
    tmp_dict_value_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_17, tmp_args_element_name_22, tmp_args_element_name_23, tmp_args_element_name_24 );
    Py_DECREF( tmp_called_name_17 );
    Py_DECREF( tmp_args_element_name_22 );
    Py_DECREF( tmp_args_element_name_23 );
    if ( tmp_dict_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_14 );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_kw_name_4 );

        exception_lineno = 100;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_4 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_4, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    frame_function->f_lineno = 100;
    tmp_args_element_name_21 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_15, tmp_kw_name_4 );
    Py_DECREF( tmp_called_name_15 );
    Py_DECREF( tmp_kw_name_4 );
    if ( tmp_args_element_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_14 );

        exception_lineno = 100;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 100;
    tmp_args_element_name_19 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_14, tmp_args_element_name_20, tmp_args_element_name_21 );
    Py_DECREF( tmp_called_name_14 );
    Py_DECREF( tmp_args_element_name_21 );
    if ( tmp_args_element_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );

        exception_lineno = 100;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 100;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, tmp_args_element_name_1, tmp_args_element_name_7, tmp_args_element_name_13, tmp_args_element_name_19 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    Py_DECREF( tmp_args_element_name_7 );
    Py_DECREF( tmp_args_element_name_13 );
    Py_DECREF( tmp_args_element_name_19 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 100;
        goto frame_exception_exit_1;
    }
    assert( var_componentType == NULL );
    var_componentType = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 95;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 95;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 95;
                goto frame_exception_exit_1;
            }
            }
            if ( var_componentType != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_componentType,
                    var_componentType
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 95;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_18 = closure_pyasn1_modules$rfc2251_class_creation_22__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_MatchingRuleAssertion;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_22__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_componentType != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_componentType,
            var_componentType
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_5 = closure_pyasn1_modules$rfc2251_class_creation_22__class_decl_dict;

    tmp_assign_source_4 = CALL_FUNCTION( tmp_called_name_18, tmp_args_name_1, tmp_kw_name_5 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_4;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_22_MatchingRuleAssertion_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_22_MatchingRuleAssertion_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_23_SubstringFilter_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_23__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_23__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_23__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_23__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_componentType = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_args_element_name_20;
    PyObject *tmp_args_element_name_21;
    PyObject *tmp_args_element_name_22;
    PyObject *tmp_args_element_name_23;
    PyObject *tmp_args_element_name_24;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_called_name_16;
    PyObject *tmp_called_name_17;
    PyObject *tmp_called_name_18;
    PyObject *tmp_called_name_19;
    PyObject *tmp_called_name_20;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    PyObject *tmp_kw_name_3;
    PyObject *tmp_kw_name_4;
    PyObject *tmp_kw_name_5;
    PyObject *tmp_kw_name_6;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_23__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_SubstringFilter;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_1b6bdf1ae56c8d6a6a3684845c518346, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_1 == NULL )
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_1 == NULL ))
        {
            tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 104;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_NamedTypes );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 104;
        goto frame_exception_exit_1;
    }
    tmp_source_name_2 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_2 == NULL )
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_2 == NULL ))
        {
            tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_2 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 105;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_NamedType );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 105;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = const_str_plain_type;
    tmp_called_name_3 = PyDict_GetItem( locals_dict, const_str_plain_AttributeDescription );

    if ( tmp_called_name_3 == NULL )
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeDescription );

        if (unlikely( tmp_called_name_3 == NULL ))
        {
            tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeDescription );
        }

        if ( tmp_called_name_3 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52569 ], 42, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 105;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 105;
    tmp_args_element_name_3 = CALL_FUNCTION_NO_ARGS( tmp_called_name_3 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 105;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 105;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 105;
        goto frame_exception_exit_1;
    }
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_3 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 106;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_NamedType );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_5 = const_str_plain_substrings;
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 106;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_SequenceOf );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 106;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_Choice );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_2 = _PyDict_NewPresized( 1 );
    tmp_source_name_6 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_6 == NULL )
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_6 == NULL ))
        {
            tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_kw_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 106;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_NamedTypes );
    if ( tmp_called_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_source_name_7 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_7 == NULL )
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_7 == NULL ))
        {
            tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_7 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_7 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 106;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_NamedType );
    if ( tmp_called_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_7 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_8 = const_str_plain_initial;
    tmp_called_name_10 = PyDict_GetItem( locals_dict, const_str_plain_LDAPString );

    if ( tmp_called_name_10 == NULL )
    {
        tmp_called_name_10 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPString );

        if (unlikely( tmp_called_name_10 == NULL ))
        {
            tmp_called_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPString );
        }

        if ( tmp_called_name_10 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_called_name_8 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52505 ], 32, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 106;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 106;
    tmp_source_name_8 = CALL_FUNCTION_NO_ARGS( tmp_called_name_10 );
    if ( tmp_source_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_called_name_8 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_8 );
    if ( tmp_called_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_called_name_8 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_3 = _PyDict_NewPresized( 1 );
    tmp_source_name_9 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_9 == NULL )
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_9 == NULL ))
        {
            tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_9 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_called_name_8 );
            Py_DECREF( tmp_called_name_9 );
            Py_DECREF( tmp_kw_name_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 106;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_Tag );
    if ( tmp_called_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_kw_name_3 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_source_name_10 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_10 == NULL )
    {
        tmp_source_name_10 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_10 == NULL ))
        {
            tmp_source_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_10 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_called_name_8 );
            Py_DECREF( tmp_called_name_9 );
            Py_DECREF( tmp_kw_name_3 );
            Py_DECREF( tmp_called_name_11 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 106;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_kw_name_3 );
        Py_DECREF( tmp_called_name_11 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_source_name_11 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_11 == NULL )
    {
        tmp_source_name_11 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_11 == NULL ))
        {
            tmp_source_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_11 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_called_name_8 );
            Py_DECREF( tmp_called_name_9 );
            Py_DECREF( tmp_kw_name_3 );
            Py_DECREF( tmp_called_name_11 );
            Py_DECREF( tmp_args_element_name_10 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 106;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_tagFormatSimple );
    if ( tmp_args_element_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_kw_name_3 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_args_element_name_10 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_12 = const_int_0;
    frame_function->f_lineno = 106;
    tmp_dict_value_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_11, tmp_args_element_name_10, tmp_args_element_name_11, tmp_args_element_name_12 );
    Py_DECREF( tmp_called_name_11 );
    Py_DECREF( tmp_args_element_name_10 );
    Py_DECREF( tmp_args_element_name_11 );
    if ( tmp_dict_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_kw_name_3 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_3 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_3, tmp_dict_value_3 );
    Py_DECREF( tmp_dict_value_3 );
    frame_function->f_lineno = 106;
    tmp_args_element_name_9 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_9, tmp_kw_name_3 );
    Py_DECREF( tmp_called_name_9 );
    Py_DECREF( tmp_kw_name_3 );
    if ( tmp_args_element_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_called_name_8 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 106;
    tmp_args_element_name_7 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_8, tmp_args_element_name_8, tmp_args_element_name_9 );
    Py_DECREF( tmp_called_name_8 );
    Py_DECREF( tmp_args_element_name_9 );
    if ( tmp_args_element_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_7 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_source_name_12 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_12 == NULL )
    {
        tmp_source_name_12 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_12 == NULL ))
        {
            tmp_source_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_12 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_args_element_name_7 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 106;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_NamedType );
    if ( tmp_called_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_7 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_14 = const_str_plain_any;
    tmp_called_name_14 = PyDict_GetItem( locals_dict, const_str_plain_LDAPString );

    if ( tmp_called_name_14 == NULL )
    {
        tmp_called_name_14 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPString );

        if (unlikely( tmp_called_name_14 == NULL ))
        {
            tmp_called_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPString );
        }

        if ( tmp_called_name_14 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_called_name_12 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52505 ], 32, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 106;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 106;
    tmp_source_name_13 = CALL_FUNCTION_NO_ARGS( tmp_called_name_14 );
    if ( tmp_source_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_12 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_called_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_13 );
    if ( tmp_called_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_12 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_4 = _PyDict_NewPresized( 1 );
    tmp_source_name_14 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_14 == NULL )
    {
        tmp_source_name_14 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_14 == NULL ))
        {
            tmp_source_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_14 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_called_name_12 );
            Py_DECREF( tmp_called_name_13 );
            Py_DECREF( tmp_kw_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 106;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_Tag );
    if ( tmp_called_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_kw_name_4 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_source_name_15 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_15 == NULL )
    {
        tmp_source_name_15 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_15 == NULL ))
        {
            tmp_source_name_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_15 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_called_name_12 );
            Py_DECREF( tmp_called_name_13 );
            Py_DECREF( tmp_kw_name_4 );
            Py_DECREF( tmp_called_name_15 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 106;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_16 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_kw_name_4 );
        Py_DECREF( tmp_called_name_15 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_source_name_16 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_16 == NULL )
    {
        tmp_source_name_16 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_16 == NULL ))
        {
            tmp_source_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_16 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_called_name_12 );
            Py_DECREF( tmp_called_name_13 );
            Py_DECREF( tmp_kw_name_4 );
            Py_DECREF( tmp_called_name_15 );
            Py_DECREF( tmp_args_element_name_16 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 106;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_tagFormatSimple );
    if ( tmp_args_element_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_kw_name_4 );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_args_element_name_16 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_18 = const_int_pos_1;
    frame_function->f_lineno = 106;
    tmp_dict_value_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_15, tmp_args_element_name_16, tmp_args_element_name_17, tmp_args_element_name_18 );
    Py_DECREF( tmp_called_name_15 );
    Py_DECREF( tmp_args_element_name_16 );
    Py_DECREF( tmp_args_element_name_17 );
    if ( tmp_dict_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_kw_name_4 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_4 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_4, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    frame_function->f_lineno = 106;
    tmp_args_element_name_15 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_13, tmp_kw_name_4 );
    Py_DECREF( tmp_called_name_13 );
    Py_DECREF( tmp_kw_name_4 );
    if ( tmp_args_element_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_12 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 106;
    tmp_args_element_name_13 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_12, tmp_args_element_name_14, tmp_args_element_name_15 );
    Py_DECREF( tmp_called_name_12 );
    Py_DECREF( tmp_args_element_name_15 );
    if ( tmp_args_element_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_7 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_source_name_17 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_17 == NULL )
    {
        tmp_source_name_17 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_17 == NULL ))
        {
            tmp_source_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_17 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 106;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_16 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_NamedType );
    if ( tmp_called_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_20 = const_str_plain_final;
    tmp_called_name_18 = PyDict_GetItem( locals_dict, const_str_plain_LDAPString );

    if ( tmp_called_name_18 == NULL )
    {
        tmp_called_name_18 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPString );

        if (unlikely( tmp_called_name_18 == NULL ))
        {
            tmp_called_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPString );
        }

        if ( tmp_called_name_18 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_called_name_16 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52505 ], 32, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 106;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 106;
    tmp_source_name_18 = CALL_FUNCTION_NO_ARGS( tmp_called_name_18 );
    if ( tmp_source_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_16 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_called_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_18 );
    if ( tmp_called_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_16 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_5 = _PyDict_NewPresized( 1 );
    tmp_source_name_19 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_19 == NULL )
    {
        tmp_source_name_19 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_19 == NULL ))
        {
            tmp_source_name_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_19 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_called_name_16 );
            Py_DECREF( tmp_called_name_17 );
            Py_DECREF( tmp_kw_name_5 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 106;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_19 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_Tag );
    if ( tmp_called_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_kw_name_5 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_source_name_20 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_20 == NULL )
    {
        tmp_source_name_20 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_20 == NULL ))
        {
            tmp_source_name_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_20 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_called_name_16 );
            Py_DECREF( tmp_called_name_17 );
            Py_DECREF( tmp_kw_name_5 );
            Py_DECREF( tmp_called_name_19 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 106;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_22 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_kw_name_5 );
        Py_DECREF( tmp_called_name_19 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_source_name_21 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_21 == NULL )
    {
        tmp_source_name_21 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_21 == NULL ))
        {
            tmp_source_name_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_21 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_called_name_16 );
            Py_DECREF( tmp_called_name_17 );
            Py_DECREF( tmp_kw_name_5 );
            Py_DECREF( tmp_called_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 106;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_23 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_tagFormatSimple );
    if ( tmp_args_element_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_kw_name_5 );
        Py_DECREF( tmp_called_name_19 );
        Py_DECREF( tmp_args_element_name_22 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_24 = const_int_pos_2;
    frame_function->f_lineno = 106;
    tmp_dict_value_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_19, tmp_args_element_name_22, tmp_args_element_name_23, tmp_args_element_name_24 );
    Py_DECREF( tmp_called_name_19 );
    Py_DECREF( tmp_args_element_name_22 );
    Py_DECREF( tmp_args_element_name_23 );
    if ( tmp_dict_value_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_kw_name_5 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_5 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_5, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    frame_function->f_lineno = 106;
    tmp_args_element_name_21 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_17, tmp_kw_name_5 );
    Py_DECREF( tmp_called_name_17 );
    Py_DECREF( tmp_kw_name_5 );
    if ( tmp_args_element_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_16 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 106;
    tmp_args_element_name_19 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_16, tmp_args_element_name_20, tmp_args_element_name_21 );
    Py_DECREF( tmp_called_name_16 );
    Py_DECREF( tmp_args_element_name_21 );
    if ( tmp_args_element_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 106;
    tmp_dict_value_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_7, tmp_args_element_name_7, tmp_args_element_name_13, tmp_args_element_name_19 );
    Py_DECREF( tmp_called_name_7 );
    Py_DECREF( tmp_args_element_name_7 );
    Py_DECREF( tmp_args_element_name_13 );
    Py_DECREF( tmp_args_element_name_19 );
    if ( tmp_dict_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_2 = const_str_plain_componentType;
    PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
    Py_DECREF( tmp_dict_value_2 );
    frame_function->f_lineno = 106;
    tmp_dict_value_1 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_6, tmp_kw_name_2 );
    Py_DECREF( tmp_called_name_6 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_1 = const_str_plain_componentType;
    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    frame_function->f_lineno = 106;
    tmp_args_element_name_6 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_5, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_5 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_args_element_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 106;
    tmp_args_element_name_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, tmp_args_element_name_5, tmp_args_element_name_6 );
    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_args_element_name_6 );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 106;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, tmp_args_element_name_1, tmp_args_element_name_4 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    assert( var_componentType == NULL );
    var_componentType = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 103;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 103;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 103;
                goto frame_exception_exit_1;
            }
            }
            if ( var_componentType != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_componentType,
                    var_componentType
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 103;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_20 = closure_pyasn1_modules$rfc2251_class_creation_23__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_SubstringFilter;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_23__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_componentType != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_componentType,
            var_componentType
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_6 = closure_pyasn1_modules$rfc2251_class_creation_23__class_decl_dict;

    tmp_assign_source_4 = CALL_FUNCTION( tmp_called_name_20, tmp_args_name_1, tmp_kw_name_6 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_4;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_23_SubstringFilter_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_23_SubstringFilter_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_24_Filter3_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_24__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_24__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_24__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_24__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_componentType = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_args_element_name_20;
    PyObject *tmp_args_element_name_21;
    PyObject *tmp_args_element_name_22;
    PyObject *tmp_args_element_name_23;
    PyObject *tmp_args_element_name_24;
    PyObject *tmp_args_element_name_25;
    PyObject *tmp_args_element_name_26;
    PyObject *tmp_args_element_name_27;
    PyObject *tmp_args_element_name_28;
    PyObject *tmp_args_element_name_29;
    PyObject *tmp_args_element_name_30;
    PyObject *tmp_args_element_name_31;
    PyObject *tmp_args_element_name_32;
    PyObject *tmp_args_element_name_33;
    PyObject *tmp_args_element_name_34;
    PyObject *tmp_args_element_name_35;
    PyObject *tmp_args_element_name_36;
    PyObject *tmp_args_element_name_37;
    PyObject *tmp_args_element_name_38;
    PyObject *tmp_args_element_name_39;
    PyObject *tmp_args_element_name_40;
    PyObject *tmp_args_element_name_41;
    PyObject *tmp_args_element_name_42;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_called_name_16;
    PyObject *tmp_called_name_17;
    PyObject *tmp_called_name_18;
    PyObject *tmp_called_name_19;
    PyObject *tmp_called_name_20;
    PyObject *tmp_called_name_21;
    PyObject *tmp_called_name_22;
    PyObject *tmp_called_name_23;
    PyObject *tmp_called_name_24;
    PyObject *tmp_called_name_25;
    PyObject *tmp_called_name_26;
    PyObject *tmp_called_name_27;
    PyObject *tmp_called_name_28;
    PyObject *tmp_called_name_29;
    PyObject *tmp_called_name_30;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_key_7;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_dict_value_7;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    PyObject *tmp_kw_name_3;
    PyObject *tmp_kw_name_4;
    PyObject *tmp_kw_name_5;
    PyObject *tmp_kw_name_6;
    PyObject *tmp_kw_name_7;
    PyObject *tmp_kw_name_8;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_source_name_22;
    PyObject *tmp_source_name_23;
    PyObject *tmp_source_name_24;
    PyObject *tmp_source_name_25;
    PyObject *tmp_source_name_26;
    PyObject *tmp_source_name_27;
    PyObject *tmp_source_name_28;
    PyObject *tmp_source_name_29;
    PyObject *tmp_source_name_30;
    PyObject *tmp_source_name_31;
    PyObject *tmp_source_name_32;
    PyObject *tmp_source_name_33;
    PyObject *tmp_source_name_34;
    PyObject *tmp_source_name_35;
    PyObject *tmp_source_name_36;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_24__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_Filter3;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_6b5c0255269a67400035a7c6dd4e74c6, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_1 == NULL )
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_1 == NULL ))
        {
            tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 112;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_NamedTypes );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 112;
        goto frame_exception_exit_1;
    }
    tmp_source_name_2 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_2 == NULL )
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_2 == NULL ))
        {
            tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_2 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 113;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_NamedType );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 113;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = const_str_plain_equalityMatch;
    tmp_called_name_4 = PyDict_GetItem( locals_dict, const_str_plain_AttributeValueAssertion );

    if ( tmp_called_name_4 == NULL )
    {
        tmp_called_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeValueAssertion );

        if (unlikely( tmp_called_name_4 == NULL ))
        {
            tmp_called_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeValueAssertion );
        }

        if ( tmp_called_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52955 ], 45, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 113;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 113;
    tmp_source_name_3 = CALL_FUNCTION_NO_ARGS( tmp_called_name_4 );
    if ( tmp_source_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 113;
        goto frame_exception_exit_1;
    }
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_3 );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 113;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_kw_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 113;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_Tag );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 113;
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_5 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 113;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_5 );

        exception_lineno = 113;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_6 == NULL )
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_6 == NULL ))
        {
            tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_args_element_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 113;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_4 );

        exception_lineno = 113;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_6 = const_int_pos_3;
    frame_function->f_lineno = 113;
    tmp_dict_value_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_5, tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6 );
    Py_DECREF( tmp_called_name_5 );
    Py_DECREF( tmp_args_element_name_4 );
    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 113;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_1 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    frame_function->f_lineno = 113;
    tmp_args_element_name_3 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_3, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 113;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 113;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 113;
        goto frame_exception_exit_1;
    }
    tmp_source_name_7 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_7 == NULL )
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_7 == NULL ))
        {
            tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_7 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 114;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_NamedType );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 114;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_8 = const_str_plain_substrings;
    tmp_called_name_8 = PyDict_GetItem( locals_dict, const_str_plain_SubstringFilter );

    if ( tmp_called_name_8 == NULL )
    {
        tmp_called_name_8 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_SubstringFilter );

        if (unlikely( tmp_called_name_8 == NULL ))
        {
            tmp_called_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SubstringFilter );
        }

        if ( tmp_called_name_8 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_6 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53000 ], 37, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 114;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 114;
    tmp_source_name_8 = CALL_FUNCTION_NO_ARGS( tmp_called_name_8 );
    if ( tmp_source_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_6 );

        exception_lineno = 114;
        goto frame_exception_exit_1;
    }
    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_8 );
    if ( tmp_called_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_6 );

        exception_lineno = 114;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_2 = _PyDict_NewPresized( 1 );
    tmp_source_name_9 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_9 == NULL )
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_9 == NULL ))
        {
            tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_9 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_kw_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 114;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_Tag );
    if ( tmp_called_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_kw_name_2 );

        exception_lineno = 114;
        goto frame_exception_exit_1;
    }
    tmp_source_name_10 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_10 == NULL )
    {
        tmp_source_name_10 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_10 == NULL ))
        {
            tmp_source_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_10 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_9 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 114;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_9 );

        exception_lineno = 114;
        goto frame_exception_exit_1;
    }
    tmp_source_name_11 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_11 == NULL )
    {
        tmp_source_name_11 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_11 == NULL ))
        {
            tmp_source_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_11 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_9 );
            Py_DECREF( tmp_args_element_name_10 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 114;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_args_element_name_10 );

        exception_lineno = 114;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_12 = const_int_pos_4;
    frame_function->f_lineno = 114;
    tmp_dict_value_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_9, tmp_args_element_name_10, tmp_args_element_name_11, tmp_args_element_name_12 );
    Py_DECREF( tmp_called_name_9 );
    Py_DECREF( tmp_args_element_name_10 );
    Py_DECREF( tmp_args_element_name_11 );
    if ( tmp_dict_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_kw_name_2 );

        exception_lineno = 114;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_2 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
    Py_DECREF( tmp_dict_value_2 );
    frame_function->f_lineno = 114;
    tmp_args_element_name_9 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_7, tmp_kw_name_2 );
    Py_DECREF( tmp_called_name_7 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_args_element_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_6 );

        exception_lineno = 114;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 114;
    tmp_args_element_name_7 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_6, tmp_args_element_name_8, tmp_args_element_name_9 );
    Py_DECREF( tmp_called_name_6 );
    Py_DECREF( tmp_args_element_name_9 );
    if ( tmp_args_element_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 114;
        goto frame_exception_exit_1;
    }
    tmp_source_name_12 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_12 == NULL )
    {
        tmp_source_name_12 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_12 == NULL ))
        {
            tmp_source_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_12 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 115;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_NamedType );
    if ( tmp_called_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );

        exception_lineno = 115;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_14 = const_str_plain_greaterOrEqual;
    tmp_called_name_12 = PyDict_GetItem( locals_dict, const_str_plain_AttributeValueAssertion );

    if ( tmp_called_name_12 == NULL )
    {
        tmp_called_name_12 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeValueAssertion );

        if (unlikely( tmp_called_name_12 == NULL ))
        {
            tmp_called_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeValueAssertion );
        }

        if ( tmp_called_name_12 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_called_name_10 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52955 ], 45, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 115;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 115;
    tmp_source_name_13 = CALL_FUNCTION_NO_ARGS( tmp_called_name_12 );
    if ( tmp_source_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_10 );

        exception_lineno = 115;
        goto frame_exception_exit_1;
    }
    tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_13 );
    if ( tmp_called_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_10 );

        exception_lineno = 115;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_3 = _PyDict_NewPresized( 1 );
    tmp_source_name_14 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_14 == NULL )
    {
        tmp_source_name_14 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_14 == NULL ))
        {
            tmp_source_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_14 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_called_name_10 );
            Py_DECREF( tmp_called_name_11 );
            Py_DECREF( tmp_kw_name_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 115;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_Tag );
    if ( tmp_called_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_kw_name_3 );

        exception_lineno = 115;
        goto frame_exception_exit_1;
    }
    tmp_source_name_15 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_15 == NULL )
    {
        tmp_source_name_15 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_15 == NULL ))
        {
            tmp_source_name_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_15 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_called_name_10 );
            Py_DECREF( tmp_called_name_11 );
            Py_DECREF( tmp_kw_name_3 );
            Py_DECREF( tmp_called_name_13 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 115;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_16 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_kw_name_3 );
        Py_DECREF( tmp_called_name_13 );

        exception_lineno = 115;
        goto frame_exception_exit_1;
    }
    tmp_source_name_16 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_16 == NULL )
    {
        tmp_source_name_16 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_16 == NULL ))
        {
            tmp_source_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_16 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_called_name_10 );
            Py_DECREF( tmp_called_name_11 );
            Py_DECREF( tmp_kw_name_3 );
            Py_DECREF( tmp_called_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 115;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_kw_name_3 );
        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_args_element_name_16 );

        exception_lineno = 115;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_18 = const_int_pos_5;
    frame_function->f_lineno = 115;
    tmp_dict_value_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_13, tmp_args_element_name_16, tmp_args_element_name_17, tmp_args_element_name_18 );
    Py_DECREF( tmp_called_name_13 );
    Py_DECREF( tmp_args_element_name_16 );
    Py_DECREF( tmp_args_element_name_17 );
    if ( tmp_dict_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_kw_name_3 );

        exception_lineno = 115;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_3 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_3, tmp_dict_value_3 );
    Py_DECREF( tmp_dict_value_3 );
    frame_function->f_lineno = 115;
    tmp_args_element_name_15 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_11, tmp_kw_name_3 );
    Py_DECREF( tmp_called_name_11 );
    Py_DECREF( tmp_kw_name_3 );
    if ( tmp_args_element_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_10 );

        exception_lineno = 115;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 115;
    tmp_args_element_name_13 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_10, tmp_args_element_name_14, tmp_args_element_name_15 );
    Py_DECREF( tmp_called_name_10 );
    Py_DECREF( tmp_args_element_name_15 );
    if ( tmp_args_element_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );

        exception_lineno = 115;
        goto frame_exception_exit_1;
    }
    tmp_source_name_17 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_17 == NULL )
    {
        tmp_source_name_17 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_17 == NULL ))
        {
            tmp_source_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_17 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 116;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_NamedType );
    if ( tmp_called_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );

        exception_lineno = 116;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_20 = const_str_plain_lessOrEqual;
    tmp_called_name_16 = PyDict_GetItem( locals_dict, const_str_plain_AttributeValueAssertion );

    if ( tmp_called_name_16 == NULL )
    {
        tmp_called_name_16 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeValueAssertion );

        if (unlikely( tmp_called_name_16 == NULL ))
        {
            tmp_called_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeValueAssertion );
        }

        if ( tmp_called_name_16 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_called_name_14 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52955 ], 45, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 116;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 116;
    tmp_source_name_18 = CALL_FUNCTION_NO_ARGS( tmp_called_name_16 );
    if ( tmp_source_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_14 );

        exception_lineno = 116;
        goto frame_exception_exit_1;
    }
    tmp_called_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_18 );
    if ( tmp_called_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_14 );

        exception_lineno = 116;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_4 = _PyDict_NewPresized( 1 );
    tmp_source_name_19 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_19 == NULL )
    {
        tmp_source_name_19 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_19 == NULL ))
        {
            tmp_source_name_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_19 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_called_name_14 );
            Py_DECREF( tmp_called_name_15 );
            Py_DECREF( tmp_kw_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 116;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_Tag );
    if ( tmp_called_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_14 );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_kw_name_4 );

        exception_lineno = 116;
        goto frame_exception_exit_1;
    }
    tmp_source_name_20 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_20 == NULL )
    {
        tmp_source_name_20 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_20 == NULL ))
        {
            tmp_source_name_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_20 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_called_name_14 );
            Py_DECREF( tmp_called_name_15 );
            Py_DECREF( tmp_kw_name_4 );
            Py_DECREF( tmp_called_name_17 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 116;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_22 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_14 );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_kw_name_4 );
        Py_DECREF( tmp_called_name_17 );

        exception_lineno = 116;
        goto frame_exception_exit_1;
    }
    tmp_source_name_21 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_21 == NULL )
    {
        tmp_source_name_21 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_21 == NULL ))
        {
            tmp_source_name_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_21 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_called_name_14 );
            Py_DECREF( tmp_called_name_15 );
            Py_DECREF( tmp_kw_name_4 );
            Py_DECREF( tmp_called_name_17 );
            Py_DECREF( tmp_args_element_name_22 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 116;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_23 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_14 );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_kw_name_4 );
        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_args_element_name_22 );

        exception_lineno = 116;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_24 = const_int_pos_6;
    frame_function->f_lineno = 116;
    tmp_dict_value_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_17, tmp_args_element_name_22, tmp_args_element_name_23, tmp_args_element_name_24 );
    Py_DECREF( tmp_called_name_17 );
    Py_DECREF( tmp_args_element_name_22 );
    Py_DECREF( tmp_args_element_name_23 );
    if ( tmp_dict_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_14 );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_kw_name_4 );

        exception_lineno = 116;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_4 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_4, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    frame_function->f_lineno = 116;
    tmp_args_element_name_21 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_15, tmp_kw_name_4 );
    Py_DECREF( tmp_called_name_15 );
    Py_DECREF( tmp_kw_name_4 );
    if ( tmp_args_element_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_14 );

        exception_lineno = 116;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 116;
    tmp_args_element_name_19 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_14, tmp_args_element_name_20, tmp_args_element_name_21 );
    Py_DECREF( tmp_called_name_14 );
    Py_DECREF( tmp_args_element_name_21 );
    if ( tmp_args_element_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );

        exception_lineno = 116;
        goto frame_exception_exit_1;
    }
    tmp_source_name_22 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_22 == NULL )
    {
        tmp_source_name_22 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_22 == NULL ))
        {
            tmp_source_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_22 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 117;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_18 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_NamedType );
    if ( tmp_called_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );

        exception_lineno = 117;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_26 = const_str_plain_present;
    tmp_called_name_20 = PyDict_GetItem( locals_dict, const_str_plain_AttributeDescription );

    if ( tmp_called_name_20 == NULL )
    {
        tmp_called_name_20 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeDescription );

        if (unlikely( tmp_called_name_20 == NULL ))
        {
            tmp_called_name_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeDescription );
        }

        if ( tmp_called_name_20 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_called_name_18 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52569 ], 42, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 117;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 117;
    tmp_source_name_23 = CALL_FUNCTION_NO_ARGS( tmp_called_name_20 );
    if ( tmp_source_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_called_name_18 );

        exception_lineno = 117;
        goto frame_exception_exit_1;
    }
    tmp_called_name_19 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_23 );
    if ( tmp_called_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_called_name_18 );

        exception_lineno = 117;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_5 = _PyDict_NewPresized( 1 );
    tmp_source_name_24 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_24 == NULL )
    {
        tmp_source_name_24 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_24 == NULL ))
        {
            tmp_source_name_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_24 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_called_name_18 );
            Py_DECREF( tmp_called_name_19 );
            Py_DECREF( tmp_kw_name_5 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 117;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_21 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_Tag );
    if ( tmp_called_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_called_name_18 );
        Py_DECREF( tmp_called_name_19 );
        Py_DECREF( tmp_kw_name_5 );

        exception_lineno = 117;
        goto frame_exception_exit_1;
    }
    tmp_source_name_25 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_25 == NULL )
    {
        tmp_source_name_25 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_25 == NULL ))
        {
            tmp_source_name_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_25 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_called_name_18 );
            Py_DECREF( tmp_called_name_19 );
            Py_DECREF( tmp_kw_name_5 );
            Py_DECREF( tmp_called_name_21 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 117;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_28 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_called_name_18 );
        Py_DECREF( tmp_called_name_19 );
        Py_DECREF( tmp_kw_name_5 );
        Py_DECREF( tmp_called_name_21 );

        exception_lineno = 117;
        goto frame_exception_exit_1;
    }
    tmp_source_name_26 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_26 == NULL )
    {
        tmp_source_name_26 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_26 == NULL ))
        {
            tmp_source_name_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_26 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_called_name_18 );
            Py_DECREF( tmp_called_name_19 );
            Py_DECREF( tmp_kw_name_5 );
            Py_DECREF( tmp_called_name_21 );
            Py_DECREF( tmp_args_element_name_28 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 117;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_29 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain_tagFormatSimple );
    if ( tmp_args_element_name_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_called_name_18 );
        Py_DECREF( tmp_called_name_19 );
        Py_DECREF( tmp_kw_name_5 );
        Py_DECREF( tmp_called_name_21 );
        Py_DECREF( tmp_args_element_name_28 );

        exception_lineno = 117;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_30 = const_int_pos_7;
    frame_function->f_lineno = 117;
    tmp_dict_value_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_21, tmp_args_element_name_28, tmp_args_element_name_29, tmp_args_element_name_30 );
    Py_DECREF( tmp_called_name_21 );
    Py_DECREF( tmp_args_element_name_28 );
    Py_DECREF( tmp_args_element_name_29 );
    if ( tmp_dict_value_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_called_name_18 );
        Py_DECREF( tmp_called_name_19 );
        Py_DECREF( tmp_kw_name_5 );

        exception_lineno = 117;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_5 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_5, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    frame_function->f_lineno = 117;
    tmp_args_element_name_27 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_19, tmp_kw_name_5 );
    Py_DECREF( tmp_called_name_19 );
    Py_DECREF( tmp_kw_name_5 );
    if ( tmp_args_element_name_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_called_name_18 );

        exception_lineno = 117;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 117;
    tmp_args_element_name_25 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_18, tmp_args_element_name_26, tmp_args_element_name_27 );
    Py_DECREF( tmp_called_name_18 );
    Py_DECREF( tmp_args_element_name_27 );
    if ( tmp_args_element_name_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );

        exception_lineno = 117;
        goto frame_exception_exit_1;
    }
    tmp_source_name_27 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_27 == NULL )
    {
        tmp_source_name_27 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_27 == NULL ))
        {
            tmp_source_name_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_27 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 118;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_22 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain_NamedType );
    if ( tmp_called_name_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );

        exception_lineno = 118;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_32 = const_str_plain_approxMatch;
    tmp_called_name_24 = PyDict_GetItem( locals_dict, const_str_plain_AttributeValueAssertion );

    if ( tmp_called_name_24 == NULL )
    {
        tmp_called_name_24 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeValueAssertion );

        if (unlikely( tmp_called_name_24 == NULL ))
        {
            tmp_called_name_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeValueAssertion );
        }

        if ( tmp_called_name_24 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_called_name_22 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52955 ], 45, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 118;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 118;
    tmp_source_name_28 = CALL_FUNCTION_NO_ARGS( tmp_called_name_24 );
    if ( tmp_source_name_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_called_name_22 );

        exception_lineno = 118;
        goto frame_exception_exit_1;
    }
    tmp_called_name_23 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_28 );
    if ( tmp_called_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_called_name_22 );

        exception_lineno = 118;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_6 = _PyDict_NewPresized( 1 );
    tmp_source_name_29 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_29 == NULL )
    {
        tmp_source_name_29 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_29 == NULL ))
        {
            tmp_source_name_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_29 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_called_name_22 );
            Py_DECREF( tmp_called_name_23 );
            Py_DECREF( tmp_kw_name_6 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 118;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_25 = LOOKUP_ATTRIBUTE( tmp_source_name_29, const_str_plain_Tag );
    if ( tmp_called_name_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_called_name_22 );
        Py_DECREF( tmp_called_name_23 );
        Py_DECREF( tmp_kw_name_6 );

        exception_lineno = 118;
        goto frame_exception_exit_1;
    }
    tmp_source_name_30 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_30 == NULL )
    {
        tmp_source_name_30 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_30 == NULL ))
        {
            tmp_source_name_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_30 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_called_name_22 );
            Py_DECREF( tmp_called_name_23 );
            Py_DECREF( tmp_kw_name_6 );
            Py_DECREF( tmp_called_name_25 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 118;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_34 = LOOKUP_ATTRIBUTE( tmp_source_name_30, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_called_name_22 );
        Py_DECREF( tmp_called_name_23 );
        Py_DECREF( tmp_kw_name_6 );
        Py_DECREF( tmp_called_name_25 );

        exception_lineno = 118;
        goto frame_exception_exit_1;
    }
    tmp_source_name_31 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_31 == NULL )
    {
        tmp_source_name_31 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_31 == NULL ))
        {
            tmp_source_name_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_31 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_called_name_22 );
            Py_DECREF( tmp_called_name_23 );
            Py_DECREF( tmp_kw_name_6 );
            Py_DECREF( tmp_called_name_25 );
            Py_DECREF( tmp_args_element_name_34 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 118;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_35 = LOOKUP_ATTRIBUTE( tmp_source_name_31, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_called_name_22 );
        Py_DECREF( tmp_called_name_23 );
        Py_DECREF( tmp_kw_name_6 );
        Py_DECREF( tmp_called_name_25 );
        Py_DECREF( tmp_args_element_name_34 );

        exception_lineno = 118;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_36 = const_int_pos_8;
    frame_function->f_lineno = 118;
    tmp_dict_value_6 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_25, tmp_args_element_name_34, tmp_args_element_name_35, tmp_args_element_name_36 );
    Py_DECREF( tmp_called_name_25 );
    Py_DECREF( tmp_args_element_name_34 );
    Py_DECREF( tmp_args_element_name_35 );
    if ( tmp_dict_value_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_called_name_22 );
        Py_DECREF( tmp_called_name_23 );
        Py_DECREF( tmp_kw_name_6 );

        exception_lineno = 118;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_6 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_6, tmp_dict_key_6, tmp_dict_value_6 );
    Py_DECREF( tmp_dict_value_6 );
    frame_function->f_lineno = 118;
    tmp_args_element_name_33 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_23, tmp_kw_name_6 );
    Py_DECREF( tmp_called_name_23 );
    Py_DECREF( tmp_kw_name_6 );
    if ( tmp_args_element_name_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_called_name_22 );

        exception_lineno = 118;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 118;
    tmp_args_element_name_31 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_22, tmp_args_element_name_32, tmp_args_element_name_33 );
    Py_DECREF( tmp_called_name_22 );
    Py_DECREF( tmp_args_element_name_33 );
    if ( tmp_args_element_name_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );

        exception_lineno = 118;
        goto frame_exception_exit_1;
    }
    tmp_source_name_32 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_32 == NULL )
    {
        tmp_source_name_32 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_32 == NULL ))
        {
            tmp_source_name_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_32 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 119;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_26 = LOOKUP_ATTRIBUTE( tmp_source_name_32, const_str_plain_NamedType );
    if ( tmp_called_name_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );

        exception_lineno = 119;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_38 = const_str_plain_extensibleMatch;
    tmp_called_name_28 = PyDict_GetItem( locals_dict, const_str_plain_MatchingRuleAssertion );

    if ( tmp_called_name_28 == NULL )
    {
        tmp_called_name_28 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_MatchingRuleAssertion );

        if (unlikely( tmp_called_name_28 == NULL ))
        {
            tmp_called_name_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MatchingRuleAssertion );
        }

        if ( tmp_called_name_28 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_called_name_26 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53037 ], 43, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 119;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 119;
    tmp_source_name_33 = CALL_FUNCTION_NO_ARGS( tmp_called_name_28 );
    if ( tmp_source_name_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_called_name_26 );

        exception_lineno = 119;
        goto frame_exception_exit_1;
    }
    tmp_called_name_27 = LOOKUP_ATTRIBUTE( tmp_source_name_33, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_33 );
    if ( tmp_called_name_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_called_name_26 );

        exception_lineno = 119;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_7 = _PyDict_NewPresized( 1 );
    tmp_source_name_34 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_34 == NULL )
    {
        tmp_source_name_34 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_34 == NULL ))
        {
            tmp_source_name_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_34 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_called_name_26 );
            Py_DECREF( tmp_called_name_27 );
            Py_DECREF( tmp_kw_name_7 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 119;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_29 = LOOKUP_ATTRIBUTE( tmp_source_name_34, const_str_plain_Tag );
    if ( tmp_called_name_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_called_name_26 );
        Py_DECREF( tmp_called_name_27 );
        Py_DECREF( tmp_kw_name_7 );

        exception_lineno = 119;
        goto frame_exception_exit_1;
    }
    tmp_source_name_35 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_35 == NULL )
    {
        tmp_source_name_35 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_35 == NULL ))
        {
            tmp_source_name_35 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_35 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_called_name_26 );
            Py_DECREF( tmp_called_name_27 );
            Py_DECREF( tmp_kw_name_7 );
            Py_DECREF( tmp_called_name_29 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 119;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_40 = LOOKUP_ATTRIBUTE( tmp_source_name_35, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_called_name_26 );
        Py_DECREF( tmp_called_name_27 );
        Py_DECREF( tmp_kw_name_7 );
        Py_DECREF( tmp_called_name_29 );

        exception_lineno = 119;
        goto frame_exception_exit_1;
    }
    tmp_source_name_36 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_36 == NULL )
    {
        tmp_source_name_36 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_36 == NULL ))
        {
            tmp_source_name_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_36 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_called_name_26 );
            Py_DECREF( tmp_called_name_27 );
            Py_DECREF( tmp_kw_name_7 );
            Py_DECREF( tmp_called_name_29 );
            Py_DECREF( tmp_args_element_name_40 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 119;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_41 = LOOKUP_ATTRIBUTE( tmp_source_name_36, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_called_name_26 );
        Py_DECREF( tmp_called_name_27 );
        Py_DECREF( tmp_kw_name_7 );
        Py_DECREF( tmp_called_name_29 );
        Py_DECREF( tmp_args_element_name_40 );

        exception_lineno = 119;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_42 = const_int_pos_9;
    frame_function->f_lineno = 119;
    tmp_dict_value_7 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_29, tmp_args_element_name_40, tmp_args_element_name_41, tmp_args_element_name_42 );
    Py_DECREF( tmp_called_name_29 );
    Py_DECREF( tmp_args_element_name_40 );
    Py_DECREF( tmp_args_element_name_41 );
    if ( tmp_dict_value_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_called_name_26 );
        Py_DECREF( tmp_called_name_27 );
        Py_DECREF( tmp_kw_name_7 );

        exception_lineno = 119;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_7 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_7, tmp_dict_key_7, tmp_dict_value_7 );
    Py_DECREF( tmp_dict_value_7 );
    frame_function->f_lineno = 119;
    tmp_args_element_name_39 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_27, tmp_kw_name_7 );
    Py_DECREF( tmp_called_name_27 );
    Py_DECREF( tmp_kw_name_7 );
    if ( tmp_args_element_name_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_called_name_26 );

        exception_lineno = 119;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 119;
    tmp_args_element_name_37 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_26, tmp_args_element_name_38, tmp_args_element_name_39 );
    Py_DECREF( tmp_called_name_26 );
    Py_DECREF( tmp_args_element_name_39 );
    if ( tmp_args_element_name_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );

        exception_lineno = 119;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 119;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS7( tmp_called_name_1, tmp_args_element_name_1, tmp_args_element_name_7, tmp_args_element_name_13, tmp_args_element_name_19, tmp_args_element_name_25, tmp_args_element_name_31, tmp_args_element_name_37 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    Py_DECREF( tmp_args_element_name_7 );
    Py_DECREF( tmp_args_element_name_13 );
    Py_DECREF( tmp_args_element_name_19 );
    Py_DECREF( tmp_args_element_name_25 );
    Py_DECREF( tmp_args_element_name_31 );
    Py_DECREF( tmp_args_element_name_37 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 119;
        goto frame_exception_exit_1;
    }
    assert( var_componentType == NULL );
    var_componentType = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 111;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 111;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 111;
                goto frame_exception_exit_1;
            }
            }
            if ( var_componentType != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_componentType,
                    var_componentType
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 111;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_30 = closure_pyasn1_modules$rfc2251_class_creation_24__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_Filter3;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_24__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_componentType != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_componentType,
            var_componentType
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_8 = closure_pyasn1_modules$rfc2251_class_creation_24__class_decl_dict;

    tmp_assign_source_4 = CALL_FUNCTION( tmp_called_name_30, tmp_args_name_1, tmp_kw_name_8 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_4;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_24_Filter3_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_24_Filter3_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_25_Filter2_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_25__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_25__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_25__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_25__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_componentType = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_args_element_name_20;
    PyObject *tmp_args_element_name_21;
    PyObject *tmp_args_element_name_22;
    PyObject *tmp_args_element_name_23;
    PyObject *tmp_args_element_name_24;
    PyObject *tmp_args_element_name_25;
    PyObject *tmp_args_element_name_26;
    PyObject *tmp_args_element_name_27;
    PyObject *tmp_args_element_name_28;
    PyObject *tmp_args_element_name_29;
    PyObject *tmp_args_element_name_30;
    PyObject *tmp_args_element_name_31;
    PyObject *tmp_args_element_name_32;
    PyObject *tmp_args_element_name_33;
    PyObject *tmp_args_element_name_34;
    PyObject *tmp_args_element_name_35;
    PyObject *tmp_args_element_name_36;
    PyObject *tmp_args_element_name_37;
    PyObject *tmp_args_element_name_38;
    PyObject *tmp_args_element_name_39;
    PyObject *tmp_args_element_name_40;
    PyObject *tmp_args_element_name_41;
    PyObject *tmp_args_element_name_42;
    PyObject *tmp_args_element_name_43;
    PyObject *tmp_args_element_name_44;
    PyObject *tmp_args_element_name_45;
    PyObject *tmp_args_element_name_46;
    PyObject *tmp_args_element_name_47;
    PyObject *tmp_args_element_name_48;
    PyObject *tmp_args_element_name_49;
    PyObject *tmp_args_element_name_50;
    PyObject *tmp_args_element_name_51;
    PyObject *tmp_args_element_name_52;
    PyObject *tmp_args_element_name_53;
    PyObject *tmp_args_element_name_54;
    PyObject *tmp_args_element_name_55;
    PyObject *tmp_args_element_name_56;
    PyObject *tmp_args_element_name_57;
    PyObject *tmp_args_element_name_58;
    PyObject *tmp_args_element_name_59;
    PyObject *tmp_args_element_name_60;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_called_name_16;
    PyObject *tmp_called_name_17;
    PyObject *tmp_called_name_18;
    PyObject *tmp_called_name_19;
    PyObject *tmp_called_name_20;
    PyObject *tmp_called_name_21;
    PyObject *tmp_called_name_22;
    PyObject *tmp_called_name_23;
    PyObject *tmp_called_name_24;
    PyObject *tmp_called_name_25;
    PyObject *tmp_called_name_26;
    PyObject *tmp_called_name_27;
    PyObject *tmp_called_name_28;
    PyObject *tmp_called_name_29;
    PyObject *tmp_called_name_30;
    PyObject *tmp_called_name_31;
    PyObject *tmp_called_name_32;
    PyObject *tmp_called_name_33;
    PyObject *tmp_called_name_34;
    PyObject *tmp_called_name_35;
    PyObject *tmp_called_name_36;
    PyObject *tmp_called_name_37;
    PyObject *tmp_called_name_38;
    PyObject *tmp_called_name_39;
    PyObject *tmp_called_name_40;
    PyObject *tmp_called_name_41;
    PyObject *tmp_called_name_42;
    PyObject *tmp_called_name_43;
    PyObject *tmp_called_name_44;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_key_7;
    PyObject *tmp_dict_key_8;
    PyObject *tmp_dict_key_9;
    PyObject *tmp_dict_key_10;
    PyObject *tmp_dict_key_11;
    PyObject *tmp_dict_key_12;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_dict_value_7;
    PyObject *tmp_dict_value_8;
    PyObject *tmp_dict_value_9;
    PyObject *tmp_dict_value_10;
    PyObject *tmp_dict_value_11;
    PyObject *tmp_dict_value_12;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    PyObject *tmp_kw_name_3;
    PyObject *tmp_kw_name_4;
    PyObject *tmp_kw_name_5;
    PyObject *tmp_kw_name_6;
    PyObject *tmp_kw_name_7;
    PyObject *tmp_kw_name_8;
    PyObject *tmp_kw_name_9;
    PyObject *tmp_kw_name_10;
    PyObject *tmp_kw_name_11;
    PyObject *tmp_kw_name_12;
    PyObject *tmp_kw_name_13;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_source_name_22;
    PyObject *tmp_source_name_23;
    PyObject *tmp_source_name_24;
    PyObject *tmp_source_name_25;
    PyObject *tmp_source_name_26;
    PyObject *tmp_source_name_27;
    PyObject *tmp_source_name_28;
    PyObject *tmp_source_name_29;
    PyObject *tmp_source_name_30;
    PyObject *tmp_source_name_31;
    PyObject *tmp_source_name_32;
    PyObject *tmp_source_name_33;
    PyObject *tmp_source_name_34;
    PyObject *tmp_source_name_35;
    PyObject *tmp_source_name_36;
    PyObject *tmp_source_name_37;
    PyObject *tmp_source_name_38;
    PyObject *tmp_source_name_39;
    PyObject *tmp_source_name_40;
    PyObject *tmp_source_name_41;
    PyObject *tmp_source_name_42;
    PyObject *tmp_source_name_43;
    PyObject *tmp_source_name_44;
    PyObject *tmp_source_name_45;
    PyObject *tmp_source_name_46;
    PyObject *tmp_source_name_47;
    PyObject *tmp_source_name_48;
    PyObject *tmp_source_name_49;
    PyObject *tmp_source_name_50;
    PyObject *tmp_source_name_51;
    PyObject *tmp_source_name_52;
    PyObject *tmp_source_name_53;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_25__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_Filter2;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_08ba46efb96ae52858a8aa41f9fffca3, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_1 == NULL )
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_1 == NULL ))
        {
            tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 123;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_NamedTypes );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 123;
        goto frame_exception_exit_1;
    }
    tmp_source_name_2 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_2 == NULL )
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_2 == NULL ))
        {
            tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_2 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 124;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_NamedType );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 124;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = const_str_plain_and;
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 124;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_SetOf );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 124;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_called_name_5 = PyDict_GetItem( locals_dict, const_str_plain_Filter3 );

    if ( tmp_called_name_5 == NULL )
    {
        tmp_called_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_Filter3 );

        if (unlikely( tmp_called_name_5 == NULL ))
        {
            tmp_called_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Filter3 );
        }

        if ( tmp_called_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_kw_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53080 ], 29, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 124;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 124;
    tmp_dict_value_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_5 );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 124;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_1 = const_str_plain_componentType;
    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    frame_function->f_lineno = 124;
    tmp_source_name_3 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_4, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_source_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 124;
        goto frame_exception_exit_1;
    }
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_3 );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 124;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_2 = _PyDict_NewPresized( 1 );
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_kw_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 124;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_Tag );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_kw_name_2 );

        exception_lineno = 124;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_6 == NULL )
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_6 == NULL ))
        {
            tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_6 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 124;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_6 );

        exception_lineno = 124;
        goto frame_exception_exit_1;
    }
    tmp_source_name_7 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_7 == NULL )
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_7 == NULL ))
        {
            tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_7 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 124;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_4 );

        exception_lineno = 124;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_6 = const_int_0;
    frame_function->f_lineno = 124;
    tmp_dict_value_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_6, tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6 );
    Py_DECREF( tmp_called_name_6 );
    Py_DECREF( tmp_args_element_name_4 );
    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_dict_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_kw_name_2 );

        exception_lineno = 124;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_2 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
    Py_DECREF( tmp_dict_value_2 );
    frame_function->f_lineno = 124;
    tmp_args_element_name_3 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_3, tmp_kw_name_2 );
    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 124;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 124;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 124;
        goto frame_exception_exit_1;
    }
    tmp_source_name_8 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_8 == NULL )
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_8 == NULL ))
        {
            tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_8 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 125;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_NamedType );
    if ( tmp_called_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 125;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_8 = const_str_plain_or;
    tmp_source_name_10 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_10 == NULL )
    {
        tmp_source_name_10 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_10 == NULL ))
        {
            tmp_source_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_10 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_7 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 125;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_SetOf );
    if ( tmp_called_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_7 );

        exception_lineno = 125;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_3 = _PyDict_NewPresized( 1 );
    tmp_called_name_10 = PyDict_GetItem( locals_dict, const_str_plain_Filter3 );

    if ( tmp_called_name_10 == NULL )
    {
        tmp_called_name_10 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_Filter3 );

        if (unlikely( tmp_called_name_10 == NULL ))
        {
            tmp_called_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Filter3 );
        }

        if ( tmp_called_name_10 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_called_name_9 );
            Py_DECREF( tmp_kw_name_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53080 ], 29, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 125;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 125;
    tmp_dict_value_3 = CALL_FUNCTION_NO_ARGS( tmp_called_name_10 );
    if ( tmp_dict_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_kw_name_3 );

        exception_lineno = 125;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_3 = const_str_plain_componentType;
    PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_3, tmp_dict_value_3 );
    Py_DECREF( tmp_dict_value_3 );
    frame_function->f_lineno = 125;
    tmp_source_name_9 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_9, tmp_kw_name_3 );
    Py_DECREF( tmp_called_name_9 );
    Py_DECREF( tmp_kw_name_3 );
    if ( tmp_source_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_7 );

        exception_lineno = 125;
        goto frame_exception_exit_1;
    }
    tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_9 );
    if ( tmp_called_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_7 );

        exception_lineno = 125;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_4 = _PyDict_NewPresized( 1 );
    tmp_source_name_11 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_11 == NULL )
    {
        tmp_source_name_11 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_11 == NULL ))
        {
            tmp_source_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_11 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_called_name_8 );
            Py_DECREF( tmp_kw_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 125;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_Tag );
    if ( tmp_called_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_kw_name_4 );

        exception_lineno = 125;
        goto frame_exception_exit_1;
    }
    tmp_source_name_12 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_12 == NULL )
    {
        tmp_source_name_12 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_12 == NULL ))
        {
            tmp_source_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_12 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_called_name_8 );
            Py_DECREF( tmp_kw_name_4 );
            Py_DECREF( tmp_called_name_11 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 125;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_kw_name_4 );
        Py_DECREF( tmp_called_name_11 );

        exception_lineno = 125;
        goto frame_exception_exit_1;
    }
    tmp_source_name_13 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_13 == NULL )
    {
        tmp_source_name_13 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_13 == NULL ))
        {
            tmp_source_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_13 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_called_name_8 );
            Py_DECREF( tmp_kw_name_4 );
            Py_DECREF( tmp_called_name_11 );
            Py_DECREF( tmp_args_element_name_10 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 125;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_kw_name_4 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_args_element_name_10 );

        exception_lineno = 125;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_12 = const_int_pos_1;
    frame_function->f_lineno = 125;
    tmp_dict_value_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_11, tmp_args_element_name_10, tmp_args_element_name_11, tmp_args_element_name_12 );
    Py_DECREF( tmp_called_name_11 );
    Py_DECREF( tmp_args_element_name_10 );
    Py_DECREF( tmp_args_element_name_11 );
    if ( tmp_dict_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_kw_name_4 );

        exception_lineno = 125;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_4 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_4, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    frame_function->f_lineno = 125;
    tmp_args_element_name_9 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_8, tmp_kw_name_4 );
    Py_DECREF( tmp_called_name_8 );
    Py_DECREF( tmp_kw_name_4 );
    if ( tmp_args_element_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_7 );

        exception_lineno = 125;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 125;
    tmp_args_element_name_7 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_7, tmp_args_element_name_8, tmp_args_element_name_9 );
    Py_DECREF( tmp_called_name_7 );
    Py_DECREF( tmp_args_element_name_9 );
    if ( tmp_args_element_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 125;
        goto frame_exception_exit_1;
    }
    tmp_source_name_14 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_14 == NULL )
    {
        tmp_source_name_14 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_14 == NULL ))
        {
            tmp_source_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_14 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 126;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_NamedType );
    if ( tmp_called_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );

        exception_lineno = 126;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_14 = const_str_plain_not;
    tmp_called_name_14 = PyDict_GetItem( locals_dict, const_str_plain_Filter3 );

    if ( tmp_called_name_14 == NULL )
    {
        tmp_called_name_14 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_Filter3 );

        if (unlikely( tmp_called_name_14 == NULL ))
        {
            tmp_called_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Filter3 );
        }

        if ( tmp_called_name_14 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_called_name_12 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53080 ], 29, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 126;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 126;
    tmp_source_name_15 = CALL_FUNCTION_NO_ARGS( tmp_called_name_14 );
    if ( tmp_source_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_12 );

        exception_lineno = 126;
        goto frame_exception_exit_1;
    }
    tmp_called_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_15 );
    if ( tmp_called_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_12 );

        exception_lineno = 126;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_5 = _PyDict_NewPresized( 1 );
    tmp_source_name_16 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_16 == NULL )
    {
        tmp_source_name_16 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_16 == NULL ))
        {
            tmp_source_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_16 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_called_name_12 );
            Py_DECREF( tmp_called_name_13 );
            Py_DECREF( tmp_kw_name_5 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 126;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_Tag );
    if ( tmp_called_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_kw_name_5 );

        exception_lineno = 126;
        goto frame_exception_exit_1;
    }
    tmp_source_name_17 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_17 == NULL )
    {
        tmp_source_name_17 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_17 == NULL ))
        {
            tmp_source_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_17 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_called_name_12 );
            Py_DECREF( tmp_called_name_13 );
            Py_DECREF( tmp_kw_name_5 );
            Py_DECREF( tmp_called_name_15 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 126;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_16 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_kw_name_5 );
        Py_DECREF( tmp_called_name_15 );

        exception_lineno = 126;
        goto frame_exception_exit_1;
    }
    tmp_source_name_18 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_18 == NULL )
    {
        tmp_source_name_18 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_18 == NULL ))
        {
            tmp_source_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_18 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_called_name_12 );
            Py_DECREF( tmp_called_name_13 );
            Py_DECREF( tmp_kw_name_5 );
            Py_DECREF( tmp_called_name_15 );
            Py_DECREF( tmp_args_element_name_16 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 126;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_kw_name_5 );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_args_element_name_16 );

        exception_lineno = 126;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_18 = const_int_pos_2;
    frame_function->f_lineno = 126;
    tmp_dict_value_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_15, tmp_args_element_name_16, tmp_args_element_name_17, tmp_args_element_name_18 );
    Py_DECREF( tmp_called_name_15 );
    Py_DECREF( tmp_args_element_name_16 );
    Py_DECREF( tmp_args_element_name_17 );
    if ( tmp_dict_value_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_kw_name_5 );

        exception_lineno = 126;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_5 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_5, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    frame_function->f_lineno = 126;
    tmp_args_element_name_15 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_13, tmp_kw_name_5 );
    Py_DECREF( tmp_called_name_13 );
    Py_DECREF( tmp_kw_name_5 );
    if ( tmp_args_element_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_12 );

        exception_lineno = 126;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 126;
    tmp_args_element_name_13 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_12, tmp_args_element_name_14, tmp_args_element_name_15 );
    Py_DECREF( tmp_called_name_12 );
    Py_DECREF( tmp_args_element_name_15 );
    if ( tmp_args_element_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );

        exception_lineno = 126;
        goto frame_exception_exit_1;
    }
    tmp_source_name_19 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_19 == NULL )
    {
        tmp_source_name_19 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_19 == NULL ))
        {
            tmp_source_name_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_19 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 127;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_16 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_NamedType );
    if ( tmp_called_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );

        exception_lineno = 127;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_20 = const_str_plain_equalityMatch;
    tmp_called_name_18 = PyDict_GetItem( locals_dict, const_str_plain_AttributeValueAssertion );

    if ( tmp_called_name_18 == NULL )
    {
        tmp_called_name_18 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeValueAssertion );

        if (unlikely( tmp_called_name_18 == NULL ))
        {
            tmp_called_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeValueAssertion );
        }

        if ( tmp_called_name_18 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_called_name_16 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52955 ], 45, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 127;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 127;
    tmp_source_name_20 = CALL_FUNCTION_NO_ARGS( tmp_called_name_18 );
    if ( tmp_source_name_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_16 );

        exception_lineno = 127;
        goto frame_exception_exit_1;
    }
    tmp_called_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_20 );
    if ( tmp_called_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_16 );

        exception_lineno = 127;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_6 = _PyDict_NewPresized( 1 );
    tmp_source_name_21 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_21 == NULL )
    {
        tmp_source_name_21 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_21 == NULL ))
        {
            tmp_source_name_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_21 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_called_name_16 );
            Py_DECREF( tmp_called_name_17 );
            Py_DECREF( tmp_kw_name_6 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 127;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_19 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_Tag );
    if ( tmp_called_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_kw_name_6 );

        exception_lineno = 127;
        goto frame_exception_exit_1;
    }
    tmp_source_name_22 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_22 == NULL )
    {
        tmp_source_name_22 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_22 == NULL ))
        {
            tmp_source_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_22 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_called_name_16 );
            Py_DECREF( tmp_called_name_17 );
            Py_DECREF( tmp_kw_name_6 );
            Py_DECREF( tmp_called_name_19 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 127;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_22 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_kw_name_6 );
        Py_DECREF( tmp_called_name_19 );

        exception_lineno = 127;
        goto frame_exception_exit_1;
    }
    tmp_source_name_23 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_23 == NULL )
    {
        tmp_source_name_23 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_23 == NULL ))
        {
            tmp_source_name_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_23 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_called_name_16 );
            Py_DECREF( tmp_called_name_17 );
            Py_DECREF( tmp_kw_name_6 );
            Py_DECREF( tmp_called_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 127;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_23 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_kw_name_6 );
        Py_DECREF( tmp_called_name_19 );
        Py_DECREF( tmp_args_element_name_22 );

        exception_lineno = 127;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_24 = const_int_pos_3;
    frame_function->f_lineno = 127;
    tmp_dict_value_6 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_19, tmp_args_element_name_22, tmp_args_element_name_23, tmp_args_element_name_24 );
    Py_DECREF( tmp_called_name_19 );
    Py_DECREF( tmp_args_element_name_22 );
    Py_DECREF( tmp_args_element_name_23 );
    if ( tmp_dict_value_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_kw_name_6 );

        exception_lineno = 127;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_6 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_6, tmp_dict_key_6, tmp_dict_value_6 );
    Py_DECREF( tmp_dict_value_6 );
    frame_function->f_lineno = 127;
    tmp_args_element_name_21 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_17, tmp_kw_name_6 );
    Py_DECREF( tmp_called_name_17 );
    Py_DECREF( tmp_kw_name_6 );
    if ( tmp_args_element_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_16 );

        exception_lineno = 127;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 127;
    tmp_args_element_name_19 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_16, tmp_args_element_name_20, tmp_args_element_name_21 );
    Py_DECREF( tmp_called_name_16 );
    Py_DECREF( tmp_args_element_name_21 );
    if ( tmp_args_element_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );

        exception_lineno = 127;
        goto frame_exception_exit_1;
    }
    tmp_source_name_24 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_24 == NULL )
    {
        tmp_source_name_24 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_24 == NULL ))
        {
            tmp_source_name_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_24 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 128;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_20 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_NamedType );
    if ( tmp_called_name_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );

        exception_lineno = 128;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_26 = const_str_plain_substrings;
    tmp_called_name_22 = PyDict_GetItem( locals_dict, const_str_plain_SubstringFilter );

    if ( tmp_called_name_22 == NULL )
    {
        tmp_called_name_22 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_SubstringFilter );

        if (unlikely( tmp_called_name_22 == NULL ))
        {
            tmp_called_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SubstringFilter );
        }

        if ( tmp_called_name_22 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_called_name_20 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53000 ], 37, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 128;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 128;
    tmp_source_name_25 = CALL_FUNCTION_NO_ARGS( tmp_called_name_22 );
    if ( tmp_source_name_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_called_name_20 );

        exception_lineno = 128;
        goto frame_exception_exit_1;
    }
    tmp_called_name_21 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_25 );
    if ( tmp_called_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_called_name_20 );

        exception_lineno = 128;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_7 = _PyDict_NewPresized( 1 );
    tmp_source_name_26 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_26 == NULL )
    {
        tmp_source_name_26 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_26 == NULL ))
        {
            tmp_source_name_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_26 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_called_name_20 );
            Py_DECREF( tmp_called_name_21 );
            Py_DECREF( tmp_kw_name_7 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 128;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_23 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain_Tag );
    if ( tmp_called_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_called_name_20 );
        Py_DECREF( tmp_called_name_21 );
        Py_DECREF( tmp_kw_name_7 );

        exception_lineno = 128;
        goto frame_exception_exit_1;
    }
    tmp_source_name_27 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_27 == NULL )
    {
        tmp_source_name_27 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_27 == NULL ))
        {
            tmp_source_name_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_27 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_called_name_20 );
            Py_DECREF( tmp_called_name_21 );
            Py_DECREF( tmp_kw_name_7 );
            Py_DECREF( tmp_called_name_23 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 128;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_28 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_called_name_20 );
        Py_DECREF( tmp_called_name_21 );
        Py_DECREF( tmp_kw_name_7 );
        Py_DECREF( tmp_called_name_23 );

        exception_lineno = 128;
        goto frame_exception_exit_1;
    }
    tmp_source_name_28 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_28 == NULL )
    {
        tmp_source_name_28 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_28 == NULL ))
        {
            tmp_source_name_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_28 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_called_name_20 );
            Py_DECREF( tmp_called_name_21 );
            Py_DECREF( tmp_kw_name_7 );
            Py_DECREF( tmp_called_name_23 );
            Py_DECREF( tmp_args_element_name_28 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 128;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_29 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_called_name_20 );
        Py_DECREF( tmp_called_name_21 );
        Py_DECREF( tmp_kw_name_7 );
        Py_DECREF( tmp_called_name_23 );
        Py_DECREF( tmp_args_element_name_28 );

        exception_lineno = 128;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_30 = const_int_pos_4;
    frame_function->f_lineno = 128;
    tmp_dict_value_7 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_23, tmp_args_element_name_28, tmp_args_element_name_29, tmp_args_element_name_30 );
    Py_DECREF( tmp_called_name_23 );
    Py_DECREF( tmp_args_element_name_28 );
    Py_DECREF( tmp_args_element_name_29 );
    if ( tmp_dict_value_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_called_name_20 );
        Py_DECREF( tmp_called_name_21 );
        Py_DECREF( tmp_kw_name_7 );

        exception_lineno = 128;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_7 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_7, tmp_dict_key_7, tmp_dict_value_7 );
    Py_DECREF( tmp_dict_value_7 );
    frame_function->f_lineno = 128;
    tmp_args_element_name_27 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_21, tmp_kw_name_7 );
    Py_DECREF( tmp_called_name_21 );
    Py_DECREF( tmp_kw_name_7 );
    if ( tmp_args_element_name_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_called_name_20 );

        exception_lineno = 128;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 128;
    tmp_args_element_name_25 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_20, tmp_args_element_name_26, tmp_args_element_name_27 );
    Py_DECREF( tmp_called_name_20 );
    Py_DECREF( tmp_args_element_name_27 );
    if ( tmp_args_element_name_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );

        exception_lineno = 128;
        goto frame_exception_exit_1;
    }
    tmp_source_name_29 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_29 == NULL )
    {
        tmp_source_name_29 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_29 == NULL ))
        {
            tmp_source_name_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_29 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 129;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_24 = LOOKUP_ATTRIBUTE( tmp_source_name_29, const_str_plain_NamedType );
    if ( tmp_called_name_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );

        exception_lineno = 129;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_32 = const_str_plain_greaterOrEqual;
    tmp_called_name_26 = PyDict_GetItem( locals_dict, const_str_plain_AttributeValueAssertion );

    if ( tmp_called_name_26 == NULL )
    {
        tmp_called_name_26 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeValueAssertion );

        if (unlikely( tmp_called_name_26 == NULL ))
        {
            tmp_called_name_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeValueAssertion );
        }

        if ( tmp_called_name_26 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_called_name_24 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52955 ], 45, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 129;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 129;
    tmp_source_name_30 = CALL_FUNCTION_NO_ARGS( tmp_called_name_26 );
    if ( tmp_source_name_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_called_name_24 );

        exception_lineno = 129;
        goto frame_exception_exit_1;
    }
    tmp_called_name_25 = LOOKUP_ATTRIBUTE( tmp_source_name_30, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_30 );
    if ( tmp_called_name_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_called_name_24 );

        exception_lineno = 129;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_8 = _PyDict_NewPresized( 1 );
    tmp_source_name_31 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_31 == NULL )
    {
        tmp_source_name_31 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_31 == NULL ))
        {
            tmp_source_name_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_31 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_called_name_24 );
            Py_DECREF( tmp_called_name_25 );
            Py_DECREF( tmp_kw_name_8 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 129;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_27 = LOOKUP_ATTRIBUTE( tmp_source_name_31, const_str_plain_Tag );
    if ( tmp_called_name_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_called_name_24 );
        Py_DECREF( tmp_called_name_25 );
        Py_DECREF( tmp_kw_name_8 );

        exception_lineno = 129;
        goto frame_exception_exit_1;
    }
    tmp_source_name_32 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_32 == NULL )
    {
        tmp_source_name_32 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_32 == NULL ))
        {
            tmp_source_name_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_32 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_called_name_24 );
            Py_DECREF( tmp_called_name_25 );
            Py_DECREF( tmp_kw_name_8 );
            Py_DECREF( tmp_called_name_27 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 129;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_34 = LOOKUP_ATTRIBUTE( tmp_source_name_32, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_called_name_24 );
        Py_DECREF( tmp_called_name_25 );
        Py_DECREF( tmp_kw_name_8 );
        Py_DECREF( tmp_called_name_27 );

        exception_lineno = 129;
        goto frame_exception_exit_1;
    }
    tmp_source_name_33 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_33 == NULL )
    {
        tmp_source_name_33 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_33 == NULL ))
        {
            tmp_source_name_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_33 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_called_name_24 );
            Py_DECREF( tmp_called_name_25 );
            Py_DECREF( tmp_kw_name_8 );
            Py_DECREF( tmp_called_name_27 );
            Py_DECREF( tmp_args_element_name_34 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 129;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_35 = LOOKUP_ATTRIBUTE( tmp_source_name_33, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_called_name_24 );
        Py_DECREF( tmp_called_name_25 );
        Py_DECREF( tmp_kw_name_8 );
        Py_DECREF( tmp_called_name_27 );
        Py_DECREF( tmp_args_element_name_34 );

        exception_lineno = 129;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_36 = const_int_pos_5;
    frame_function->f_lineno = 129;
    tmp_dict_value_8 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_27, tmp_args_element_name_34, tmp_args_element_name_35, tmp_args_element_name_36 );
    Py_DECREF( tmp_called_name_27 );
    Py_DECREF( tmp_args_element_name_34 );
    Py_DECREF( tmp_args_element_name_35 );
    if ( tmp_dict_value_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_called_name_24 );
        Py_DECREF( tmp_called_name_25 );
        Py_DECREF( tmp_kw_name_8 );

        exception_lineno = 129;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_8 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_8, tmp_dict_key_8, tmp_dict_value_8 );
    Py_DECREF( tmp_dict_value_8 );
    frame_function->f_lineno = 129;
    tmp_args_element_name_33 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_25, tmp_kw_name_8 );
    Py_DECREF( tmp_called_name_25 );
    Py_DECREF( tmp_kw_name_8 );
    if ( tmp_args_element_name_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_called_name_24 );

        exception_lineno = 129;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 129;
    tmp_args_element_name_31 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_24, tmp_args_element_name_32, tmp_args_element_name_33 );
    Py_DECREF( tmp_called_name_24 );
    Py_DECREF( tmp_args_element_name_33 );
    if ( tmp_args_element_name_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );

        exception_lineno = 129;
        goto frame_exception_exit_1;
    }
    tmp_source_name_34 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_34 == NULL )
    {
        tmp_source_name_34 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_34 == NULL ))
        {
            tmp_source_name_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_34 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 130;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_28 = LOOKUP_ATTRIBUTE( tmp_source_name_34, const_str_plain_NamedType );
    if ( tmp_called_name_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );

        exception_lineno = 130;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_38 = const_str_plain_lessOrEqual;
    tmp_called_name_30 = PyDict_GetItem( locals_dict, const_str_plain_AttributeValueAssertion );

    if ( tmp_called_name_30 == NULL )
    {
        tmp_called_name_30 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeValueAssertion );

        if (unlikely( tmp_called_name_30 == NULL ))
        {
            tmp_called_name_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeValueAssertion );
        }

        if ( tmp_called_name_30 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_called_name_28 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52955 ], 45, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 130;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 130;
    tmp_source_name_35 = CALL_FUNCTION_NO_ARGS( tmp_called_name_30 );
    if ( tmp_source_name_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_called_name_28 );

        exception_lineno = 130;
        goto frame_exception_exit_1;
    }
    tmp_called_name_29 = LOOKUP_ATTRIBUTE( tmp_source_name_35, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_35 );
    if ( tmp_called_name_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_called_name_28 );

        exception_lineno = 130;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_9 = _PyDict_NewPresized( 1 );
    tmp_source_name_36 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_36 == NULL )
    {
        tmp_source_name_36 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_36 == NULL ))
        {
            tmp_source_name_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_36 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_called_name_28 );
            Py_DECREF( tmp_called_name_29 );
            Py_DECREF( tmp_kw_name_9 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 130;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_31 = LOOKUP_ATTRIBUTE( tmp_source_name_36, const_str_plain_Tag );
    if ( tmp_called_name_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_called_name_28 );
        Py_DECREF( tmp_called_name_29 );
        Py_DECREF( tmp_kw_name_9 );

        exception_lineno = 130;
        goto frame_exception_exit_1;
    }
    tmp_source_name_37 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_37 == NULL )
    {
        tmp_source_name_37 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_37 == NULL ))
        {
            tmp_source_name_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_37 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_called_name_28 );
            Py_DECREF( tmp_called_name_29 );
            Py_DECREF( tmp_kw_name_9 );
            Py_DECREF( tmp_called_name_31 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 130;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_40 = LOOKUP_ATTRIBUTE( tmp_source_name_37, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_called_name_28 );
        Py_DECREF( tmp_called_name_29 );
        Py_DECREF( tmp_kw_name_9 );
        Py_DECREF( tmp_called_name_31 );

        exception_lineno = 130;
        goto frame_exception_exit_1;
    }
    tmp_source_name_38 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_38 == NULL )
    {
        tmp_source_name_38 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_38 == NULL ))
        {
            tmp_source_name_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_38 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_called_name_28 );
            Py_DECREF( tmp_called_name_29 );
            Py_DECREF( tmp_kw_name_9 );
            Py_DECREF( tmp_called_name_31 );
            Py_DECREF( tmp_args_element_name_40 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 130;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_41 = LOOKUP_ATTRIBUTE( tmp_source_name_38, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_called_name_28 );
        Py_DECREF( tmp_called_name_29 );
        Py_DECREF( tmp_kw_name_9 );
        Py_DECREF( tmp_called_name_31 );
        Py_DECREF( tmp_args_element_name_40 );

        exception_lineno = 130;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_42 = const_int_pos_6;
    frame_function->f_lineno = 130;
    tmp_dict_value_9 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_31, tmp_args_element_name_40, tmp_args_element_name_41, tmp_args_element_name_42 );
    Py_DECREF( tmp_called_name_31 );
    Py_DECREF( tmp_args_element_name_40 );
    Py_DECREF( tmp_args_element_name_41 );
    if ( tmp_dict_value_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_called_name_28 );
        Py_DECREF( tmp_called_name_29 );
        Py_DECREF( tmp_kw_name_9 );

        exception_lineno = 130;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_9 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_9, tmp_dict_key_9, tmp_dict_value_9 );
    Py_DECREF( tmp_dict_value_9 );
    frame_function->f_lineno = 130;
    tmp_args_element_name_39 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_29, tmp_kw_name_9 );
    Py_DECREF( tmp_called_name_29 );
    Py_DECREF( tmp_kw_name_9 );
    if ( tmp_args_element_name_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_called_name_28 );

        exception_lineno = 130;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 130;
    tmp_args_element_name_37 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_28, tmp_args_element_name_38, tmp_args_element_name_39 );
    Py_DECREF( tmp_called_name_28 );
    Py_DECREF( tmp_args_element_name_39 );
    if ( tmp_args_element_name_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );

        exception_lineno = 130;
        goto frame_exception_exit_1;
    }
    tmp_source_name_39 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_39 == NULL )
    {
        tmp_source_name_39 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_39 == NULL ))
        {
            tmp_source_name_39 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_39 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 131;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_32 = LOOKUP_ATTRIBUTE( tmp_source_name_39, const_str_plain_NamedType );
    if ( tmp_called_name_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );

        exception_lineno = 131;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_44 = const_str_plain_present;
    tmp_called_name_34 = PyDict_GetItem( locals_dict, const_str_plain_AttributeDescription );

    if ( tmp_called_name_34 == NULL )
    {
        tmp_called_name_34 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeDescription );

        if (unlikely( tmp_called_name_34 == NULL ))
        {
            tmp_called_name_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeDescription );
        }

        if ( tmp_called_name_34 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_called_name_32 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52569 ], 42, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 131;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 131;
    tmp_source_name_40 = CALL_FUNCTION_NO_ARGS( tmp_called_name_34 );
    if ( tmp_source_name_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_called_name_32 );

        exception_lineno = 131;
        goto frame_exception_exit_1;
    }
    tmp_called_name_33 = LOOKUP_ATTRIBUTE( tmp_source_name_40, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_40 );
    if ( tmp_called_name_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_called_name_32 );

        exception_lineno = 131;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_10 = _PyDict_NewPresized( 1 );
    tmp_source_name_41 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_41 == NULL )
    {
        tmp_source_name_41 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_41 == NULL ))
        {
            tmp_source_name_41 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_41 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_called_name_32 );
            Py_DECREF( tmp_called_name_33 );
            Py_DECREF( tmp_kw_name_10 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 131;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_35 = LOOKUP_ATTRIBUTE( tmp_source_name_41, const_str_plain_Tag );
    if ( tmp_called_name_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_called_name_32 );
        Py_DECREF( tmp_called_name_33 );
        Py_DECREF( tmp_kw_name_10 );

        exception_lineno = 131;
        goto frame_exception_exit_1;
    }
    tmp_source_name_42 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_42 == NULL )
    {
        tmp_source_name_42 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_42 == NULL ))
        {
            tmp_source_name_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_42 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_called_name_32 );
            Py_DECREF( tmp_called_name_33 );
            Py_DECREF( tmp_kw_name_10 );
            Py_DECREF( tmp_called_name_35 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 131;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_46 = LOOKUP_ATTRIBUTE( tmp_source_name_42, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_called_name_32 );
        Py_DECREF( tmp_called_name_33 );
        Py_DECREF( tmp_kw_name_10 );
        Py_DECREF( tmp_called_name_35 );

        exception_lineno = 131;
        goto frame_exception_exit_1;
    }
    tmp_source_name_43 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_43 == NULL )
    {
        tmp_source_name_43 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_43 == NULL ))
        {
            tmp_source_name_43 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_43 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_called_name_32 );
            Py_DECREF( tmp_called_name_33 );
            Py_DECREF( tmp_kw_name_10 );
            Py_DECREF( tmp_called_name_35 );
            Py_DECREF( tmp_args_element_name_46 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 131;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_47 = LOOKUP_ATTRIBUTE( tmp_source_name_43, const_str_plain_tagFormatSimple );
    if ( tmp_args_element_name_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_called_name_32 );
        Py_DECREF( tmp_called_name_33 );
        Py_DECREF( tmp_kw_name_10 );
        Py_DECREF( tmp_called_name_35 );
        Py_DECREF( tmp_args_element_name_46 );

        exception_lineno = 131;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_48 = const_int_pos_7;
    frame_function->f_lineno = 131;
    tmp_dict_value_10 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_35, tmp_args_element_name_46, tmp_args_element_name_47, tmp_args_element_name_48 );
    Py_DECREF( tmp_called_name_35 );
    Py_DECREF( tmp_args_element_name_46 );
    Py_DECREF( tmp_args_element_name_47 );
    if ( tmp_dict_value_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_called_name_32 );
        Py_DECREF( tmp_called_name_33 );
        Py_DECREF( tmp_kw_name_10 );

        exception_lineno = 131;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_10 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_10, tmp_dict_key_10, tmp_dict_value_10 );
    Py_DECREF( tmp_dict_value_10 );
    frame_function->f_lineno = 131;
    tmp_args_element_name_45 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_33, tmp_kw_name_10 );
    Py_DECREF( tmp_called_name_33 );
    Py_DECREF( tmp_kw_name_10 );
    if ( tmp_args_element_name_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_called_name_32 );

        exception_lineno = 131;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 131;
    tmp_args_element_name_43 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_32, tmp_args_element_name_44, tmp_args_element_name_45 );
    Py_DECREF( tmp_called_name_32 );
    Py_DECREF( tmp_args_element_name_45 );
    if ( tmp_args_element_name_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );

        exception_lineno = 131;
        goto frame_exception_exit_1;
    }
    tmp_source_name_44 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_44 == NULL )
    {
        tmp_source_name_44 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_44 == NULL ))
        {
            tmp_source_name_44 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_44 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_43 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 132;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_36 = LOOKUP_ATTRIBUTE( tmp_source_name_44, const_str_plain_NamedType );
    if ( tmp_called_name_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );

        exception_lineno = 132;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_50 = const_str_plain_approxMatch;
    tmp_called_name_38 = PyDict_GetItem( locals_dict, const_str_plain_AttributeValueAssertion );

    if ( tmp_called_name_38 == NULL )
    {
        tmp_called_name_38 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeValueAssertion );

        if (unlikely( tmp_called_name_38 == NULL ))
        {
            tmp_called_name_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeValueAssertion );
        }

        if ( tmp_called_name_38 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_called_name_36 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52955 ], 45, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 132;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 132;
    tmp_source_name_45 = CALL_FUNCTION_NO_ARGS( tmp_called_name_38 );
    if ( tmp_source_name_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_called_name_36 );

        exception_lineno = 132;
        goto frame_exception_exit_1;
    }
    tmp_called_name_37 = LOOKUP_ATTRIBUTE( tmp_source_name_45, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_45 );
    if ( tmp_called_name_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_called_name_36 );

        exception_lineno = 132;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_11 = _PyDict_NewPresized( 1 );
    tmp_source_name_46 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_46 == NULL )
    {
        tmp_source_name_46 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_46 == NULL ))
        {
            tmp_source_name_46 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_46 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_called_name_36 );
            Py_DECREF( tmp_called_name_37 );
            Py_DECREF( tmp_kw_name_11 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 132;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_39 = LOOKUP_ATTRIBUTE( tmp_source_name_46, const_str_plain_Tag );
    if ( tmp_called_name_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_called_name_36 );
        Py_DECREF( tmp_called_name_37 );
        Py_DECREF( tmp_kw_name_11 );

        exception_lineno = 132;
        goto frame_exception_exit_1;
    }
    tmp_source_name_47 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_47 == NULL )
    {
        tmp_source_name_47 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_47 == NULL ))
        {
            tmp_source_name_47 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_47 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_called_name_36 );
            Py_DECREF( tmp_called_name_37 );
            Py_DECREF( tmp_kw_name_11 );
            Py_DECREF( tmp_called_name_39 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 132;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_52 = LOOKUP_ATTRIBUTE( tmp_source_name_47, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_called_name_36 );
        Py_DECREF( tmp_called_name_37 );
        Py_DECREF( tmp_kw_name_11 );
        Py_DECREF( tmp_called_name_39 );

        exception_lineno = 132;
        goto frame_exception_exit_1;
    }
    tmp_source_name_48 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_48 == NULL )
    {
        tmp_source_name_48 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_48 == NULL ))
        {
            tmp_source_name_48 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_48 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_called_name_36 );
            Py_DECREF( tmp_called_name_37 );
            Py_DECREF( tmp_kw_name_11 );
            Py_DECREF( tmp_called_name_39 );
            Py_DECREF( tmp_args_element_name_52 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 132;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_53 = LOOKUP_ATTRIBUTE( tmp_source_name_48, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_called_name_36 );
        Py_DECREF( tmp_called_name_37 );
        Py_DECREF( tmp_kw_name_11 );
        Py_DECREF( tmp_called_name_39 );
        Py_DECREF( tmp_args_element_name_52 );

        exception_lineno = 132;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_54 = const_int_pos_8;
    frame_function->f_lineno = 132;
    tmp_dict_value_11 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_39, tmp_args_element_name_52, tmp_args_element_name_53, tmp_args_element_name_54 );
    Py_DECREF( tmp_called_name_39 );
    Py_DECREF( tmp_args_element_name_52 );
    Py_DECREF( tmp_args_element_name_53 );
    if ( tmp_dict_value_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_called_name_36 );
        Py_DECREF( tmp_called_name_37 );
        Py_DECREF( tmp_kw_name_11 );

        exception_lineno = 132;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_11 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_11, tmp_dict_key_11, tmp_dict_value_11 );
    Py_DECREF( tmp_dict_value_11 );
    frame_function->f_lineno = 132;
    tmp_args_element_name_51 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_37, tmp_kw_name_11 );
    Py_DECREF( tmp_called_name_37 );
    Py_DECREF( tmp_kw_name_11 );
    if ( tmp_args_element_name_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_called_name_36 );

        exception_lineno = 132;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 132;
    tmp_args_element_name_49 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_36, tmp_args_element_name_50, tmp_args_element_name_51 );
    Py_DECREF( tmp_called_name_36 );
    Py_DECREF( tmp_args_element_name_51 );
    if ( tmp_args_element_name_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );

        exception_lineno = 132;
        goto frame_exception_exit_1;
    }
    tmp_source_name_49 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_49 == NULL )
    {
        tmp_source_name_49 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_49 == NULL ))
        {
            tmp_source_name_49 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_49 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_args_element_name_49 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 133;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_40 = LOOKUP_ATTRIBUTE( tmp_source_name_49, const_str_plain_NamedType );
    if ( tmp_called_name_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_49 );

        exception_lineno = 133;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_56 = const_str_plain_extensibleMatch;
    tmp_called_name_42 = PyDict_GetItem( locals_dict, const_str_plain_MatchingRuleAssertion );

    if ( tmp_called_name_42 == NULL )
    {
        tmp_called_name_42 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_MatchingRuleAssertion );

        if (unlikely( tmp_called_name_42 == NULL ))
        {
            tmp_called_name_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MatchingRuleAssertion );
        }

        if ( tmp_called_name_42 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_args_element_name_49 );
            Py_DECREF( tmp_called_name_40 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53037 ], 43, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 133;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 133;
    tmp_source_name_50 = CALL_FUNCTION_NO_ARGS( tmp_called_name_42 );
    if ( tmp_source_name_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_49 );
        Py_DECREF( tmp_called_name_40 );

        exception_lineno = 133;
        goto frame_exception_exit_1;
    }
    tmp_called_name_41 = LOOKUP_ATTRIBUTE( tmp_source_name_50, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_50 );
    if ( tmp_called_name_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_49 );
        Py_DECREF( tmp_called_name_40 );

        exception_lineno = 133;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_12 = _PyDict_NewPresized( 1 );
    tmp_source_name_51 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_51 == NULL )
    {
        tmp_source_name_51 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_51 == NULL ))
        {
            tmp_source_name_51 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_51 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_args_element_name_49 );
            Py_DECREF( tmp_called_name_40 );
            Py_DECREF( tmp_called_name_41 );
            Py_DECREF( tmp_kw_name_12 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 133;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_43 = LOOKUP_ATTRIBUTE( tmp_source_name_51, const_str_plain_Tag );
    if ( tmp_called_name_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_49 );
        Py_DECREF( tmp_called_name_40 );
        Py_DECREF( tmp_called_name_41 );
        Py_DECREF( tmp_kw_name_12 );

        exception_lineno = 133;
        goto frame_exception_exit_1;
    }
    tmp_source_name_52 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_52 == NULL )
    {
        tmp_source_name_52 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_52 == NULL ))
        {
            tmp_source_name_52 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_52 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_args_element_name_49 );
            Py_DECREF( tmp_called_name_40 );
            Py_DECREF( tmp_called_name_41 );
            Py_DECREF( tmp_kw_name_12 );
            Py_DECREF( tmp_called_name_43 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 133;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_58 = LOOKUP_ATTRIBUTE( tmp_source_name_52, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_58 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_49 );
        Py_DECREF( tmp_called_name_40 );
        Py_DECREF( tmp_called_name_41 );
        Py_DECREF( tmp_kw_name_12 );
        Py_DECREF( tmp_called_name_43 );

        exception_lineno = 133;
        goto frame_exception_exit_1;
    }
    tmp_source_name_53 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_53 == NULL )
    {
        tmp_source_name_53 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_53 == NULL ))
        {
            tmp_source_name_53 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_53 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_args_element_name_49 );
            Py_DECREF( tmp_called_name_40 );
            Py_DECREF( tmp_called_name_41 );
            Py_DECREF( tmp_kw_name_12 );
            Py_DECREF( tmp_called_name_43 );
            Py_DECREF( tmp_args_element_name_58 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 133;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_59 = LOOKUP_ATTRIBUTE( tmp_source_name_53, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_59 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_49 );
        Py_DECREF( tmp_called_name_40 );
        Py_DECREF( tmp_called_name_41 );
        Py_DECREF( tmp_kw_name_12 );
        Py_DECREF( tmp_called_name_43 );
        Py_DECREF( tmp_args_element_name_58 );

        exception_lineno = 133;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_60 = const_int_pos_9;
    frame_function->f_lineno = 133;
    tmp_dict_value_12 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_43, tmp_args_element_name_58, tmp_args_element_name_59, tmp_args_element_name_60 );
    Py_DECREF( tmp_called_name_43 );
    Py_DECREF( tmp_args_element_name_58 );
    Py_DECREF( tmp_args_element_name_59 );
    if ( tmp_dict_value_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_49 );
        Py_DECREF( tmp_called_name_40 );
        Py_DECREF( tmp_called_name_41 );
        Py_DECREF( tmp_kw_name_12 );

        exception_lineno = 133;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_12 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_12, tmp_dict_key_12, tmp_dict_value_12 );
    Py_DECREF( tmp_dict_value_12 );
    frame_function->f_lineno = 133;
    tmp_args_element_name_57 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_41, tmp_kw_name_12 );
    Py_DECREF( tmp_called_name_41 );
    Py_DECREF( tmp_kw_name_12 );
    if ( tmp_args_element_name_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_49 );
        Py_DECREF( tmp_called_name_40 );

        exception_lineno = 133;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 133;
    tmp_args_element_name_55 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_40, tmp_args_element_name_56, tmp_args_element_name_57 );
    Py_DECREF( tmp_called_name_40 );
    Py_DECREF( tmp_args_element_name_57 );
    if ( tmp_args_element_name_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_49 );

        exception_lineno = 133;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 133;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS10( tmp_called_name_1, tmp_args_element_name_1, tmp_args_element_name_7, tmp_args_element_name_13, tmp_args_element_name_19, tmp_args_element_name_25, tmp_args_element_name_31, tmp_args_element_name_37, tmp_args_element_name_43, tmp_args_element_name_49, tmp_args_element_name_55 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    Py_DECREF( tmp_args_element_name_7 );
    Py_DECREF( tmp_args_element_name_13 );
    Py_DECREF( tmp_args_element_name_19 );
    Py_DECREF( tmp_args_element_name_25 );
    Py_DECREF( tmp_args_element_name_31 );
    Py_DECREF( tmp_args_element_name_37 );
    Py_DECREF( tmp_args_element_name_43 );
    Py_DECREF( tmp_args_element_name_49 );
    Py_DECREF( tmp_args_element_name_55 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 133;
        goto frame_exception_exit_1;
    }
    assert( var_componentType == NULL );
    var_componentType = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 122;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 122;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 122;
                goto frame_exception_exit_1;
            }
            }
            if ( var_componentType != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_componentType,
                    var_componentType
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 122;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_44 = closure_pyasn1_modules$rfc2251_class_creation_25__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_Filter2;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_25__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_componentType != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_componentType,
            var_componentType
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_13 = closure_pyasn1_modules$rfc2251_class_creation_25__class_decl_dict;

    tmp_assign_source_4 = CALL_FUNCTION( tmp_called_name_44, tmp_args_name_1, tmp_kw_name_13 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_4;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_25_Filter2_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_25_Filter2_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_26_Filter_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_26__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_26__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_26__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_26__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_componentType = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_args_element_name_20;
    PyObject *tmp_args_element_name_21;
    PyObject *tmp_args_element_name_22;
    PyObject *tmp_args_element_name_23;
    PyObject *tmp_args_element_name_24;
    PyObject *tmp_args_element_name_25;
    PyObject *tmp_args_element_name_26;
    PyObject *tmp_args_element_name_27;
    PyObject *tmp_args_element_name_28;
    PyObject *tmp_args_element_name_29;
    PyObject *tmp_args_element_name_30;
    PyObject *tmp_args_element_name_31;
    PyObject *tmp_args_element_name_32;
    PyObject *tmp_args_element_name_33;
    PyObject *tmp_args_element_name_34;
    PyObject *tmp_args_element_name_35;
    PyObject *tmp_args_element_name_36;
    PyObject *tmp_args_element_name_37;
    PyObject *tmp_args_element_name_38;
    PyObject *tmp_args_element_name_39;
    PyObject *tmp_args_element_name_40;
    PyObject *tmp_args_element_name_41;
    PyObject *tmp_args_element_name_42;
    PyObject *tmp_args_element_name_43;
    PyObject *tmp_args_element_name_44;
    PyObject *tmp_args_element_name_45;
    PyObject *tmp_args_element_name_46;
    PyObject *tmp_args_element_name_47;
    PyObject *tmp_args_element_name_48;
    PyObject *tmp_args_element_name_49;
    PyObject *tmp_args_element_name_50;
    PyObject *tmp_args_element_name_51;
    PyObject *tmp_args_element_name_52;
    PyObject *tmp_args_element_name_53;
    PyObject *tmp_args_element_name_54;
    PyObject *tmp_args_element_name_55;
    PyObject *tmp_args_element_name_56;
    PyObject *tmp_args_element_name_57;
    PyObject *tmp_args_element_name_58;
    PyObject *tmp_args_element_name_59;
    PyObject *tmp_args_element_name_60;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_called_name_16;
    PyObject *tmp_called_name_17;
    PyObject *tmp_called_name_18;
    PyObject *tmp_called_name_19;
    PyObject *tmp_called_name_20;
    PyObject *tmp_called_name_21;
    PyObject *tmp_called_name_22;
    PyObject *tmp_called_name_23;
    PyObject *tmp_called_name_24;
    PyObject *tmp_called_name_25;
    PyObject *tmp_called_name_26;
    PyObject *tmp_called_name_27;
    PyObject *tmp_called_name_28;
    PyObject *tmp_called_name_29;
    PyObject *tmp_called_name_30;
    PyObject *tmp_called_name_31;
    PyObject *tmp_called_name_32;
    PyObject *tmp_called_name_33;
    PyObject *tmp_called_name_34;
    PyObject *tmp_called_name_35;
    PyObject *tmp_called_name_36;
    PyObject *tmp_called_name_37;
    PyObject *tmp_called_name_38;
    PyObject *tmp_called_name_39;
    PyObject *tmp_called_name_40;
    PyObject *tmp_called_name_41;
    PyObject *tmp_called_name_42;
    PyObject *tmp_called_name_43;
    PyObject *tmp_called_name_44;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_key_7;
    PyObject *tmp_dict_key_8;
    PyObject *tmp_dict_key_9;
    PyObject *tmp_dict_key_10;
    PyObject *tmp_dict_key_11;
    PyObject *tmp_dict_key_12;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_dict_value_7;
    PyObject *tmp_dict_value_8;
    PyObject *tmp_dict_value_9;
    PyObject *tmp_dict_value_10;
    PyObject *tmp_dict_value_11;
    PyObject *tmp_dict_value_12;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    PyObject *tmp_kw_name_3;
    PyObject *tmp_kw_name_4;
    PyObject *tmp_kw_name_5;
    PyObject *tmp_kw_name_6;
    PyObject *tmp_kw_name_7;
    PyObject *tmp_kw_name_8;
    PyObject *tmp_kw_name_9;
    PyObject *tmp_kw_name_10;
    PyObject *tmp_kw_name_11;
    PyObject *tmp_kw_name_12;
    PyObject *tmp_kw_name_13;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_source_name_22;
    PyObject *tmp_source_name_23;
    PyObject *tmp_source_name_24;
    PyObject *tmp_source_name_25;
    PyObject *tmp_source_name_26;
    PyObject *tmp_source_name_27;
    PyObject *tmp_source_name_28;
    PyObject *tmp_source_name_29;
    PyObject *tmp_source_name_30;
    PyObject *tmp_source_name_31;
    PyObject *tmp_source_name_32;
    PyObject *tmp_source_name_33;
    PyObject *tmp_source_name_34;
    PyObject *tmp_source_name_35;
    PyObject *tmp_source_name_36;
    PyObject *tmp_source_name_37;
    PyObject *tmp_source_name_38;
    PyObject *tmp_source_name_39;
    PyObject *tmp_source_name_40;
    PyObject *tmp_source_name_41;
    PyObject *tmp_source_name_42;
    PyObject *tmp_source_name_43;
    PyObject *tmp_source_name_44;
    PyObject *tmp_source_name_45;
    PyObject *tmp_source_name_46;
    PyObject *tmp_source_name_47;
    PyObject *tmp_source_name_48;
    PyObject *tmp_source_name_49;
    PyObject *tmp_source_name_50;
    PyObject *tmp_source_name_51;
    PyObject *tmp_source_name_52;
    PyObject *tmp_source_name_53;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_26__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_Filter;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_f0769f38cbd9500ffde47811fc29640c, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_1 == NULL )
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_1 == NULL ))
        {
            tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 137;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_NamedTypes );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 137;
        goto frame_exception_exit_1;
    }
    tmp_source_name_2 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_2 == NULL )
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_2 == NULL ))
        {
            tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_2 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 138;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_NamedType );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 138;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = const_str_plain_and;
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 138;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_SetOf );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 138;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_called_name_5 = PyDict_GetItem( locals_dict, const_str_plain_Filter2 );

    if ( tmp_called_name_5 == NULL )
    {
        tmp_called_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_Filter2 );

        if (unlikely( tmp_called_name_5 == NULL ))
        {
            tmp_called_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Filter2 );
        }

        if ( tmp_called_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_kw_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53109 ], 29, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 138;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 138;
    tmp_dict_value_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_5 );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 138;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_1 = const_str_plain_componentType;
    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    frame_function->f_lineno = 138;
    tmp_source_name_3 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_4, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_source_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 138;
        goto frame_exception_exit_1;
    }
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_3 );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 138;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_2 = _PyDict_NewPresized( 1 );
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_kw_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 138;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_Tag );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_kw_name_2 );

        exception_lineno = 138;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_6 == NULL )
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_6 == NULL ))
        {
            tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_6 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 138;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_6 );

        exception_lineno = 138;
        goto frame_exception_exit_1;
    }
    tmp_source_name_7 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_7 == NULL )
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_7 == NULL ))
        {
            tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_7 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 138;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_4 );

        exception_lineno = 138;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_6 = const_int_0;
    frame_function->f_lineno = 138;
    tmp_dict_value_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_6, tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6 );
    Py_DECREF( tmp_called_name_6 );
    Py_DECREF( tmp_args_element_name_4 );
    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_dict_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_kw_name_2 );

        exception_lineno = 138;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_2 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
    Py_DECREF( tmp_dict_value_2 );
    frame_function->f_lineno = 138;
    tmp_args_element_name_3 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_3, tmp_kw_name_2 );
    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 138;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 138;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 138;
        goto frame_exception_exit_1;
    }
    tmp_source_name_8 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_8 == NULL )
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_8 == NULL ))
        {
            tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_8 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 139;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_NamedType );
    if ( tmp_called_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 139;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_8 = const_str_plain_or;
    tmp_source_name_10 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_10 == NULL )
    {
        tmp_source_name_10 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_10 == NULL ))
        {
            tmp_source_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_10 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_7 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 139;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_SetOf );
    if ( tmp_called_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_7 );

        exception_lineno = 139;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_3 = _PyDict_NewPresized( 1 );
    tmp_called_name_10 = PyDict_GetItem( locals_dict, const_str_plain_Filter2 );

    if ( tmp_called_name_10 == NULL )
    {
        tmp_called_name_10 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_Filter2 );

        if (unlikely( tmp_called_name_10 == NULL ))
        {
            tmp_called_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Filter2 );
        }

        if ( tmp_called_name_10 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_called_name_9 );
            Py_DECREF( tmp_kw_name_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53109 ], 29, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 139;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 139;
    tmp_dict_value_3 = CALL_FUNCTION_NO_ARGS( tmp_called_name_10 );
    if ( tmp_dict_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_kw_name_3 );

        exception_lineno = 139;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_3 = const_str_plain_componentType;
    PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_3, tmp_dict_value_3 );
    Py_DECREF( tmp_dict_value_3 );
    frame_function->f_lineno = 139;
    tmp_source_name_9 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_9, tmp_kw_name_3 );
    Py_DECREF( tmp_called_name_9 );
    Py_DECREF( tmp_kw_name_3 );
    if ( tmp_source_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_7 );

        exception_lineno = 139;
        goto frame_exception_exit_1;
    }
    tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_9 );
    if ( tmp_called_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_7 );

        exception_lineno = 139;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_4 = _PyDict_NewPresized( 1 );
    tmp_source_name_11 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_11 == NULL )
    {
        tmp_source_name_11 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_11 == NULL ))
        {
            tmp_source_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_11 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_called_name_8 );
            Py_DECREF( tmp_kw_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 139;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_Tag );
    if ( tmp_called_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_kw_name_4 );

        exception_lineno = 139;
        goto frame_exception_exit_1;
    }
    tmp_source_name_12 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_12 == NULL )
    {
        tmp_source_name_12 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_12 == NULL ))
        {
            tmp_source_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_12 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_called_name_8 );
            Py_DECREF( tmp_kw_name_4 );
            Py_DECREF( tmp_called_name_11 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 139;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_kw_name_4 );
        Py_DECREF( tmp_called_name_11 );

        exception_lineno = 139;
        goto frame_exception_exit_1;
    }
    tmp_source_name_13 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_13 == NULL )
    {
        tmp_source_name_13 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_13 == NULL ))
        {
            tmp_source_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_13 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_called_name_8 );
            Py_DECREF( tmp_kw_name_4 );
            Py_DECREF( tmp_called_name_11 );
            Py_DECREF( tmp_args_element_name_10 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 139;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_kw_name_4 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_args_element_name_10 );

        exception_lineno = 139;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_12 = const_int_pos_1;
    frame_function->f_lineno = 139;
    tmp_dict_value_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_11, tmp_args_element_name_10, tmp_args_element_name_11, tmp_args_element_name_12 );
    Py_DECREF( tmp_called_name_11 );
    Py_DECREF( tmp_args_element_name_10 );
    Py_DECREF( tmp_args_element_name_11 );
    if ( tmp_dict_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_kw_name_4 );

        exception_lineno = 139;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_4 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_4, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    frame_function->f_lineno = 139;
    tmp_args_element_name_9 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_8, tmp_kw_name_4 );
    Py_DECREF( tmp_called_name_8 );
    Py_DECREF( tmp_kw_name_4 );
    if ( tmp_args_element_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_7 );

        exception_lineno = 139;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 139;
    tmp_args_element_name_7 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_7, tmp_args_element_name_8, tmp_args_element_name_9 );
    Py_DECREF( tmp_called_name_7 );
    Py_DECREF( tmp_args_element_name_9 );
    if ( tmp_args_element_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 139;
        goto frame_exception_exit_1;
    }
    tmp_source_name_14 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_14 == NULL )
    {
        tmp_source_name_14 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_14 == NULL ))
        {
            tmp_source_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_14 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 140;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_NamedType );
    if ( tmp_called_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );

        exception_lineno = 140;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_14 = const_str_plain_not;
    tmp_called_name_14 = PyDict_GetItem( locals_dict, const_str_plain_Filter2 );

    if ( tmp_called_name_14 == NULL )
    {
        tmp_called_name_14 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_Filter2 );

        if (unlikely( tmp_called_name_14 == NULL ))
        {
            tmp_called_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Filter2 );
        }

        if ( tmp_called_name_14 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_called_name_12 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53109 ], 29, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 140;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 140;
    tmp_source_name_15 = CALL_FUNCTION_NO_ARGS( tmp_called_name_14 );
    if ( tmp_source_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_12 );

        exception_lineno = 140;
        goto frame_exception_exit_1;
    }
    tmp_called_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_15 );
    if ( tmp_called_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_12 );

        exception_lineno = 140;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_5 = _PyDict_NewPresized( 1 );
    tmp_source_name_16 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_16 == NULL )
    {
        tmp_source_name_16 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_16 == NULL ))
        {
            tmp_source_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_16 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_called_name_12 );
            Py_DECREF( tmp_called_name_13 );
            Py_DECREF( tmp_kw_name_5 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 140;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_Tag );
    if ( tmp_called_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_kw_name_5 );

        exception_lineno = 140;
        goto frame_exception_exit_1;
    }
    tmp_source_name_17 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_17 == NULL )
    {
        tmp_source_name_17 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_17 == NULL ))
        {
            tmp_source_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_17 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_called_name_12 );
            Py_DECREF( tmp_called_name_13 );
            Py_DECREF( tmp_kw_name_5 );
            Py_DECREF( tmp_called_name_15 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 140;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_16 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_kw_name_5 );
        Py_DECREF( tmp_called_name_15 );

        exception_lineno = 140;
        goto frame_exception_exit_1;
    }
    tmp_source_name_18 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_18 == NULL )
    {
        tmp_source_name_18 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_18 == NULL ))
        {
            tmp_source_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_18 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_called_name_12 );
            Py_DECREF( tmp_called_name_13 );
            Py_DECREF( tmp_kw_name_5 );
            Py_DECREF( tmp_called_name_15 );
            Py_DECREF( tmp_args_element_name_16 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 140;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_kw_name_5 );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_args_element_name_16 );

        exception_lineno = 140;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_18 = const_int_pos_2;
    frame_function->f_lineno = 140;
    tmp_dict_value_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_15, tmp_args_element_name_16, tmp_args_element_name_17, tmp_args_element_name_18 );
    Py_DECREF( tmp_called_name_15 );
    Py_DECREF( tmp_args_element_name_16 );
    Py_DECREF( tmp_args_element_name_17 );
    if ( tmp_dict_value_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_kw_name_5 );

        exception_lineno = 140;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_5 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_5, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    frame_function->f_lineno = 140;
    tmp_args_element_name_15 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_13, tmp_kw_name_5 );
    Py_DECREF( tmp_called_name_13 );
    Py_DECREF( tmp_kw_name_5 );
    if ( tmp_args_element_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_12 );

        exception_lineno = 140;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 140;
    tmp_args_element_name_13 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_12, tmp_args_element_name_14, tmp_args_element_name_15 );
    Py_DECREF( tmp_called_name_12 );
    Py_DECREF( tmp_args_element_name_15 );
    if ( tmp_args_element_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );

        exception_lineno = 140;
        goto frame_exception_exit_1;
    }
    tmp_source_name_19 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_19 == NULL )
    {
        tmp_source_name_19 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_19 == NULL ))
        {
            tmp_source_name_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_19 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 141;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_16 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_NamedType );
    if ( tmp_called_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );

        exception_lineno = 141;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_20 = const_str_plain_equalityMatch;
    tmp_called_name_18 = PyDict_GetItem( locals_dict, const_str_plain_AttributeValueAssertion );

    if ( tmp_called_name_18 == NULL )
    {
        tmp_called_name_18 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeValueAssertion );

        if (unlikely( tmp_called_name_18 == NULL ))
        {
            tmp_called_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeValueAssertion );
        }

        if ( tmp_called_name_18 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_called_name_16 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52955 ], 45, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 141;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 141;
    tmp_source_name_20 = CALL_FUNCTION_NO_ARGS( tmp_called_name_18 );
    if ( tmp_source_name_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_16 );

        exception_lineno = 141;
        goto frame_exception_exit_1;
    }
    tmp_called_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_20 );
    if ( tmp_called_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_16 );

        exception_lineno = 141;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_6 = _PyDict_NewPresized( 1 );
    tmp_source_name_21 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_21 == NULL )
    {
        tmp_source_name_21 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_21 == NULL ))
        {
            tmp_source_name_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_21 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_called_name_16 );
            Py_DECREF( tmp_called_name_17 );
            Py_DECREF( tmp_kw_name_6 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 141;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_19 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_Tag );
    if ( tmp_called_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_kw_name_6 );

        exception_lineno = 141;
        goto frame_exception_exit_1;
    }
    tmp_source_name_22 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_22 == NULL )
    {
        tmp_source_name_22 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_22 == NULL ))
        {
            tmp_source_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_22 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_called_name_16 );
            Py_DECREF( tmp_called_name_17 );
            Py_DECREF( tmp_kw_name_6 );
            Py_DECREF( tmp_called_name_19 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 141;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_22 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_kw_name_6 );
        Py_DECREF( tmp_called_name_19 );

        exception_lineno = 141;
        goto frame_exception_exit_1;
    }
    tmp_source_name_23 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_23 == NULL )
    {
        tmp_source_name_23 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_23 == NULL ))
        {
            tmp_source_name_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_23 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_called_name_16 );
            Py_DECREF( tmp_called_name_17 );
            Py_DECREF( tmp_kw_name_6 );
            Py_DECREF( tmp_called_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 141;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_23 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_kw_name_6 );
        Py_DECREF( tmp_called_name_19 );
        Py_DECREF( tmp_args_element_name_22 );

        exception_lineno = 141;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_24 = const_int_pos_3;
    frame_function->f_lineno = 141;
    tmp_dict_value_6 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_19, tmp_args_element_name_22, tmp_args_element_name_23, tmp_args_element_name_24 );
    Py_DECREF( tmp_called_name_19 );
    Py_DECREF( tmp_args_element_name_22 );
    Py_DECREF( tmp_args_element_name_23 );
    if ( tmp_dict_value_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_kw_name_6 );

        exception_lineno = 141;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_6 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_6, tmp_dict_key_6, tmp_dict_value_6 );
    Py_DECREF( tmp_dict_value_6 );
    frame_function->f_lineno = 141;
    tmp_args_element_name_21 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_17, tmp_kw_name_6 );
    Py_DECREF( tmp_called_name_17 );
    Py_DECREF( tmp_kw_name_6 );
    if ( tmp_args_element_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_16 );

        exception_lineno = 141;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 141;
    tmp_args_element_name_19 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_16, tmp_args_element_name_20, tmp_args_element_name_21 );
    Py_DECREF( tmp_called_name_16 );
    Py_DECREF( tmp_args_element_name_21 );
    if ( tmp_args_element_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );

        exception_lineno = 141;
        goto frame_exception_exit_1;
    }
    tmp_source_name_24 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_24 == NULL )
    {
        tmp_source_name_24 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_24 == NULL ))
        {
            tmp_source_name_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_24 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 142;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_20 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_NamedType );
    if ( tmp_called_name_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );

        exception_lineno = 142;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_26 = const_str_plain_substrings;
    tmp_called_name_22 = PyDict_GetItem( locals_dict, const_str_plain_SubstringFilter );

    if ( tmp_called_name_22 == NULL )
    {
        tmp_called_name_22 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_SubstringFilter );

        if (unlikely( tmp_called_name_22 == NULL ))
        {
            tmp_called_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SubstringFilter );
        }

        if ( tmp_called_name_22 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_called_name_20 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53000 ], 37, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 142;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 142;
    tmp_source_name_25 = CALL_FUNCTION_NO_ARGS( tmp_called_name_22 );
    if ( tmp_source_name_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_called_name_20 );

        exception_lineno = 142;
        goto frame_exception_exit_1;
    }
    tmp_called_name_21 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_25 );
    if ( tmp_called_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_called_name_20 );

        exception_lineno = 142;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_7 = _PyDict_NewPresized( 1 );
    tmp_source_name_26 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_26 == NULL )
    {
        tmp_source_name_26 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_26 == NULL ))
        {
            tmp_source_name_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_26 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_called_name_20 );
            Py_DECREF( tmp_called_name_21 );
            Py_DECREF( tmp_kw_name_7 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 142;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_23 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain_Tag );
    if ( tmp_called_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_called_name_20 );
        Py_DECREF( tmp_called_name_21 );
        Py_DECREF( tmp_kw_name_7 );

        exception_lineno = 142;
        goto frame_exception_exit_1;
    }
    tmp_source_name_27 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_27 == NULL )
    {
        tmp_source_name_27 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_27 == NULL ))
        {
            tmp_source_name_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_27 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_called_name_20 );
            Py_DECREF( tmp_called_name_21 );
            Py_DECREF( tmp_kw_name_7 );
            Py_DECREF( tmp_called_name_23 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 142;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_28 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_called_name_20 );
        Py_DECREF( tmp_called_name_21 );
        Py_DECREF( tmp_kw_name_7 );
        Py_DECREF( tmp_called_name_23 );

        exception_lineno = 142;
        goto frame_exception_exit_1;
    }
    tmp_source_name_28 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_28 == NULL )
    {
        tmp_source_name_28 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_28 == NULL ))
        {
            tmp_source_name_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_28 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_called_name_20 );
            Py_DECREF( tmp_called_name_21 );
            Py_DECREF( tmp_kw_name_7 );
            Py_DECREF( tmp_called_name_23 );
            Py_DECREF( tmp_args_element_name_28 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 142;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_29 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_called_name_20 );
        Py_DECREF( tmp_called_name_21 );
        Py_DECREF( tmp_kw_name_7 );
        Py_DECREF( tmp_called_name_23 );
        Py_DECREF( tmp_args_element_name_28 );

        exception_lineno = 142;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_30 = const_int_pos_4;
    frame_function->f_lineno = 142;
    tmp_dict_value_7 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_23, tmp_args_element_name_28, tmp_args_element_name_29, tmp_args_element_name_30 );
    Py_DECREF( tmp_called_name_23 );
    Py_DECREF( tmp_args_element_name_28 );
    Py_DECREF( tmp_args_element_name_29 );
    if ( tmp_dict_value_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_called_name_20 );
        Py_DECREF( tmp_called_name_21 );
        Py_DECREF( tmp_kw_name_7 );

        exception_lineno = 142;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_7 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_7, tmp_dict_key_7, tmp_dict_value_7 );
    Py_DECREF( tmp_dict_value_7 );
    frame_function->f_lineno = 142;
    tmp_args_element_name_27 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_21, tmp_kw_name_7 );
    Py_DECREF( tmp_called_name_21 );
    Py_DECREF( tmp_kw_name_7 );
    if ( tmp_args_element_name_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_called_name_20 );

        exception_lineno = 142;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 142;
    tmp_args_element_name_25 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_20, tmp_args_element_name_26, tmp_args_element_name_27 );
    Py_DECREF( tmp_called_name_20 );
    Py_DECREF( tmp_args_element_name_27 );
    if ( tmp_args_element_name_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );

        exception_lineno = 142;
        goto frame_exception_exit_1;
    }
    tmp_source_name_29 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_29 == NULL )
    {
        tmp_source_name_29 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_29 == NULL ))
        {
            tmp_source_name_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_29 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 143;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_24 = LOOKUP_ATTRIBUTE( tmp_source_name_29, const_str_plain_NamedType );
    if ( tmp_called_name_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );

        exception_lineno = 143;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_32 = const_str_plain_greaterOrEqual;
    tmp_called_name_26 = PyDict_GetItem( locals_dict, const_str_plain_AttributeValueAssertion );

    if ( tmp_called_name_26 == NULL )
    {
        tmp_called_name_26 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeValueAssertion );

        if (unlikely( tmp_called_name_26 == NULL ))
        {
            tmp_called_name_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeValueAssertion );
        }

        if ( tmp_called_name_26 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_called_name_24 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52955 ], 45, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 143;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 143;
    tmp_source_name_30 = CALL_FUNCTION_NO_ARGS( tmp_called_name_26 );
    if ( tmp_source_name_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_called_name_24 );

        exception_lineno = 143;
        goto frame_exception_exit_1;
    }
    tmp_called_name_25 = LOOKUP_ATTRIBUTE( tmp_source_name_30, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_30 );
    if ( tmp_called_name_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_called_name_24 );

        exception_lineno = 143;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_8 = _PyDict_NewPresized( 1 );
    tmp_source_name_31 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_31 == NULL )
    {
        tmp_source_name_31 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_31 == NULL ))
        {
            tmp_source_name_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_31 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_called_name_24 );
            Py_DECREF( tmp_called_name_25 );
            Py_DECREF( tmp_kw_name_8 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 143;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_27 = LOOKUP_ATTRIBUTE( tmp_source_name_31, const_str_plain_Tag );
    if ( tmp_called_name_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_called_name_24 );
        Py_DECREF( tmp_called_name_25 );
        Py_DECREF( tmp_kw_name_8 );

        exception_lineno = 143;
        goto frame_exception_exit_1;
    }
    tmp_source_name_32 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_32 == NULL )
    {
        tmp_source_name_32 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_32 == NULL ))
        {
            tmp_source_name_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_32 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_called_name_24 );
            Py_DECREF( tmp_called_name_25 );
            Py_DECREF( tmp_kw_name_8 );
            Py_DECREF( tmp_called_name_27 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 143;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_34 = LOOKUP_ATTRIBUTE( tmp_source_name_32, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_called_name_24 );
        Py_DECREF( tmp_called_name_25 );
        Py_DECREF( tmp_kw_name_8 );
        Py_DECREF( tmp_called_name_27 );

        exception_lineno = 143;
        goto frame_exception_exit_1;
    }
    tmp_source_name_33 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_33 == NULL )
    {
        tmp_source_name_33 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_33 == NULL ))
        {
            tmp_source_name_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_33 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_called_name_24 );
            Py_DECREF( tmp_called_name_25 );
            Py_DECREF( tmp_kw_name_8 );
            Py_DECREF( tmp_called_name_27 );
            Py_DECREF( tmp_args_element_name_34 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 143;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_35 = LOOKUP_ATTRIBUTE( tmp_source_name_33, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_called_name_24 );
        Py_DECREF( tmp_called_name_25 );
        Py_DECREF( tmp_kw_name_8 );
        Py_DECREF( tmp_called_name_27 );
        Py_DECREF( tmp_args_element_name_34 );

        exception_lineno = 143;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_36 = const_int_pos_5;
    frame_function->f_lineno = 143;
    tmp_dict_value_8 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_27, tmp_args_element_name_34, tmp_args_element_name_35, tmp_args_element_name_36 );
    Py_DECREF( tmp_called_name_27 );
    Py_DECREF( tmp_args_element_name_34 );
    Py_DECREF( tmp_args_element_name_35 );
    if ( tmp_dict_value_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_called_name_24 );
        Py_DECREF( tmp_called_name_25 );
        Py_DECREF( tmp_kw_name_8 );

        exception_lineno = 143;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_8 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_8, tmp_dict_key_8, tmp_dict_value_8 );
    Py_DECREF( tmp_dict_value_8 );
    frame_function->f_lineno = 143;
    tmp_args_element_name_33 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_25, tmp_kw_name_8 );
    Py_DECREF( tmp_called_name_25 );
    Py_DECREF( tmp_kw_name_8 );
    if ( tmp_args_element_name_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_called_name_24 );

        exception_lineno = 143;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 143;
    tmp_args_element_name_31 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_24, tmp_args_element_name_32, tmp_args_element_name_33 );
    Py_DECREF( tmp_called_name_24 );
    Py_DECREF( tmp_args_element_name_33 );
    if ( tmp_args_element_name_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );

        exception_lineno = 143;
        goto frame_exception_exit_1;
    }
    tmp_source_name_34 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_34 == NULL )
    {
        tmp_source_name_34 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_34 == NULL ))
        {
            tmp_source_name_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_34 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 144;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_28 = LOOKUP_ATTRIBUTE( tmp_source_name_34, const_str_plain_NamedType );
    if ( tmp_called_name_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );

        exception_lineno = 144;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_38 = const_str_plain_lessOrEqual;
    tmp_called_name_30 = PyDict_GetItem( locals_dict, const_str_plain_AttributeValueAssertion );

    if ( tmp_called_name_30 == NULL )
    {
        tmp_called_name_30 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeValueAssertion );

        if (unlikely( tmp_called_name_30 == NULL ))
        {
            tmp_called_name_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeValueAssertion );
        }

        if ( tmp_called_name_30 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_called_name_28 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52955 ], 45, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 144;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 144;
    tmp_source_name_35 = CALL_FUNCTION_NO_ARGS( tmp_called_name_30 );
    if ( tmp_source_name_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_called_name_28 );

        exception_lineno = 144;
        goto frame_exception_exit_1;
    }
    tmp_called_name_29 = LOOKUP_ATTRIBUTE( tmp_source_name_35, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_35 );
    if ( tmp_called_name_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_called_name_28 );

        exception_lineno = 144;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_9 = _PyDict_NewPresized( 1 );
    tmp_source_name_36 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_36 == NULL )
    {
        tmp_source_name_36 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_36 == NULL ))
        {
            tmp_source_name_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_36 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_called_name_28 );
            Py_DECREF( tmp_called_name_29 );
            Py_DECREF( tmp_kw_name_9 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 144;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_31 = LOOKUP_ATTRIBUTE( tmp_source_name_36, const_str_plain_Tag );
    if ( tmp_called_name_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_called_name_28 );
        Py_DECREF( tmp_called_name_29 );
        Py_DECREF( tmp_kw_name_9 );

        exception_lineno = 144;
        goto frame_exception_exit_1;
    }
    tmp_source_name_37 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_37 == NULL )
    {
        tmp_source_name_37 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_37 == NULL ))
        {
            tmp_source_name_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_37 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_called_name_28 );
            Py_DECREF( tmp_called_name_29 );
            Py_DECREF( tmp_kw_name_9 );
            Py_DECREF( tmp_called_name_31 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 144;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_40 = LOOKUP_ATTRIBUTE( tmp_source_name_37, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_called_name_28 );
        Py_DECREF( tmp_called_name_29 );
        Py_DECREF( tmp_kw_name_9 );
        Py_DECREF( tmp_called_name_31 );

        exception_lineno = 144;
        goto frame_exception_exit_1;
    }
    tmp_source_name_38 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_38 == NULL )
    {
        tmp_source_name_38 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_38 == NULL ))
        {
            tmp_source_name_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_38 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_called_name_28 );
            Py_DECREF( tmp_called_name_29 );
            Py_DECREF( tmp_kw_name_9 );
            Py_DECREF( tmp_called_name_31 );
            Py_DECREF( tmp_args_element_name_40 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 144;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_41 = LOOKUP_ATTRIBUTE( tmp_source_name_38, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_called_name_28 );
        Py_DECREF( tmp_called_name_29 );
        Py_DECREF( tmp_kw_name_9 );
        Py_DECREF( tmp_called_name_31 );
        Py_DECREF( tmp_args_element_name_40 );

        exception_lineno = 144;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_42 = const_int_pos_6;
    frame_function->f_lineno = 144;
    tmp_dict_value_9 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_31, tmp_args_element_name_40, tmp_args_element_name_41, tmp_args_element_name_42 );
    Py_DECREF( tmp_called_name_31 );
    Py_DECREF( tmp_args_element_name_40 );
    Py_DECREF( tmp_args_element_name_41 );
    if ( tmp_dict_value_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_called_name_28 );
        Py_DECREF( tmp_called_name_29 );
        Py_DECREF( tmp_kw_name_9 );

        exception_lineno = 144;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_9 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_9, tmp_dict_key_9, tmp_dict_value_9 );
    Py_DECREF( tmp_dict_value_9 );
    frame_function->f_lineno = 144;
    tmp_args_element_name_39 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_29, tmp_kw_name_9 );
    Py_DECREF( tmp_called_name_29 );
    Py_DECREF( tmp_kw_name_9 );
    if ( tmp_args_element_name_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_called_name_28 );

        exception_lineno = 144;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 144;
    tmp_args_element_name_37 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_28, tmp_args_element_name_38, tmp_args_element_name_39 );
    Py_DECREF( tmp_called_name_28 );
    Py_DECREF( tmp_args_element_name_39 );
    if ( tmp_args_element_name_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );

        exception_lineno = 144;
        goto frame_exception_exit_1;
    }
    tmp_source_name_39 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_39 == NULL )
    {
        tmp_source_name_39 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_39 == NULL ))
        {
            tmp_source_name_39 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_39 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 145;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_32 = LOOKUP_ATTRIBUTE( tmp_source_name_39, const_str_plain_NamedType );
    if ( tmp_called_name_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );

        exception_lineno = 145;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_44 = const_str_plain_present;
    tmp_called_name_34 = PyDict_GetItem( locals_dict, const_str_plain_AttributeDescription );

    if ( tmp_called_name_34 == NULL )
    {
        tmp_called_name_34 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeDescription );

        if (unlikely( tmp_called_name_34 == NULL ))
        {
            tmp_called_name_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeDescription );
        }

        if ( tmp_called_name_34 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_called_name_32 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52569 ], 42, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 145;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 145;
    tmp_source_name_40 = CALL_FUNCTION_NO_ARGS( tmp_called_name_34 );
    if ( tmp_source_name_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_called_name_32 );

        exception_lineno = 145;
        goto frame_exception_exit_1;
    }
    tmp_called_name_33 = LOOKUP_ATTRIBUTE( tmp_source_name_40, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_40 );
    if ( tmp_called_name_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_called_name_32 );

        exception_lineno = 145;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_10 = _PyDict_NewPresized( 1 );
    tmp_source_name_41 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_41 == NULL )
    {
        tmp_source_name_41 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_41 == NULL ))
        {
            tmp_source_name_41 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_41 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_called_name_32 );
            Py_DECREF( tmp_called_name_33 );
            Py_DECREF( tmp_kw_name_10 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 145;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_35 = LOOKUP_ATTRIBUTE( tmp_source_name_41, const_str_plain_Tag );
    if ( tmp_called_name_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_called_name_32 );
        Py_DECREF( tmp_called_name_33 );
        Py_DECREF( tmp_kw_name_10 );

        exception_lineno = 145;
        goto frame_exception_exit_1;
    }
    tmp_source_name_42 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_42 == NULL )
    {
        tmp_source_name_42 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_42 == NULL ))
        {
            tmp_source_name_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_42 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_called_name_32 );
            Py_DECREF( tmp_called_name_33 );
            Py_DECREF( tmp_kw_name_10 );
            Py_DECREF( tmp_called_name_35 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 145;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_46 = LOOKUP_ATTRIBUTE( tmp_source_name_42, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_called_name_32 );
        Py_DECREF( tmp_called_name_33 );
        Py_DECREF( tmp_kw_name_10 );
        Py_DECREF( tmp_called_name_35 );

        exception_lineno = 145;
        goto frame_exception_exit_1;
    }
    tmp_source_name_43 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_43 == NULL )
    {
        tmp_source_name_43 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_43 == NULL ))
        {
            tmp_source_name_43 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_43 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_called_name_32 );
            Py_DECREF( tmp_called_name_33 );
            Py_DECREF( tmp_kw_name_10 );
            Py_DECREF( tmp_called_name_35 );
            Py_DECREF( tmp_args_element_name_46 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 145;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_47 = LOOKUP_ATTRIBUTE( tmp_source_name_43, const_str_plain_tagFormatSimple );
    if ( tmp_args_element_name_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_called_name_32 );
        Py_DECREF( tmp_called_name_33 );
        Py_DECREF( tmp_kw_name_10 );
        Py_DECREF( tmp_called_name_35 );
        Py_DECREF( tmp_args_element_name_46 );

        exception_lineno = 145;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_48 = const_int_pos_7;
    frame_function->f_lineno = 145;
    tmp_dict_value_10 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_35, tmp_args_element_name_46, tmp_args_element_name_47, tmp_args_element_name_48 );
    Py_DECREF( tmp_called_name_35 );
    Py_DECREF( tmp_args_element_name_46 );
    Py_DECREF( tmp_args_element_name_47 );
    if ( tmp_dict_value_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_called_name_32 );
        Py_DECREF( tmp_called_name_33 );
        Py_DECREF( tmp_kw_name_10 );

        exception_lineno = 145;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_10 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_10, tmp_dict_key_10, tmp_dict_value_10 );
    Py_DECREF( tmp_dict_value_10 );
    frame_function->f_lineno = 145;
    tmp_args_element_name_45 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_33, tmp_kw_name_10 );
    Py_DECREF( tmp_called_name_33 );
    Py_DECREF( tmp_kw_name_10 );
    if ( tmp_args_element_name_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_called_name_32 );

        exception_lineno = 145;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 145;
    tmp_args_element_name_43 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_32, tmp_args_element_name_44, tmp_args_element_name_45 );
    Py_DECREF( tmp_called_name_32 );
    Py_DECREF( tmp_args_element_name_45 );
    if ( tmp_args_element_name_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );

        exception_lineno = 145;
        goto frame_exception_exit_1;
    }
    tmp_source_name_44 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_44 == NULL )
    {
        tmp_source_name_44 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_44 == NULL ))
        {
            tmp_source_name_44 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_44 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_43 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 146;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_36 = LOOKUP_ATTRIBUTE( tmp_source_name_44, const_str_plain_NamedType );
    if ( tmp_called_name_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );

        exception_lineno = 146;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_50 = const_str_plain_approxMatch;
    tmp_called_name_38 = PyDict_GetItem( locals_dict, const_str_plain_AttributeValueAssertion );

    if ( tmp_called_name_38 == NULL )
    {
        tmp_called_name_38 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeValueAssertion );

        if (unlikely( tmp_called_name_38 == NULL ))
        {
            tmp_called_name_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeValueAssertion );
        }

        if ( tmp_called_name_38 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_called_name_36 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52955 ], 45, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 146;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 146;
    tmp_source_name_45 = CALL_FUNCTION_NO_ARGS( tmp_called_name_38 );
    if ( tmp_source_name_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_called_name_36 );

        exception_lineno = 146;
        goto frame_exception_exit_1;
    }
    tmp_called_name_37 = LOOKUP_ATTRIBUTE( tmp_source_name_45, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_45 );
    if ( tmp_called_name_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_called_name_36 );

        exception_lineno = 146;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_11 = _PyDict_NewPresized( 1 );
    tmp_source_name_46 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_46 == NULL )
    {
        tmp_source_name_46 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_46 == NULL ))
        {
            tmp_source_name_46 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_46 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_called_name_36 );
            Py_DECREF( tmp_called_name_37 );
            Py_DECREF( tmp_kw_name_11 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 146;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_39 = LOOKUP_ATTRIBUTE( tmp_source_name_46, const_str_plain_Tag );
    if ( tmp_called_name_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_called_name_36 );
        Py_DECREF( tmp_called_name_37 );
        Py_DECREF( tmp_kw_name_11 );

        exception_lineno = 146;
        goto frame_exception_exit_1;
    }
    tmp_source_name_47 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_47 == NULL )
    {
        tmp_source_name_47 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_47 == NULL ))
        {
            tmp_source_name_47 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_47 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_called_name_36 );
            Py_DECREF( tmp_called_name_37 );
            Py_DECREF( tmp_kw_name_11 );
            Py_DECREF( tmp_called_name_39 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 146;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_52 = LOOKUP_ATTRIBUTE( tmp_source_name_47, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_called_name_36 );
        Py_DECREF( tmp_called_name_37 );
        Py_DECREF( tmp_kw_name_11 );
        Py_DECREF( tmp_called_name_39 );

        exception_lineno = 146;
        goto frame_exception_exit_1;
    }
    tmp_source_name_48 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_48 == NULL )
    {
        tmp_source_name_48 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_48 == NULL ))
        {
            tmp_source_name_48 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_48 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_called_name_36 );
            Py_DECREF( tmp_called_name_37 );
            Py_DECREF( tmp_kw_name_11 );
            Py_DECREF( tmp_called_name_39 );
            Py_DECREF( tmp_args_element_name_52 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 146;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_53 = LOOKUP_ATTRIBUTE( tmp_source_name_48, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_called_name_36 );
        Py_DECREF( tmp_called_name_37 );
        Py_DECREF( tmp_kw_name_11 );
        Py_DECREF( tmp_called_name_39 );
        Py_DECREF( tmp_args_element_name_52 );

        exception_lineno = 146;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_54 = const_int_pos_8;
    frame_function->f_lineno = 146;
    tmp_dict_value_11 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_39, tmp_args_element_name_52, tmp_args_element_name_53, tmp_args_element_name_54 );
    Py_DECREF( tmp_called_name_39 );
    Py_DECREF( tmp_args_element_name_52 );
    Py_DECREF( tmp_args_element_name_53 );
    if ( tmp_dict_value_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_called_name_36 );
        Py_DECREF( tmp_called_name_37 );
        Py_DECREF( tmp_kw_name_11 );

        exception_lineno = 146;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_11 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_11, tmp_dict_key_11, tmp_dict_value_11 );
    Py_DECREF( tmp_dict_value_11 );
    frame_function->f_lineno = 146;
    tmp_args_element_name_51 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_37, tmp_kw_name_11 );
    Py_DECREF( tmp_called_name_37 );
    Py_DECREF( tmp_kw_name_11 );
    if ( tmp_args_element_name_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_called_name_36 );

        exception_lineno = 146;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 146;
    tmp_args_element_name_49 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_36, tmp_args_element_name_50, tmp_args_element_name_51 );
    Py_DECREF( tmp_called_name_36 );
    Py_DECREF( tmp_args_element_name_51 );
    if ( tmp_args_element_name_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );

        exception_lineno = 146;
        goto frame_exception_exit_1;
    }
    tmp_source_name_49 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_49 == NULL )
    {
        tmp_source_name_49 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_49 == NULL ))
        {
            tmp_source_name_49 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_49 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_args_element_name_49 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 147;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_40 = LOOKUP_ATTRIBUTE( tmp_source_name_49, const_str_plain_NamedType );
    if ( tmp_called_name_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_49 );

        exception_lineno = 147;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_56 = const_str_plain_extensibleMatch;
    tmp_called_name_42 = PyDict_GetItem( locals_dict, const_str_plain_MatchingRuleAssertion );

    if ( tmp_called_name_42 == NULL )
    {
        tmp_called_name_42 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_MatchingRuleAssertion );

        if (unlikely( tmp_called_name_42 == NULL ))
        {
            tmp_called_name_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MatchingRuleAssertion );
        }

        if ( tmp_called_name_42 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_args_element_name_49 );
            Py_DECREF( tmp_called_name_40 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53037 ], 43, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 147;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 147;
    tmp_source_name_50 = CALL_FUNCTION_NO_ARGS( tmp_called_name_42 );
    if ( tmp_source_name_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_49 );
        Py_DECREF( tmp_called_name_40 );

        exception_lineno = 147;
        goto frame_exception_exit_1;
    }
    tmp_called_name_41 = LOOKUP_ATTRIBUTE( tmp_source_name_50, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_50 );
    if ( tmp_called_name_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_49 );
        Py_DECREF( tmp_called_name_40 );

        exception_lineno = 147;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_12 = _PyDict_NewPresized( 1 );
    tmp_source_name_51 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_51 == NULL )
    {
        tmp_source_name_51 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_51 == NULL ))
        {
            tmp_source_name_51 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_51 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_args_element_name_49 );
            Py_DECREF( tmp_called_name_40 );
            Py_DECREF( tmp_called_name_41 );
            Py_DECREF( tmp_kw_name_12 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 147;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_43 = LOOKUP_ATTRIBUTE( tmp_source_name_51, const_str_plain_Tag );
    if ( tmp_called_name_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_49 );
        Py_DECREF( tmp_called_name_40 );
        Py_DECREF( tmp_called_name_41 );
        Py_DECREF( tmp_kw_name_12 );

        exception_lineno = 147;
        goto frame_exception_exit_1;
    }
    tmp_source_name_52 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_52 == NULL )
    {
        tmp_source_name_52 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_52 == NULL ))
        {
            tmp_source_name_52 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_52 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_args_element_name_49 );
            Py_DECREF( tmp_called_name_40 );
            Py_DECREF( tmp_called_name_41 );
            Py_DECREF( tmp_kw_name_12 );
            Py_DECREF( tmp_called_name_43 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 147;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_58 = LOOKUP_ATTRIBUTE( tmp_source_name_52, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_58 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_49 );
        Py_DECREF( tmp_called_name_40 );
        Py_DECREF( tmp_called_name_41 );
        Py_DECREF( tmp_kw_name_12 );
        Py_DECREF( tmp_called_name_43 );

        exception_lineno = 147;
        goto frame_exception_exit_1;
    }
    tmp_source_name_53 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_53 == NULL )
    {
        tmp_source_name_53 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_53 == NULL ))
        {
            tmp_source_name_53 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_53 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_args_element_name_49 );
            Py_DECREF( tmp_called_name_40 );
            Py_DECREF( tmp_called_name_41 );
            Py_DECREF( tmp_kw_name_12 );
            Py_DECREF( tmp_called_name_43 );
            Py_DECREF( tmp_args_element_name_58 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 147;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_59 = LOOKUP_ATTRIBUTE( tmp_source_name_53, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_59 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_49 );
        Py_DECREF( tmp_called_name_40 );
        Py_DECREF( tmp_called_name_41 );
        Py_DECREF( tmp_kw_name_12 );
        Py_DECREF( tmp_called_name_43 );
        Py_DECREF( tmp_args_element_name_58 );

        exception_lineno = 147;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_60 = const_int_pos_9;
    frame_function->f_lineno = 147;
    tmp_dict_value_12 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_43, tmp_args_element_name_58, tmp_args_element_name_59, tmp_args_element_name_60 );
    Py_DECREF( tmp_called_name_43 );
    Py_DECREF( tmp_args_element_name_58 );
    Py_DECREF( tmp_args_element_name_59 );
    if ( tmp_dict_value_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_49 );
        Py_DECREF( tmp_called_name_40 );
        Py_DECREF( tmp_called_name_41 );
        Py_DECREF( tmp_kw_name_12 );

        exception_lineno = 147;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_12 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_12, tmp_dict_key_12, tmp_dict_value_12 );
    Py_DECREF( tmp_dict_value_12 );
    frame_function->f_lineno = 147;
    tmp_args_element_name_57 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_41, tmp_kw_name_12 );
    Py_DECREF( tmp_called_name_41 );
    Py_DECREF( tmp_kw_name_12 );
    if ( tmp_args_element_name_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_49 );
        Py_DECREF( tmp_called_name_40 );

        exception_lineno = 147;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 147;
    tmp_args_element_name_55 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_40, tmp_args_element_name_56, tmp_args_element_name_57 );
    Py_DECREF( tmp_called_name_40 );
    Py_DECREF( tmp_args_element_name_57 );
    if ( tmp_args_element_name_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_49 );

        exception_lineno = 147;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 147;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS10( tmp_called_name_1, tmp_args_element_name_1, tmp_args_element_name_7, tmp_args_element_name_13, tmp_args_element_name_19, tmp_args_element_name_25, tmp_args_element_name_31, tmp_args_element_name_37, tmp_args_element_name_43, tmp_args_element_name_49, tmp_args_element_name_55 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    Py_DECREF( tmp_args_element_name_7 );
    Py_DECREF( tmp_args_element_name_13 );
    Py_DECREF( tmp_args_element_name_19 );
    Py_DECREF( tmp_args_element_name_25 );
    Py_DECREF( tmp_args_element_name_31 );
    Py_DECREF( tmp_args_element_name_37 );
    Py_DECREF( tmp_args_element_name_43 );
    Py_DECREF( tmp_args_element_name_49 );
    Py_DECREF( tmp_args_element_name_55 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 147;
        goto frame_exception_exit_1;
    }
    assert( var_componentType == NULL );
    var_componentType = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 136;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 136;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 136;
                goto frame_exception_exit_1;
            }
            }
            if ( var_componentType != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_componentType,
                    var_componentType
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 136;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_44 = closure_pyasn1_modules$rfc2251_class_creation_26__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_Filter;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_26__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_componentType != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_componentType,
            var_componentType
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_13 = closure_pyasn1_modules$rfc2251_class_creation_26__class_decl_dict;

    tmp_assign_source_4 = CALL_FUNCTION( tmp_called_name_44, tmp_args_name_1, tmp_kw_name_13 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_4;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_26_Filter_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_26_Filter_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_27_SearchRequest_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_27__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_27__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_27__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_27__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_tagSet = NULL;
    PyObject *var_componentType = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_args_element_name_20;
    PyObject *tmp_args_element_name_21;
    PyObject *tmp_args_element_name_22;
    PyObject *tmp_args_element_name_23;
    PyObject *tmp_args_element_name_24;
    PyObject *tmp_args_element_name_25;
    PyObject *tmp_args_element_name_26;
    PyObject *tmp_args_element_name_27;
    PyObject *tmp_args_element_name_28;
    PyObject *tmp_args_element_name_29;
    PyObject *tmp_args_element_name_30;
    PyObject *tmp_args_element_name_31;
    PyObject *tmp_args_element_name_32;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_called_name_16;
    PyObject *tmp_called_name_17;
    PyObject *tmp_called_name_18;
    PyObject *tmp_called_name_19;
    PyObject *tmp_called_name_20;
    PyObject *tmp_called_name_21;
    PyObject *tmp_called_name_22;
    PyObject *tmp_called_name_23;
    PyObject *tmp_called_name_24;
    PyObject *tmp_called_name_25;
    PyObject *tmp_called_name_26;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    PyObject *tmp_kw_name_3;
    PyObject *tmp_kw_name_4;
    PyObject *tmp_kw_name_5;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_source_name_22;
    PyObject *tmp_source_name_23;
    PyObject *tmp_source_name_24;
    PyObject *tmp_source_name_25;
    PyObject *tmp_source_name_26;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_27__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_SearchRequest;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_ae47938dc0e08d6e637f809497487beb, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 153;
            goto frame_exception_exit_1;
        }

    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_Sequence );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 153;
        goto frame_exception_exit_1;
    }
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_tagSet );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 153;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_tagImplicitly );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 153;
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 154;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_Tag );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 154;
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 154;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_tagClassApplication );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 154;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_6 == NULL )
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_6 == NULL ))
        {
            tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 154;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 154;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = const_int_pos_3;
    frame_function->f_lineno = 154;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 154;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 154;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, tmp_args_element_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 154;
        goto frame_exception_exit_1;
    }
    assert( var_tagSet == NULL );
    var_tagSet = tmp_assign_source_3;

    tmp_source_name_7 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_7 == NULL )
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_7 == NULL ))
        {
            tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_7 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 156;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_NamedTypes );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 156;
        goto frame_exception_exit_1;
    }
    tmp_source_name_8 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_8 == NULL )
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_8 == NULL ))
        {
            tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_8 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 157;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_NamedType );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 157;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_6 = const_str_plain_baseObject;
    tmp_called_name_5 = PyDict_GetItem( locals_dict, const_str_plain_LDAPDN );

    if ( tmp_called_name_5 == NULL )
    {
        tmp_called_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPDN );

        if (unlikely( tmp_called_name_5 == NULL ))
        {
            tmp_called_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPDN );
        }

        if ( tmp_called_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_called_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52807 ], 28, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 157;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 157;
    tmp_args_element_name_7 = CALL_FUNCTION_NO_ARGS( tmp_called_name_5 );
    if ( tmp_args_element_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 157;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 157;
    tmp_args_element_name_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, tmp_args_element_name_6, tmp_args_element_name_7 );
    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_args_element_name_7 );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 157;
        goto frame_exception_exit_1;
    }
    tmp_source_name_9 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_9 == NULL )
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_9 == NULL ))
        {
            tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_9 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 158;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_NamedType );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );

        exception_lineno = 158;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_9 = const_str_plain_scope;
    tmp_source_name_10 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_10 == NULL )
    {
        tmp_source_name_10 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_10 == NULL ))
        {
            tmp_source_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_10 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_called_name_6 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 158;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_Enumerated );
    if ( tmp_called_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_6 );

        exception_lineno = 158;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_source_name_11 = PyDict_GetItem( locals_dict, const_str_plain_namedval );

    if ( tmp_source_name_11 == NULL )
    {
        tmp_source_name_11 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedval );

        if (unlikely( tmp_source_name_11 == NULL ))
        {
            tmp_source_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedval );
        }

        if ( tmp_source_name_11 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_kw_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 51740 ], 30, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 158;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_NamedValues );
    if ( tmp_called_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 158;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = const_tuple_str_plain_baseObject_int_0_tuple;
    tmp_call_arg_element_2 = const_tuple_str_plain_singleLevel_int_pos_1_tuple;
    tmp_call_arg_element_3 = const_tuple_str_plain_wholeSubtree_int_pos_2_tuple;
    frame_function->f_lineno = 158;
    tmp_dict_value_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_8, tmp_call_arg_element_1, tmp_call_arg_element_2, tmp_call_arg_element_3 );
    Py_DECREF( tmp_called_name_8 );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 158;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_1 = const_str_plain_namedValues;
    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    frame_function->f_lineno = 158;
    tmp_args_element_name_10 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_7, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_7 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_args_element_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_6 );

        exception_lineno = 158;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 158;
    tmp_args_element_name_8 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_6, tmp_args_element_name_9, tmp_args_element_name_10 );
    Py_DECREF( tmp_called_name_6 );
    Py_DECREF( tmp_args_element_name_10 );
    if ( tmp_args_element_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );

        exception_lineno = 158;
        goto frame_exception_exit_1;
    }
    tmp_source_name_12 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_12 == NULL )
    {
        tmp_source_name_12 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_12 == NULL ))
        {
            tmp_source_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_12 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 159;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_NamedType );
    if ( tmp_called_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );

        exception_lineno = 159;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_12 = const_str_plain_derefAliases;
    tmp_source_name_13 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_13 == NULL )
    {
        tmp_source_name_13 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_13 == NULL ))
        {
            tmp_source_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_13 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_called_name_9 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 159;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_Enumerated );
    if ( tmp_called_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_called_name_9 );

        exception_lineno = 159;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_2 = _PyDict_NewPresized( 1 );
    tmp_source_name_14 = PyDict_GetItem( locals_dict, const_str_plain_namedval );

    if ( tmp_source_name_14 == NULL )
    {
        tmp_source_name_14 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedval );

        if (unlikely( tmp_source_name_14 == NULL ))
        {
            tmp_source_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedval );
        }

        if ( tmp_source_name_14 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_called_name_9 );
            Py_DECREF( tmp_called_name_10 );
            Py_DECREF( tmp_kw_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 51740 ], 30, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 159;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_NamedValues );
    if ( tmp_called_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_kw_name_2 );

        exception_lineno = 159;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_4 = const_tuple_str_plain_neverDerefAliases_int_0_tuple;
    tmp_call_arg_element_5 = const_tuple_str_plain_derefInSearching_int_pos_1_tuple;
    tmp_call_arg_element_6 = const_tuple_str_plain_derefFindingBaseObj_int_pos_2_tuple;
    tmp_call_arg_element_7 = const_tuple_str_plain_derefAlways_int_pos_3_tuple;
    frame_function->f_lineno = 159;
    tmp_dict_value_2 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_11, tmp_call_arg_element_4, tmp_call_arg_element_5, tmp_call_arg_element_6, tmp_call_arg_element_7 );
    Py_DECREF( tmp_called_name_11 );
    if ( tmp_dict_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_kw_name_2 );

        exception_lineno = 159;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_2 = const_str_plain_namedValues;
    PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
    Py_DECREF( tmp_dict_value_2 );
    frame_function->f_lineno = 159;
    tmp_args_element_name_13 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_10, tmp_kw_name_2 );
    Py_DECREF( tmp_called_name_10 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_args_element_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_called_name_9 );

        exception_lineno = 159;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 159;
    tmp_args_element_name_11 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_9, tmp_args_element_name_12, tmp_args_element_name_13 );
    Py_DECREF( tmp_called_name_9 );
    Py_DECREF( tmp_args_element_name_13 );
    if ( tmp_args_element_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );

        exception_lineno = 159;
        goto frame_exception_exit_1;
    }
    tmp_source_name_15 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_15 == NULL )
    {
        tmp_source_name_15 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_15 == NULL ))
        {
            tmp_source_name_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_15 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 160;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_NamedType );
    if ( tmp_called_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );

        exception_lineno = 160;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_15 = const_str_plain_sizeLimit;
    tmp_source_name_17 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_17 == NULL )
    {
        tmp_source_name_17 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_17 == NULL ))
        {
            tmp_source_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_17 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_called_name_12 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 160;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_Integer );
    if ( tmp_called_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_called_name_12 );

        exception_lineno = 160;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 160;
    tmp_source_name_16 = CALL_FUNCTION_NO_ARGS( tmp_called_name_14 );
    Py_DECREF( tmp_called_name_14 );
    if ( tmp_source_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_called_name_12 );

        exception_lineno = 160;
        goto frame_exception_exit_1;
    }
    tmp_called_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_16 );
    if ( tmp_called_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_called_name_12 );

        exception_lineno = 160;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_3 = _PyDict_NewPresized( 1 );
    tmp_source_name_18 = PyDict_GetItem( locals_dict, const_str_plain_constraint );

    if ( tmp_source_name_18 == NULL )
    {
        tmp_source_name_18 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_constraint );

        if (unlikely( tmp_source_name_18 == NULL ))
        {
            tmp_source_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constraint );
        }

        if ( tmp_source_name_18 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_called_name_12 );
            Py_DECREF( tmp_called_name_13 );
            Py_DECREF( tmp_kw_name_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 49934 ], 32, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 160;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_ValueRangeConstraint );
    if ( tmp_called_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_kw_name_3 );

        exception_lineno = 160;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_17 = const_int_0;
    tmp_args_element_name_18 = PyDict_GetItem( locals_dict, const_str_plain_maxInt );

    if ( tmp_args_element_name_18 == NULL )
    {
        tmp_args_element_name_18 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_maxInt );

        if (unlikely( tmp_args_element_name_18 == NULL ))
        {
            tmp_args_element_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_maxInt );
        }

        if ( tmp_args_element_name_18 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_called_name_12 );
            Py_DECREF( tmp_called_name_13 );
            Py_DECREF( tmp_kw_name_3 );
            Py_DECREF( tmp_called_name_15 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53138 ], 28, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 160;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 160;
    tmp_dict_value_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_15, tmp_args_element_name_17, tmp_args_element_name_18 );
    Py_DECREF( tmp_called_name_15 );
    if ( tmp_dict_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_kw_name_3 );

        exception_lineno = 160;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_3 = const_str_plain_subtypeSpec;
    PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_3, tmp_dict_value_3 );
    Py_DECREF( tmp_dict_value_3 );
    frame_function->f_lineno = 160;
    tmp_args_element_name_16 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_13, tmp_kw_name_3 );
    Py_DECREF( tmp_called_name_13 );
    Py_DECREF( tmp_kw_name_3 );
    if ( tmp_args_element_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_called_name_12 );

        exception_lineno = 160;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 160;
    tmp_args_element_name_14 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_12, tmp_args_element_name_15, tmp_args_element_name_16 );
    Py_DECREF( tmp_called_name_12 );
    Py_DECREF( tmp_args_element_name_16 );
    if ( tmp_args_element_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );

        exception_lineno = 160;
        goto frame_exception_exit_1;
    }
    tmp_source_name_19 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_19 == NULL )
    {
        tmp_source_name_19 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_19 == NULL ))
        {
            tmp_source_name_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_19 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_args_element_name_14 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 161;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_16 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_NamedType );
    if ( tmp_called_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );

        exception_lineno = 161;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_20 = const_str_plain_timeLimit;
    tmp_source_name_21 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_21 == NULL )
    {
        tmp_source_name_21 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_21 == NULL ))
        {
            tmp_source_name_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_21 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_args_element_name_14 );
            Py_DECREF( tmp_called_name_16 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 161;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_18 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_Integer );
    if ( tmp_called_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_called_name_16 );

        exception_lineno = 161;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 161;
    tmp_source_name_20 = CALL_FUNCTION_NO_ARGS( tmp_called_name_18 );
    Py_DECREF( tmp_called_name_18 );
    if ( tmp_source_name_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_called_name_16 );

        exception_lineno = 161;
        goto frame_exception_exit_1;
    }
    tmp_called_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_20 );
    if ( tmp_called_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_called_name_16 );

        exception_lineno = 161;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_4 = _PyDict_NewPresized( 1 );
    tmp_source_name_22 = PyDict_GetItem( locals_dict, const_str_plain_constraint );

    if ( tmp_source_name_22 == NULL )
    {
        tmp_source_name_22 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_constraint );

        if (unlikely( tmp_source_name_22 == NULL ))
        {
            tmp_source_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constraint );
        }

        if ( tmp_source_name_22 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_args_element_name_14 );
            Py_DECREF( tmp_called_name_16 );
            Py_DECREF( tmp_called_name_17 );
            Py_DECREF( tmp_kw_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 49934 ], 32, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 161;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_19 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_ValueRangeConstraint );
    if ( tmp_called_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_kw_name_4 );

        exception_lineno = 161;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_22 = const_int_0;
    tmp_args_element_name_23 = PyDict_GetItem( locals_dict, const_str_plain_maxInt );

    if ( tmp_args_element_name_23 == NULL )
    {
        tmp_args_element_name_23 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_maxInt );

        if (unlikely( tmp_args_element_name_23 == NULL ))
        {
            tmp_args_element_name_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_maxInt );
        }

        if ( tmp_args_element_name_23 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_args_element_name_14 );
            Py_DECREF( tmp_called_name_16 );
            Py_DECREF( tmp_called_name_17 );
            Py_DECREF( tmp_kw_name_4 );
            Py_DECREF( tmp_called_name_19 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53138 ], 28, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 161;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 161;
    tmp_dict_value_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_19, tmp_args_element_name_22, tmp_args_element_name_23 );
    Py_DECREF( tmp_called_name_19 );
    if ( tmp_dict_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_kw_name_4 );

        exception_lineno = 161;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_4 = const_str_plain_subtypeSpec;
    PyDict_SetItem( tmp_kw_name_4, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    frame_function->f_lineno = 161;
    tmp_args_element_name_21 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_17, tmp_kw_name_4 );
    Py_DECREF( tmp_called_name_17 );
    Py_DECREF( tmp_kw_name_4 );
    if ( tmp_args_element_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_called_name_16 );

        exception_lineno = 161;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 161;
    tmp_args_element_name_19 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_16, tmp_args_element_name_20, tmp_args_element_name_21 );
    Py_DECREF( tmp_called_name_16 );
    Py_DECREF( tmp_args_element_name_21 );
    if ( tmp_args_element_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );

        exception_lineno = 161;
        goto frame_exception_exit_1;
    }
    tmp_source_name_23 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_23 == NULL )
    {
        tmp_source_name_23 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_23 == NULL ))
        {
            tmp_source_name_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_23 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_args_element_name_14 );
            Py_DECREF( tmp_args_element_name_19 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 162;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_20 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain_NamedType );
    if ( tmp_called_name_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_args_element_name_19 );

        exception_lineno = 162;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_25 = const_str_plain_typesOnly;
    tmp_source_name_24 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_24 == NULL )
    {
        tmp_source_name_24 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_24 == NULL ))
        {
            tmp_source_name_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_24 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_args_element_name_14 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_called_name_20 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 162;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_21 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_Boolean );
    if ( tmp_called_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_called_name_20 );

        exception_lineno = 162;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 162;
    tmp_args_element_name_26 = CALL_FUNCTION_NO_ARGS( tmp_called_name_21 );
    Py_DECREF( tmp_called_name_21 );
    if ( tmp_args_element_name_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_called_name_20 );

        exception_lineno = 162;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 162;
    tmp_args_element_name_24 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_20, tmp_args_element_name_25, tmp_args_element_name_26 );
    Py_DECREF( tmp_called_name_20 );
    Py_DECREF( tmp_args_element_name_26 );
    if ( tmp_args_element_name_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_args_element_name_19 );

        exception_lineno = 162;
        goto frame_exception_exit_1;
    }
    tmp_source_name_25 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_25 == NULL )
    {
        tmp_source_name_25 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_25 == NULL ))
        {
            tmp_source_name_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_25 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_args_element_name_14 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_24 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 163;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_22 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain_NamedType );
    if ( tmp_called_name_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_24 );

        exception_lineno = 163;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_28 = const_str_plain_filter;
    tmp_called_name_23 = PyDict_GetItem( locals_dict, const_str_plain_Filter );

    if ( tmp_called_name_23 == NULL )
    {
        tmp_called_name_23 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_Filter );

        if (unlikely( tmp_called_name_23 == NULL ))
        {
            tmp_called_name_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Filter );
        }

        if ( tmp_called_name_23 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_args_element_name_14 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_24 );
            Py_DECREF( tmp_called_name_22 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53166 ], 28, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 163;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 163;
    tmp_args_element_name_29 = CALL_FUNCTION_NO_ARGS( tmp_called_name_23 );
    if ( tmp_args_element_name_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_24 );
        Py_DECREF( tmp_called_name_22 );

        exception_lineno = 163;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 163;
    tmp_args_element_name_27 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_22, tmp_args_element_name_28, tmp_args_element_name_29 );
    Py_DECREF( tmp_called_name_22 );
    Py_DECREF( tmp_args_element_name_29 );
    if ( tmp_args_element_name_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_24 );

        exception_lineno = 163;
        goto frame_exception_exit_1;
    }
    tmp_source_name_26 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_26 == NULL )
    {
        tmp_source_name_26 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_26 == NULL ))
        {
            tmp_source_name_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_26 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_args_element_name_14 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_24 );
            Py_DECREF( tmp_args_element_name_27 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 164;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_24 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain_NamedType );
    if ( tmp_called_name_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_24 );
        Py_DECREF( tmp_args_element_name_27 );

        exception_lineno = 164;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_31 = const_str_plain_attributes;
    tmp_called_name_25 = PyDict_GetItem( locals_dict, const_str_plain_AttributeDescriptionList );

    if ( tmp_called_name_25 == NULL )
    {
        tmp_called_name_25 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeDescriptionList );

        if (unlikely( tmp_called_name_25 == NULL ))
        {
            tmp_called_name_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeDescriptionList );
        }

        if ( tmp_called_name_25 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_args_element_name_14 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_24 );
            Py_DECREF( tmp_args_element_name_27 );
            Py_DECREF( tmp_called_name_24 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53194 ], 46, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 164;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 164;
    tmp_args_element_name_32 = CALL_FUNCTION_NO_ARGS( tmp_called_name_25 );
    if ( tmp_args_element_name_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_24 );
        Py_DECREF( tmp_args_element_name_27 );
        Py_DECREF( tmp_called_name_24 );

        exception_lineno = 164;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 164;
    tmp_args_element_name_30 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_24, tmp_args_element_name_31, tmp_args_element_name_32 );
    Py_DECREF( tmp_called_name_24 );
    Py_DECREF( tmp_args_element_name_32 );
    if ( tmp_args_element_name_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_24 );
        Py_DECREF( tmp_args_element_name_27 );

        exception_lineno = 164;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 164;
    tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS8( tmp_called_name_3, tmp_args_element_name_5, tmp_args_element_name_8, tmp_args_element_name_11, tmp_args_element_name_14, tmp_args_element_name_19, tmp_args_element_name_24, tmp_args_element_name_27, tmp_args_element_name_30 );
    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_5 );
    Py_DECREF( tmp_args_element_name_8 );
    Py_DECREF( tmp_args_element_name_11 );
    Py_DECREF( tmp_args_element_name_14 );
    Py_DECREF( tmp_args_element_name_19 );
    Py_DECREF( tmp_args_element_name_24 );
    Py_DECREF( tmp_args_element_name_27 );
    Py_DECREF( tmp_args_element_name_30 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 164;
        goto frame_exception_exit_1;
    }
    assert( var_componentType == NULL );
    var_componentType = tmp_assign_source_4;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 152;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 152;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 152;
                goto frame_exception_exit_1;
            }
            }
            if ( var_tagSet != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_tagSet,
                    var_tagSet
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 152;
                goto frame_exception_exit_1;
            }
            }
            if ( var_componentType != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_componentType,
                    var_componentType
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 152;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_26 = closure_pyasn1_modules$rfc2251_class_creation_27__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_SearchRequest;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_27__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_tagSet != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_tagSet,
            var_tagSet
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_componentType != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_componentType,
            var_componentType
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_5 = closure_pyasn1_modules$rfc2251_class_creation_27__class_decl_dict;

    tmp_assign_source_5 = CALL_FUNCTION( tmp_called_name_26, tmp_args_name_1, tmp_kw_name_5 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_5;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_27_SearchRequest_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_27_SearchRequest_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_28_UnbindRequest_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_28__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_28__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_28__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_28__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_tagSet = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_28__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_UnbindRequest;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_294d6b59b5d966299571bb0f2af8586c, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 168;
            goto frame_exception_exit_1;
        }

    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_Sequence );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 168;
        goto frame_exception_exit_1;
    }
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_tagSet );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 168;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_tagImplicitly );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 168;
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 169;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_Tag );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 169;
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 169;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_tagClassApplication );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 169;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_6 == NULL )
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_6 == NULL ))
        {
            tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 169;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_tagFormatSimple );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 169;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = const_int_pos_2;
    frame_function->f_lineno = 169;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 169;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 169;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, tmp_args_element_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 169;
        goto frame_exception_exit_1;
    }
    assert( var_tagSet == NULL );
    var_tagSet = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 167;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 167;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 167;
                goto frame_exception_exit_1;
            }
            }
            if ( var_tagSet != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_tagSet,
                    var_tagSet
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 167;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_3 = closure_pyasn1_modules$rfc2251_class_creation_28__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_UnbindRequest;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_28__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_tagSet != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_tagSet,
            var_tagSet
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_28__class_decl_dict;

    tmp_assign_source_4 = CALL_FUNCTION( tmp_called_name_3, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_4;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_28_UnbindRequest_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_28_UnbindRequest_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_29_BindResponse_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_29__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_29__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_29__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_29__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_tagSet = NULL;
    PyObject *var_componentType = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_args_element_name_20;
    PyObject *tmp_args_element_name_21;
    PyObject *tmp_args_element_name_22;
    PyObject *tmp_args_element_name_23;
    PyObject *tmp_args_element_name_24;
    PyObject *tmp_args_element_name_25;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_arg_element_8;
    PyObject *tmp_call_arg_element_9;
    PyObject *tmp_call_arg_element_10;
    PyObject *tmp_call_arg_element_11;
    PyObject *tmp_call_arg_element_12;
    PyObject *tmp_call_arg_element_13;
    PyObject *tmp_call_arg_element_14;
    PyObject *tmp_call_arg_element_15;
    PyObject *tmp_call_arg_element_16;
    PyObject *tmp_call_arg_element_17;
    PyObject *tmp_call_arg_element_18;
    PyObject *tmp_call_arg_element_19;
    PyObject *tmp_call_arg_element_20;
    PyObject *tmp_call_arg_element_21;
    PyObject *tmp_call_arg_element_22;
    PyObject *tmp_call_arg_element_23;
    PyObject *tmp_call_arg_element_24;
    PyObject *tmp_call_arg_element_25;
    PyObject *tmp_call_arg_element_26;
    PyObject *tmp_call_arg_element_27;
    PyObject *tmp_call_arg_element_28;
    PyObject *tmp_call_arg_element_29;
    PyObject *tmp_call_arg_element_30;
    PyObject *tmp_call_arg_element_31;
    PyObject *tmp_call_arg_element_32;
    PyObject *tmp_call_arg_element_33;
    PyObject *tmp_call_arg_element_34;
    PyObject *tmp_call_arg_element_35;
    PyObject *tmp_call_arg_element_36;
    PyObject *tmp_call_arg_element_37;
    PyObject *tmp_call_arg_element_38;
    PyObject *tmp_call_arg_element_39;
    PyObject *tmp_call_arg_element_40;
    PyObject *tmp_call_arg_element_41;
    PyObject *tmp_call_arg_element_42;
    PyObject *tmp_call_arg_element_43;
    PyObject *tmp_call_arg_element_44;
    PyObject *tmp_call_arg_element_45;
    PyObject *tmp_call_arg_element_46;
    PyObject *tmp_call_arg_element_47;
    PyObject *tmp_call_arg_element_48;
    PyObject *tmp_call_arg_element_49;
    PyObject *tmp_call_arg_element_50;
    PyObject *tmp_call_arg_element_51;
    PyObject *tmp_call_arg_element_52;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_called_name_16;
    PyObject *tmp_called_name_17;
    PyObject *tmp_called_name_18;
    PyObject *tmp_called_name_19;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    PyObject *tmp_kw_name_3;
    PyObject *tmp_kw_name_4;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_source_name_22;
    PyObject *tmp_source_name_23;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_29__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_BindResponse;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_7ab1e00a32c35979a51b27c9e6de58db, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 173;
            goto frame_exception_exit_1;
        }

    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_Sequence );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 173;
        goto frame_exception_exit_1;
    }
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_tagSet );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 173;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_tagImplicitly );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 173;
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 174;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_Tag );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 174;
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 174;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_tagClassApplication );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 174;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_6 == NULL )
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_6 == NULL ))
        {
            tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 174;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 174;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = const_int_pos_1;
    frame_function->f_lineno = 174;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 174;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 174;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, tmp_args_element_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 174;
        goto frame_exception_exit_1;
    }
    assert( var_tagSet == NULL );
    var_tagSet = tmp_assign_source_3;

    tmp_source_name_7 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_7 == NULL )
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_7 == NULL ))
        {
            tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_7 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 176;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_NamedTypes );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 176;
        goto frame_exception_exit_1;
    }
    tmp_source_name_8 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_8 == NULL )
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_8 == NULL ))
        {
            tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_8 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 177;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_NamedType );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 177;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_6 = const_str_plain_resultCode;
    tmp_source_name_9 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_9 == NULL )
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_9 == NULL ))
        {
            tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_9 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_called_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 177;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_Enumerated );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 177;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_source_name_10 = PyDict_GetItem( locals_dict, const_str_plain_namedval );

    if ( tmp_source_name_10 == NULL )
    {
        tmp_source_name_10 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedval );

        if (unlikely( tmp_source_name_10 == NULL ))
        {
            tmp_source_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedval );
        }

        if ( tmp_source_name_10 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 51740 ], 30, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 177;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_NamedValues );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 177;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = const_tuple_str_plain_success_int_0_tuple;
    tmp_call_arg_element_2 = const_tuple_str_plain_operationsError_int_pos_1_tuple;
    tmp_call_arg_element_3 = const_tuple_str_plain_protocolError_int_pos_2_tuple;
    tmp_call_arg_element_4 = const_tuple_str_plain_timeLimitExceeded_int_pos_3_tuple;
    tmp_call_arg_element_5 = const_tuple_str_plain_sizeLimitExceeded_int_pos_4_tuple;
    tmp_call_arg_element_6 = const_tuple_str_plain_compareFalse_int_pos_5_tuple;
    tmp_call_arg_element_7 = const_tuple_str_plain_compareTrue_int_pos_6_tuple;
    tmp_call_arg_element_8 = const_tuple_str_plain_authMethodNotSupported_int_pos_7_tuple;
    tmp_call_arg_element_9 = const_tuple_str_plain_strongAuthRequired_int_pos_8_tuple;
    tmp_call_arg_element_10 = const_tuple_str_digest_4f195fdd223b17cfd65e5f548667eea5_int_pos_9_tuple;
    tmp_call_arg_element_11 = const_tuple_str_plain_referral_int_pos_10_tuple;
    tmp_call_arg_element_12 = const_tuple_str_plain_adminLimitExceeded_int_pos_11_tuple;
    tmp_call_arg_element_13 = const_tuple_str_plain_unavailableCriticalExtension_int_pos_12_tuple;
    tmp_call_arg_element_14 = const_tuple_str_plain_confidentialityRequired_int_pos_13_tuple;
    tmp_call_arg_element_15 = const_tuple_str_plain_saslBindInProgress_int_pos_14_tuple;
    tmp_call_arg_element_16 = const_tuple_str_plain_noSuchAttribute_int_pos_16_tuple;
    tmp_call_arg_element_17 = const_tuple_str_plain_undefinedAttributeType_int_pos_17_tuple;
    tmp_call_arg_element_18 = const_tuple_str_plain_inappropriateMatching_int_pos_18_tuple;
    tmp_call_arg_element_19 = const_tuple_str_plain_constraintViolation_int_pos_19_tuple;
    tmp_call_arg_element_20 = const_tuple_str_plain_attributeOrValueExists_int_pos_20_tuple;
    tmp_call_arg_element_21 = const_tuple_str_plain_invalidAttributeSyntax_int_pos_21_tuple;
    tmp_call_arg_element_22 = const_tuple_str_plain_noSuchObject_int_pos_32_tuple;
    tmp_call_arg_element_23 = const_tuple_str_plain_aliasProblem_int_pos_33_tuple;
    tmp_call_arg_element_24 = const_tuple_str_plain_invalidDNSyntax_int_pos_34_tuple;
    tmp_call_arg_element_25 = const_tuple_str_digest_9ecb9e98a4e53a42773177fd3208db1a_int_pos_35_tuple;
    tmp_call_arg_element_26 = const_tuple_str_plain_aliasDereferencingProblem_int_pos_36_tuple;
    tmp_call_arg_element_27 = const_tuple_str_plain_inappropriateAuthentication_int_pos_48_tuple;
    tmp_call_arg_element_28 = const_tuple_str_plain_invalidCredentials_int_pos_49_tuple;
    tmp_call_arg_element_29 = const_tuple_str_plain_insufficientAccessRights_int_pos_50_tuple;
    tmp_call_arg_element_30 = const_tuple_str_plain_busy_int_pos_51_tuple;
    tmp_call_arg_element_31 = const_tuple_str_plain_unavailable_int_pos_52_tuple;
    tmp_call_arg_element_32 = const_tuple_str_plain_unwillingToPerform_int_pos_53_tuple;
    tmp_call_arg_element_33 = const_tuple_str_plain_loopDetect_int_pos_54_tuple;
    tmp_call_arg_element_34 = const_tuple_str_plain_namingViolation_int_pos_64_tuple;
    tmp_call_arg_element_35 = const_tuple_str_plain_objectClassViolation_int_pos_65_tuple;
    tmp_call_arg_element_36 = const_tuple_str_plain_notAllowedOnNonLeaf_int_pos_66_tuple;
    tmp_call_arg_element_37 = const_tuple_str_plain_notAllowedOnRDN_int_pos_67_tuple;
    tmp_call_arg_element_38 = const_tuple_str_plain_entryAlreadyExists_int_pos_68_tuple;
    tmp_call_arg_element_39 = const_tuple_str_plain_objectClassModsProhibited_int_pos_69_tuple;
    tmp_call_arg_element_40 = const_tuple_str_digest_f95e66addcd2fe5d78faabdeec24b203_int_pos_70_tuple;
    tmp_call_arg_element_41 = const_tuple_str_plain_affectsMultipleDSAs_int_pos_71_tuple;
    tmp_call_arg_element_42 = const_tuple_str_plain_other_int_pos_80_tuple;
    tmp_call_arg_element_43 = const_tuple_str_digest_d5e75659fbb8dd91b485f53529ce6029_int_pos_81_tuple;
    tmp_call_arg_element_44 = const_tuple_str_digest_c62754620912974b073e7a838e355782_int_pos_82_tuple;
    tmp_call_arg_element_45 = const_tuple_str_digest_bc1245ca16d93bd4ffa7e606a9f4b445_int_pos_83_tuple;
    tmp_call_arg_element_46 = const_tuple_str_digest_4f4038e9c5903a8e36f1972133d3d29f_int_pos_84_tuple;
    tmp_call_arg_element_47 = const_tuple_str_digest_94ef42bcdb99c0cee81fc3ee8ef2bafd_int_pos_85_tuple;
    tmp_call_arg_element_48 = const_tuple_str_digest_4902b3b8002754e9aa8d9efc06afe33c_int_pos_86_tuple;
    tmp_call_arg_element_49 = const_tuple_str_digest_c01ff8b1c3f7587c3342d653d8656713_int_pos_87_tuple;
    tmp_call_arg_element_50 = const_tuple_str_digest_374cdbe4bbbf65f37e852f694e02c190_int_pos_88_tuple;
    tmp_call_arg_element_51 = const_tuple_str_digest_9d169277999c894465fa96c2be79fc53_int_pos_89_tuple;
    tmp_call_arg_element_52 = const_tuple_str_digest_941c35c421ec5e89f5ed872865e8a629_int_pos_90_tuple;
    frame_function->f_lineno = 177;
    tmp_dict_value_1 = CALL_FUNCTION_WITH_ARGS52( tmp_called_name_6, tmp_call_arg_element_1, tmp_call_arg_element_2, tmp_call_arg_element_3, tmp_call_arg_element_4, tmp_call_arg_element_5, tmp_call_arg_element_6, tmp_call_arg_element_7, tmp_call_arg_element_8, tmp_call_arg_element_9, tmp_call_arg_element_10, tmp_call_arg_element_11, tmp_call_arg_element_12, tmp_call_arg_element_13, tmp_call_arg_element_14, tmp_call_arg_element_15, tmp_call_arg_element_16, tmp_call_arg_element_17, tmp_call_arg_element_18, tmp_call_arg_element_19, tmp_call_arg_element_20, tmp_call_arg_element_21, tmp_call_arg_element_22, tmp_call_arg_element_23, tmp_call_arg_element_24, tmp_call_arg_element_25, tmp_call_arg_element_26, tmp_call_arg_element_27, tmp_call_arg_element_28, tmp_call_arg_element_29, tmp_call_arg_element_30, tmp_call_arg_element_31, tmp_call_arg_element_32, tmp_call_arg_element_33, tmp_call_arg_element_34, tmp_call_arg_element_35, tmp_call_arg_element_36, tmp_call_arg_element_37, tmp_call_arg_element_38, tmp_call_arg_element_39, tmp_call_arg_element_40, tmp_call_arg_element_41, tmp_call_arg_element_42, tmp_call_arg_element_43, tmp_call_arg_element_44, tmp_call_arg_element_45, tmp_call_arg_element_46, tmp_call_arg_element_47, tmp_call_arg_element_48, tmp_call_arg_element_49, tmp_call_arg_element_50, tmp_call_arg_element_51, tmp_call_arg_element_52 );
    Py_DECREF( tmp_called_name_6 );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 177;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_1 = const_str_plain_namedValues;
    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    frame_function->f_lineno = 177;
    tmp_args_element_name_7 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_5, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_5 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_args_element_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 177;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 177;
    tmp_args_element_name_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, tmp_args_element_name_6, tmp_args_element_name_7 );
    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_args_element_name_7 );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 177;
        goto frame_exception_exit_1;
    }
    tmp_source_name_11 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_11 == NULL )
    {
        tmp_source_name_11 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_11 == NULL ))
        {
            tmp_source_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_11 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 178;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_NamedType );
    if ( tmp_called_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );

        exception_lineno = 178;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_9 = const_str_plain_matchedDN;
    tmp_called_name_8 = PyDict_GetItem( locals_dict, const_str_plain_LDAPDN );

    if ( tmp_called_name_8 == NULL )
    {
        tmp_called_name_8 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPDN );

        if (unlikely( tmp_called_name_8 == NULL ))
        {
            tmp_called_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPDN );
        }

        if ( tmp_called_name_8 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_called_name_7 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52807 ], 28, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 178;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 178;
    tmp_args_element_name_10 = CALL_FUNCTION_NO_ARGS( tmp_called_name_8 );
    if ( tmp_args_element_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_7 );

        exception_lineno = 178;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 178;
    tmp_args_element_name_8 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_7, tmp_args_element_name_9, tmp_args_element_name_10 );
    Py_DECREF( tmp_called_name_7 );
    Py_DECREF( tmp_args_element_name_10 );
    if ( tmp_args_element_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );

        exception_lineno = 178;
        goto frame_exception_exit_1;
    }
    tmp_source_name_12 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_12 == NULL )
    {
        tmp_source_name_12 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_12 == NULL ))
        {
            tmp_source_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_12 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 179;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_NamedType );
    if ( tmp_called_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );

        exception_lineno = 179;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_12 = const_str_plain_errorMessage;
    tmp_called_name_10 = PyDict_GetItem( locals_dict, const_str_plain_LDAPString );

    if ( tmp_called_name_10 == NULL )
    {
        tmp_called_name_10 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPString );

        if (unlikely( tmp_called_name_10 == NULL ))
        {
            tmp_called_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPString );
        }

        if ( tmp_called_name_10 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_called_name_9 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52505 ], 32, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 179;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 179;
    tmp_args_element_name_13 = CALL_FUNCTION_NO_ARGS( tmp_called_name_10 );
    if ( tmp_args_element_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_called_name_9 );

        exception_lineno = 179;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 179;
    tmp_args_element_name_11 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_9, tmp_args_element_name_12, tmp_args_element_name_13 );
    Py_DECREF( tmp_called_name_9 );
    Py_DECREF( tmp_args_element_name_13 );
    if ( tmp_args_element_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );

        exception_lineno = 179;
        goto frame_exception_exit_1;
    }
    tmp_source_name_13 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_13 == NULL )
    {
        tmp_source_name_13 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_13 == NULL ))
        {
            tmp_source_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_13 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 180;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_OptionalNamedType );
    if ( tmp_called_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );

        exception_lineno = 180;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_15 = const_str_plain_referral;
    tmp_called_name_13 = PyDict_GetItem( locals_dict, const_str_plain_Referral );

    if ( tmp_called_name_13 == NULL )
    {
        tmp_called_name_13 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_Referral );

        if (unlikely( tmp_called_name_13 == NULL ))
        {
            tmp_called_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Referral );
        }

        if ( tmp_called_name_13 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_called_name_11 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53240 ], 30, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 180;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 180;
    tmp_source_name_14 = CALL_FUNCTION_NO_ARGS( tmp_called_name_13 );
    if ( tmp_source_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_called_name_11 );

        exception_lineno = 180;
        goto frame_exception_exit_1;
    }
    tmp_called_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_14 );
    if ( tmp_called_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_called_name_11 );

        exception_lineno = 180;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_2 = _PyDict_NewPresized( 1 );
    tmp_source_name_15 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_15 == NULL )
    {
        tmp_source_name_15 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_15 == NULL ))
        {
            tmp_source_name_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_15 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_called_name_11 );
            Py_DECREF( tmp_called_name_12 );
            Py_DECREF( tmp_kw_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 180;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_Tag );
    if ( tmp_called_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_kw_name_2 );

        exception_lineno = 180;
        goto frame_exception_exit_1;
    }
    tmp_source_name_16 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_16 == NULL )
    {
        tmp_source_name_16 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_16 == NULL ))
        {
            tmp_source_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_16 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_called_name_11 );
            Py_DECREF( tmp_called_name_12 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_14 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 180;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_14 );

        exception_lineno = 180;
        goto frame_exception_exit_1;
    }
    tmp_source_name_17 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_17 == NULL )
    {
        tmp_source_name_17 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_17 == NULL ))
        {
            tmp_source_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_17 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_called_name_11 );
            Py_DECREF( tmp_called_name_12 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_14 );
            Py_DECREF( tmp_args_element_name_17 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 180;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_18 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_14 );
        Py_DECREF( tmp_args_element_name_17 );

        exception_lineno = 180;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_19 = const_int_pos_3;
    frame_function->f_lineno = 180;
    tmp_dict_value_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_14, tmp_args_element_name_17, tmp_args_element_name_18, tmp_args_element_name_19 );
    Py_DECREF( tmp_called_name_14 );
    Py_DECREF( tmp_args_element_name_17 );
    Py_DECREF( tmp_args_element_name_18 );
    if ( tmp_dict_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_kw_name_2 );

        exception_lineno = 180;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_2 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
    Py_DECREF( tmp_dict_value_2 );
    frame_function->f_lineno = 180;
    tmp_args_element_name_16 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_12, tmp_kw_name_2 );
    Py_DECREF( tmp_called_name_12 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_args_element_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_called_name_11 );

        exception_lineno = 180;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 180;
    tmp_args_element_name_14 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_11, tmp_args_element_name_15, tmp_args_element_name_16 );
    Py_DECREF( tmp_called_name_11 );
    Py_DECREF( tmp_args_element_name_16 );
    if ( tmp_args_element_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );

        exception_lineno = 180;
        goto frame_exception_exit_1;
    }
    tmp_source_name_18 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_18 == NULL )
    {
        tmp_source_name_18 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_18 == NULL ))
        {
            tmp_source_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_18 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_args_element_name_14 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 181;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_OptionalNamedType );
    if ( tmp_called_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );

        exception_lineno = 181;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_21 = const_str_plain_serverSaslCreds;
    tmp_source_name_20 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_20 == NULL )
    {
        tmp_source_name_20 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_20 == NULL ))
        {
            tmp_source_name_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_20 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_args_element_name_14 );
            Py_DECREF( tmp_called_name_15 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 181;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_OctetString );
    if ( tmp_called_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_called_name_15 );

        exception_lineno = 181;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 181;
    tmp_source_name_19 = CALL_FUNCTION_NO_ARGS( tmp_called_name_17 );
    Py_DECREF( tmp_called_name_17 );
    if ( tmp_source_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_called_name_15 );

        exception_lineno = 181;
        goto frame_exception_exit_1;
    }
    tmp_called_name_16 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_19 );
    if ( tmp_called_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_called_name_15 );

        exception_lineno = 181;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_3 = _PyDict_NewPresized( 1 );
    tmp_source_name_21 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_21 == NULL )
    {
        tmp_source_name_21 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_21 == NULL ))
        {
            tmp_source_name_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_21 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_args_element_name_14 );
            Py_DECREF( tmp_called_name_15 );
            Py_DECREF( tmp_called_name_16 );
            Py_DECREF( tmp_kw_name_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 181;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_18 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_Tag );
    if ( tmp_called_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_kw_name_3 );

        exception_lineno = 181;
        goto frame_exception_exit_1;
    }
    tmp_source_name_22 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_22 == NULL )
    {
        tmp_source_name_22 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_22 == NULL ))
        {
            tmp_source_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_22 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_args_element_name_14 );
            Py_DECREF( tmp_called_name_15 );
            Py_DECREF( tmp_called_name_16 );
            Py_DECREF( tmp_kw_name_3 );
            Py_DECREF( tmp_called_name_18 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 181;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_23 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_kw_name_3 );
        Py_DECREF( tmp_called_name_18 );

        exception_lineno = 181;
        goto frame_exception_exit_1;
    }
    tmp_source_name_23 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_23 == NULL )
    {
        tmp_source_name_23 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_23 == NULL ))
        {
            tmp_source_name_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_23 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_args_element_name_14 );
            Py_DECREF( tmp_called_name_15 );
            Py_DECREF( tmp_called_name_16 );
            Py_DECREF( tmp_kw_name_3 );
            Py_DECREF( tmp_called_name_18 );
            Py_DECREF( tmp_args_element_name_23 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 181;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_24 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_kw_name_3 );
        Py_DECREF( tmp_called_name_18 );
        Py_DECREF( tmp_args_element_name_23 );

        exception_lineno = 181;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_25 = const_int_pos_7;
    frame_function->f_lineno = 181;
    tmp_dict_value_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_18, tmp_args_element_name_23, tmp_args_element_name_24, tmp_args_element_name_25 );
    Py_DECREF( tmp_called_name_18 );
    Py_DECREF( tmp_args_element_name_23 );
    Py_DECREF( tmp_args_element_name_24 );
    if ( tmp_dict_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_kw_name_3 );

        exception_lineno = 181;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_3 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_3, tmp_dict_value_3 );
    Py_DECREF( tmp_dict_value_3 );
    frame_function->f_lineno = 181;
    tmp_args_element_name_22 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_16, tmp_kw_name_3 );
    Py_DECREF( tmp_called_name_16 );
    Py_DECREF( tmp_kw_name_3 );
    if ( tmp_args_element_name_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_called_name_15 );

        exception_lineno = 181;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 181;
    tmp_args_element_name_20 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_15, tmp_args_element_name_21, tmp_args_element_name_22 );
    Py_DECREF( tmp_called_name_15 );
    Py_DECREF( tmp_args_element_name_22 );
    if ( tmp_args_element_name_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );

        exception_lineno = 181;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 181;
    tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS5( tmp_called_name_3, tmp_args_element_name_5, tmp_args_element_name_8, tmp_args_element_name_11, tmp_args_element_name_14, tmp_args_element_name_20 );
    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_5 );
    Py_DECREF( tmp_args_element_name_8 );
    Py_DECREF( tmp_args_element_name_11 );
    Py_DECREF( tmp_args_element_name_14 );
    Py_DECREF( tmp_args_element_name_20 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 181;
        goto frame_exception_exit_1;
    }
    assert( var_componentType == NULL );
    var_componentType = tmp_assign_source_4;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 172;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 172;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 172;
                goto frame_exception_exit_1;
            }
            }
            if ( var_tagSet != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_tagSet,
                    var_tagSet
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 172;
                goto frame_exception_exit_1;
            }
            }
            if ( var_componentType != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_componentType,
                    var_componentType
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 172;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_19 = closure_pyasn1_modules$rfc2251_class_creation_29__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_BindResponse;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_29__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_tagSet != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_tagSet,
            var_tagSet
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_componentType != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_componentType,
            var_componentType
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_4 = closure_pyasn1_modules$rfc2251_class_creation_29__class_decl_dict;

    tmp_assign_source_5 = CALL_FUNCTION( tmp_called_name_19, tmp_args_name_1, tmp_kw_name_4 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_5;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_29_BindResponse_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_29_BindResponse_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_30_LDAPResult_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_30__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_30__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_30__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_30__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_componentType = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_arg_element_8;
    PyObject *tmp_call_arg_element_9;
    PyObject *tmp_call_arg_element_10;
    PyObject *tmp_call_arg_element_11;
    PyObject *tmp_call_arg_element_12;
    PyObject *tmp_call_arg_element_13;
    PyObject *tmp_call_arg_element_14;
    PyObject *tmp_call_arg_element_15;
    PyObject *tmp_call_arg_element_16;
    PyObject *tmp_call_arg_element_17;
    PyObject *tmp_call_arg_element_18;
    PyObject *tmp_call_arg_element_19;
    PyObject *tmp_call_arg_element_20;
    PyObject *tmp_call_arg_element_21;
    PyObject *tmp_call_arg_element_22;
    PyObject *tmp_call_arg_element_23;
    PyObject *tmp_call_arg_element_24;
    PyObject *tmp_call_arg_element_25;
    PyObject *tmp_call_arg_element_26;
    PyObject *tmp_call_arg_element_27;
    PyObject *tmp_call_arg_element_28;
    PyObject *tmp_call_arg_element_29;
    PyObject *tmp_call_arg_element_30;
    PyObject *tmp_call_arg_element_31;
    PyObject *tmp_call_arg_element_32;
    PyObject *tmp_call_arg_element_33;
    PyObject *tmp_call_arg_element_34;
    PyObject *tmp_call_arg_element_35;
    PyObject *tmp_call_arg_element_36;
    PyObject *tmp_call_arg_element_37;
    PyObject *tmp_call_arg_element_38;
    PyObject *tmp_call_arg_element_39;
    PyObject *tmp_call_arg_element_40;
    PyObject *tmp_call_arg_element_41;
    PyObject *tmp_call_arg_element_42;
    PyObject *tmp_call_arg_element_43;
    PyObject *tmp_call_arg_element_44;
    PyObject *tmp_call_arg_element_45;
    PyObject *tmp_call_arg_element_46;
    PyObject *tmp_call_arg_element_47;
    PyObject *tmp_call_arg_element_48;
    PyObject *tmp_call_arg_element_49;
    PyObject *tmp_call_arg_element_50;
    PyObject *tmp_call_arg_element_51;
    PyObject *tmp_call_arg_element_52;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    PyObject *tmp_kw_name_3;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_30__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_LDAPResult;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_54ba82b6adef30254995f738da61b708, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_1 == NULL )
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_1 == NULL ))
        {
            tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 185;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_NamedTypes );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 185;
        goto frame_exception_exit_1;
    }
    tmp_source_name_2 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_2 == NULL )
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_2 == NULL ))
        {
            tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_2 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 186;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_NamedType );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 186;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = const_str_plain_resultCode;
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_3 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 186;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_Enumerated );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 186;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_namedval );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedval );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedval );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_kw_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 51740 ], 30, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 186;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_NamedValues );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 186;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = const_tuple_str_plain_success_int_0_tuple;
    tmp_call_arg_element_2 = const_tuple_str_plain_operationsError_int_pos_1_tuple;
    tmp_call_arg_element_3 = const_tuple_str_plain_protocolError_int_pos_2_tuple;
    tmp_call_arg_element_4 = const_tuple_str_plain_timeLimitExceeded_int_pos_3_tuple;
    tmp_call_arg_element_5 = const_tuple_str_plain_sizeLimitExceeded_int_pos_4_tuple;
    tmp_call_arg_element_6 = const_tuple_str_plain_compareFalse_int_pos_5_tuple;
    tmp_call_arg_element_7 = const_tuple_str_plain_compareTrue_int_pos_6_tuple;
    tmp_call_arg_element_8 = const_tuple_str_plain_authMethodNotSupported_int_pos_7_tuple;
    tmp_call_arg_element_9 = const_tuple_str_plain_strongAuthRequired_int_pos_8_tuple;
    tmp_call_arg_element_10 = const_tuple_str_digest_4f195fdd223b17cfd65e5f548667eea5_int_pos_9_tuple;
    tmp_call_arg_element_11 = const_tuple_str_plain_referral_int_pos_10_tuple;
    tmp_call_arg_element_12 = const_tuple_str_plain_adminLimitExceeded_int_pos_11_tuple;
    tmp_call_arg_element_13 = const_tuple_str_plain_unavailableCriticalExtension_int_pos_12_tuple;
    tmp_call_arg_element_14 = const_tuple_str_plain_confidentialityRequired_int_pos_13_tuple;
    tmp_call_arg_element_15 = const_tuple_str_plain_saslBindInProgress_int_pos_14_tuple;
    tmp_call_arg_element_16 = const_tuple_str_plain_noSuchAttribute_int_pos_16_tuple;
    tmp_call_arg_element_17 = const_tuple_str_plain_undefinedAttributeType_int_pos_17_tuple;
    tmp_call_arg_element_18 = const_tuple_str_plain_inappropriateMatching_int_pos_18_tuple;
    tmp_call_arg_element_19 = const_tuple_str_plain_constraintViolation_int_pos_19_tuple;
    tmp_call_arg_element_20 = const_tuple_str_plain_attributeOrValueExists_int_pos_20_tuple;
    tmp_call_arg_element_21 = const_tuple_str_plain_invalidAttributeSyntax_int_pos_21_tuple;
    tmp_call_arg_element_22 = const_tuple_str_plain_noSuchObject_int_pos_32_tuple;
    tmp_call_arg_element_23 = const_tuple_str_plain_aliasProblem_int_pos_33_tuple;
    tmp_call_arg_element_24 = const_tuple_str_plain_invalidDNSyntax_int_pos_34_tuple;
    tmp_call_arg_element_25 = const_tuple_str_digest_9ecb9e98a4e53a42773177fd3208db1a_int_pos_35_tuple;
    tmp_call_arg_element_26 = const_tuple_str_plain_aliasDereferencingProblem_int_pos_36_tuple;
    tmp_call_arg_element_27 = const_tuple_str_plain_inappropriateAuthentication_int_pos_48_tuple;
    tmp_call_arg_element_28 = const_tuple_str_plain_invalidCredentials_int_pos_49_tuple;
    tmp_call_arg_element_29 = const_tuple_str_plain_insufficientAccessRights_int_pos_50_tuple;
    tmp_call_arg_element_30 = const_tuple_str_plain_busy_int_pos_51_tuple;
    tmp_call_arg_element_31 = const_tuple_str_plain_unavailable_int_pos_52_tuple;
    tmp_call_arg_element_32 = const_tuple_str_plain_unwillingToPerform_int_pos_53_tuple;
    tmp_call_arg_element_33 = const_tuple_str_plain_loopDetect_int_pos_54_tuple;
    tmp_call_arg_element_34 = const_tuple_str_plain_namingViolation_int_pos_64_tuple;
    tmp_call_arg_element_35 = const_tuple_str_plain_objectClassViolation_int_pos_65_tuple;
    tmp_call_arg_element_36 = const_tuple_str_plain_notAllowedOnNonLeaf_int_pos_66_tuple;
    tmp_call_arg_element_37 = const_tuple_str_plain_notAllowedOnRDN_int_pos_67_tuple;
    tmp_call_arg_element_38 = const_tuple_str_plain_entryAlreadyExists_int_pos_68_tuple;
    tmp_call_arg_element_39 = const_tuple_str_plain_objectClassModsProhibited_int_pos_69_tuple;
    tmp_call_arg_element_40 = const_tuple_str_digest_f95e66addcd2fe5d78faabdeec24b203_int_pos_70_tuple;
    tmp_call_arg_element_41 = const_tuple_str_plain_affectsMultipleDSAs_int_pos_71_tuple;
    tmp_call_arg_element_42 = const_tuple_str_plain_other_int_pos_80_tuple;
    tmp_call_arg_element_43 = const_tuple_str_digest_d5e75659fbb8dd91b485f53529ce6029_int_pos_81_tuple;
    tmp_call_arg_element_44 = const_tuple_str_digest_c62754620912974b073e7a838e355782_int_pos_82_tuple;
    tmp_call_arg_element_45 = const_tuple_str_digest_bc1245ca16d93bd4ffa7e606a9f4b445_int_pos_83_tuple;
    tmp_call_arg_element_46 = const_tuple_str_digest_4f4038e9c5903a8e36f1972133d3d29f_int_pos_84_tuple;
    tmp_call_arg_element_47 = const_tuple_str_digest_94ef42bcdb99c0cee81fc3ee8ef2bafd_int_pos_85_tuple;
    tmp_call_arg_element_48 = const_tuple_str_digest_4902b3b8002754e9aa8d9efc06afe33c_int_pos_86_tuple;
    tmp_call_arg_element_49 = const_tuple_str_digest_c01ff8b1c3f7587c3342d653d8656713_int_pos_87_tuple;
    tmp_call_arg_element_50 = const_tuple_str_digest_374cdbe4bbbf65f37e852f694e02c190_int_pos_88_tuple;
    tmp_call_arg_element_51 = const_tuple_str_digest_9d169277999c894465fa96c2be79fc53_int_pos_89_tuple;
    tmp_call_arg_element_52 = const_tuple_str_digest_941c35c421ec5e89f5ed872865e8a629_int_pos_90_tuple;
    frame_function->f_lineno = 186;
    tmp_dict_value_1 = CALL_FUNCTION_WITH_ARGS52( tmp_called_name_4, tmp_call_arg_element_1, tmp_call_arg_element_2, tmp_call_arg_element_3, tmp_call_arg_element_4, tmp_call_arg_element_5, tmp_call_arg_element_6, tmp_call_arg_element_7, tmp_call_arg_element_8, tmp_call_arg_element_9, tmp_call_arg_element_10, tmp_call_arg_element_11, tmp_call_arg_element_12, tmp_call_arg_element_13, tmp_call_arg_element_14, tmp_call_arg_element_15, tmp_call_arg_element_16, tmp_call_arg_element_17, tmp_call_arg_element_18, tmp_call_arg_element_19, tmp_call_arg_element_20, tmp_call_arg_element_21, tmp_call_arg_element_22, tmp_call_arg_element_23, tmp_call_arg_element_24, tmp_call_arg_element_25, tmp_call_arg_element_26, tmp_call_arg_element_27, tmp_call_arg_element_28, tmp_call_arg_element_29, tmp_call_arg_element_30, tmp_call_arg_element_31, tmp_call_arg_element_32, tmp_call_arg_element_33, tmp_call_arg_element_34, tmp_call_arg_element_35, tmp_call_arg_element_36, tmp_call_arg_element_37, tmp_call_arg_element_38, tmp_call_arg_element_39, tmp_call_arg_element_40, tmp_call_arg_element_41, tmp_call_arg_element_42, tmp_call_arg_element_43, tmp_call_arg_element_44, tmp_call_arg_element_45, tmp_call_arg_element_46, tmp_call_arg_element_47, tmp_call_arg_element_48, tmp_call_arg_element_49, tmp_call_arg_element_50, tmp_call_arg_element_51, tmp_call_arg_element_52 );
    Py_DECREF( tmp_called_name_4 );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 186;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_1 = const_str_plain_namedValues;
    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    frame_function->f_lineno = 186;
    tmp_args_element_name_3 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_3, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 186;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 186;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 186;
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 187;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_NamedType );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 187;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_5 = const_str_plain_matchedDN;
    tmp_called_name_6 = PyDict_GetItem( locals_dict, const_str_plain_LDAPDN );

    if ( tmp_called_name_6 == NULL )
    {
        tmp_called_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPDN );

        if (unlikely( tmp_called_name_6 == NULL ))
        {
            tmp_called_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPDN );
        }

        if ( tmp_called_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_5 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52807 ], 28, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 187;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 187;
    tmp_args_element_name_6 = CALL_FUNCTION_NO_ARGS( tmp_called_name_6 );
    if ( tmp_args_element_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_5 );

        exception_lineno = 187;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 187;
    tmp_args_element_name_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_5, tmp_args_element_name_5, tmp_args_element_name_6 );
    Py_DECREF( tmp_called_name_5 );
    Py_DECREF( tmp_args_element_name_6 );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 187;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_6 == NULL )
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_6 == NULL ))
        {
            tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 188;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_NamedType );
    if ( tmp_called_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_4 );

        exception_lineno = 188;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_8 = const_str_plain_errorMessage;
    tmp_called_name_8 = PyDict_GetItem( locals_dict, const_str_plain_LDAPString );

    if ( tmp_called_name_8 == NULL )
    {
        tmp_called_name_8 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPString );

        if (unlikely( tmp_called_name_8 == NULL ))
        {
            tmp_called_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPString );
        }

        if ( tmp_called_name_8 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_4 );
            Py_DECREF( tmp_called_name_7 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52505 ], 32, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 188;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 188;
    tmp_args_element_name_9 = CALL_FUNCTION_NO_ARGS( tmp_called_name_8 );
    if ( tmp_args_element_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_4 );
        Py_DECREF( tmp_called_name_7 );

        exception_lineno = 188;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 188;
    tmp_args_element_name_7 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_7, tmp_args_element_name_8, tmp_args_element_name_9 );
    Py_DECREF( tmp_called_name_7 );
    Py_DECREF( tmp_args_element_name_9 );
    if ( tmp_args_element_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_4 );

        exception_lineno = 188;
        goto frame_exception_exit_1;
    }
    tmp_source_name_7 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_7 == NULL )
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_7 == NULL ))
        {
            tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_7 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_4 );
            Py_DECREF( tmp_args_element_name_7 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 189;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_OptionalNamedType );
    if ( tmp_called_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_4 );
        Py_DECREF( tmp_args_element_name_7 );

        exception_lineno = 189;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_11 = const_str_plain_referral;
    tmp_called_name_11 = PyDict_GetItem( locals_dict, const_str_plain_Referral );

    if ( tmp_called_name_11 == NULL )
    {
        tmp_called_name_11 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_Referral );

        if (unlikely( tmp_called_name_11 == NULL ))
        {
            tmp_called_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Referral );
        }

        if ( tmp_called_name_11 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_4 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_called_name_9 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53240 ], 30, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 189;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 189;
    tmp_source_name_8 = CALL_FUNCTION_NO_ARGS( tmp_called_name_11 );
    if ( tmp_source_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_4 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_9 );

        exception_lineno = 189;
        goto frame_exception_exit_1;
    }
    tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_8 );
    if ( tmp_called_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_4 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_9 );

        exception_lineno = 189;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_2 = _PyDict_NewPresized( 1 );
    tmp_source_name_9 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_9 == NULL )
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_9 == NULL ))
        {
            tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_9 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_4 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_called_name_9 );
            Py_DECREF( tmp_called_name_10 );
            Py_DECREF( tmp_kw_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 189;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_Tag );
    if ( tmp_called_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_4 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_kw_name_2 );

        exception_lineno = 189;
        goto frame_exception_exit_1;
    }
    tmp_source_name_10 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_10 == NULL )
    {
        tmp_source_name_10 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_10 == NULL ))
        {
            tmp_source_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_10 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_4 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_called_name_9 );
            Py_DECREF( tmp_called_name_10 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_12 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 189;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_4 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_12 );

        exception_lineno = 189;
        goto frame_exception_exit_1;
    }
    tmp_source_name_11 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_11 == NULL )
    {
        tmp_source_name_11 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_11 == NULL ))
        {
            tmp_source_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_11 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_4 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_called_name_9 );
            Py_DECREF( tmp_called_name_10 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_12 );
            Py_DECREF( tmp_args_element_name_13 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 189;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_4 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_args_element_name_13 );

        exception_lineno = 189;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_15 = const_int_pos_3;
    frame_function->f_lineno = 189;
    tmp_dict_value_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_12, tmp_args_element_name_13, tmp_args_element_name_14, tmp_args_element_name_15 );
    Py_DECREF( tmp_called_name_12 );
    Py_DECREF( tmp_args_element_name_13 );
    Py_DECREF( tmp_args_element_name_14 );
    if ( tmp_dict_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_4 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_kw_name_2 );

        exception_lineno = 189;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_2 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
    Py_DECREF( tmp_dict_value_2 );
    frame_function->f_lineno = 189;
    tmp_args_element_name_12 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_10, tmp_kw_name_2 );
    Py_DECREF( tmp_called_name_10 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_args_element_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_4 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_9 );

        exception_lineno = 189;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 189;
    tmp_args_element_name_10 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_9, tmp_args_element_name_11, tmp_args_element_name_12 );
    Py_DECREF( tmp_called_name_9 );
    Py_DECREF( tmp_args_element_name_12 );
    if ( tmp_args_element_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_4 );
        Py_DECREF( tmp_args_element_name_7 );

        exception_lineno = 189;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 189;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, tmp_args_element_name_1, tmp_args_element_name_4, tmp_args_element_name_7, tmp_args_element_name_10 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    Py_DECREF( tmp_args_element_name_4 );
    Py_DECREF( tmp_args_element_name_7 );
    Py_DECREF( tmp_args_element_name_10 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 189;
        goto frame_exception_exit_1;
    }
    assert( var_componentType == NULL );
    var_componentType = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 184;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 184;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 184;
                goto frame_exception_exit_1;
            }
            }
            if ( var_componentType != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_componentType,
                    var_componentType
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 184;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_13 = closure_pyasn1_modules$rfc2251_class_creation_30__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_LDAPResult;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_30__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_componentType != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_componentType,
            var_componentType
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_3 = closure_pyasn1_modules$rfc2251_class_creation_30__class_decl_dict;

    tmp_assign_source_4 = CALL_FUNCTION( tmp_called_name_13, tmp_args_name_1, tmp_kw_name_3 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_4;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_30_LDAPResult_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_30_LDAPResult_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_31_SearchResultReference_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_31__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_31__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_31__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_31__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_tagSet = NULL;
    PyObject *var_componentType = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_31__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_SearchResultReference;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_8987c184f1b88c81d54777ff9b8aa6ce, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 193;
            goto frame_exception_exit_1;
        }

    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_Sequence );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 193;
        goto frame_exception_exit_1;
    }
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_tagSet );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 193;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_tagImplicitly );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 193;
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 194;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_Tag );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 194;
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 194;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_tagClassApplication );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 194;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_6 == NULL )
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_6 == NULL ))
        {
            tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 194;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 194;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = const_int_pos_19;
    frame_function->f_lineno = 194;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 194;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 194;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, tmp_args_element_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 194;
        goto frame_exception_exit_1;
    }
    assert( var_tagSet == NULL );
    var_tagSet = tmp_assign_source_3;

    tmp_called_name_3 = PyDict_GetItem( locals_dict, const_str_plain_LDAPURL );

    if ( tmp_called_name_3 == NULL )
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPURL );

        if (unlikely( tmp_called_name_3 == NULL ))
        {
            tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPURL );
        }

        if ( tmp_called_name_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52741 ], 29, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 196;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 196;
    tmp_assign_source_4 = CALL_FUNCTION_NO_ARGS( tmp_called_name_3 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 196;
        goto frame_exception_exit_1;
    }
    assert( var_componentType == NULL );
    var_componentType = tmp_assign_source_4;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 192;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 192;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 192;
                goto frame_exception_exit_1;
            }
            }
            if ( var_tagSet != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_tagSet,
                    var_tagSet
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 192;
                goto frame_exception_exit_1;
            }
            }
            if ( var_componentType != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_componentType,
                    var_componentType
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 192;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_4 = closure_pyasn1_modules$rfc2251_class_creation_31__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_SearchResultReference;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_31__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_tagSet != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_tagSet,
            var_tagSet
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_componentType != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_componentType,
            var_componentType
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_31__class_decl_dict;

    tmp_assign_source_5 = CALL_FUNCTION( tmp_called_name_4, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_5;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_31_SearchResultReference_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_31_SearchResultReference_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_32_SearchResultDone_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_32__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_32__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_32__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_32__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_tagSet = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_32__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_SearchResultDone;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_38dc2553afed3fd291770f6dc04378e4, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 199;
            goto frame_exception_exit_1;
        }

    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_Sequence );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 199;
        goto frame_exception_exit_1;
    }
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_tagSet );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 199;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_tagImplicitly );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 199;
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 200;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_Tag );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 200;
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 200;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_tagClassApplication );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 200;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_6 == NULL )
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_6 == NULL ))
        {
            tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 200;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 200;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = const_int_pos_5;
    frame_function->f_lineno = 200;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 200;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 200;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, tmp_args_element_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 200;
        goto frame_exception_exit_1;
    }
    assert( var_tagSet == NULL );
    var_tagSet = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 198;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 198;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 198;
                goto frame_exception_exit_1;
            }
            }
            if ( var_tagSet != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_tagSet,
                    var_tagSet
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 198;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_3 = closure_pyasn1_modules$rfc2251_class_creation_32__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_SearchResultDone;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_32__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_tagSet != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_tagSet,
            var_tagSet
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_32__class_decl_dict;

    tmp_assign_source_4 = CALL_FUNCTION( tmp_called_name_3, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_4;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_32_SearchResultDone_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_32_SearchResultDone_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_33_AttributeTypeAndValues_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_33__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_33__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_33__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_33__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_componentType = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_33__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_AttributeTypeAndValues;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_b42d8b22f16b49ae0e4ab8164adefd60, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_1 == NULL )
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_1 == NULL ))
        {
            tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 204;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_NamedTypes );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 204;
        goto frame_exception_exit_1;
    }
    tmp_source_name_2 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_2 == NULL )
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_2 == NULL ))
        {
            tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_2 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 205;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_NamedType );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 205;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = const_str_plain_type;
    tmp_called_name_3 = PyDict_GetItem( locals_dict, const_str_plain_AttributeDescription );

    if ( tmp_called_name_3 == NULL )
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeDescription );

        if (unlikely( tmp_called_name_3 == NULL ))
        {
            tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeDescription );
        }

        if ( tmp_called_name_3 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52569 ], 42, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 205;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 205;
    tmp_args_element_name_3 = CALL_FUNCTION_NO_ARGS( tmp_called_name_3 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 205;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 205;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 205;
        goto frame_exception_exit_1;
    }
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_3 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 206;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_NamedType );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 206;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_5 = const_str_plain_vals;
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 206;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_SetOf );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 206;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_called_name_6 = PyDict_GetItem( locals_dict, const_str_plain_AttributeValue );

    if ( tmp_called_name_6 == NULL )
    {
        tmp_called_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeValue );

        if (unlikely( tmp_called_name_6 == NULL ))
        {
            tmp_called_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeValue );
        }

        if ( tmp_called_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52647 ], 36, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 206;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 206;
    tmp_dict_value_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_6 );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 206;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_1 = const_str_plain_componentType;
    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    frame_function->f_lineno = 206;
    tmp_args_element_name_6 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_5, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_5 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_args_element_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 206;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 206;
    tmp_args_element_name_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, tmp_args_element_name_5, tmp_args_element_name_6 );
    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_args_element_name_6 );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 206;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 206;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, tmp_args_element_name_1, tmp_args_element_name_4 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 206;
        goto frame_exception_exit_1;
    }
    assert( var_componentType == NULL );
    var_componentType = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 203;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 203;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 203;
                goto frame_exception_exit_1;
            }
            }
            if ( var_componentType != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_componentType,
                    var_componentType
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 203;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_7 = closure_pyasn1_modules$rfc2251_class_creation_33__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_AttributeTypeAndValues;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_33__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_componentType != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_componentType,
            var_componentType
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_2 = closure_pyasn1_modules$rfc2251_class_creation_33__class_decl_dict;

    tmp_assign_source_4 = CALL_FUNCTION( tmp_called_name_7, tmp_args_name_1, tmp_kw_name_2 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_4;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_33_AttributeTypeAndValues_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_33_AttributeTypeAndValues_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_34_ModifyRequest_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_34__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_34__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_34__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_34__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_tagSet = NULL;
    PyObject *var_componentType = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    PyObject *tmp_kw_name_3;
    PyObject *tmp_kw_name_4;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_34__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_ModifyRequest;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_1f5d22a2498067def2f384cc0318bc6b, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 210;
            goto frame_exception_exit_1;
        }

    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_Sequence );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 210;
        goto frame_exception_exit_1;
    }
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_tagSet );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 210;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_tagImplicitly );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 210;
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 211;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_Tag );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 211;
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 211;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_tagClassApplication );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 211;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_6 == NULL )
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_6 == NULL ))
        {
            tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 211;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 211;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = const_int_pos_6;
    frame_function->f_lineno = 211;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 211;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 211;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, tmp_args_element_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 211;
        goto frame_exception_exit_1;
    }
    assert( var_tagSet == NULL );
    var_tagSet = tmp_assign_source_3;

    tmp_source_name_7 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_7 == NULL )
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_7 == NULL ))
        {
            tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_7 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 213;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_NamedTypes );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 213;
        goto frame_exception_exit_1;
    }
    tmp_source_name_8 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_8 == NULL )
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_8 == NULL ))
        {
            tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_8 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 214;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_NamedType );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 214;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_6 = const_str_plain_object;
    tmp_called_name_5 = PyDict_GetItem( locals_dict, const_str_plain_LDAPDN );

    if ( tmp_called_name_5 == NULL )
    {
        tmp_called_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPDN );

        if (unlikely( tmp_called_name_5 == NULL ))
        {
            tmp_called_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPDN );
        }

        if ( tmp_called_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_called_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52807 ], 28, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 214;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 214;
    tmp_args_element_name_7 = CALL_FUNCTION_NO_ARGS( tmp_called_name_5 );
    if ( tmp_args_element_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 214;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 214;
    tmp_args_element_name_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, tmp_args_element_name_6, tmp_args_element_name_7 );
    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_args_element_name_7 );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 214;
        goto frame_exception_exit_1;
    }
    tmp_source_name_9 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_9 == NULL )
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_9 == NULL ))
        {
            tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_9 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 215;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_NamedType );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );

        exception_lineno = 215;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_9 = const_str_plain_modification;
    tmp_source_name_10 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_10 == NULL )
    {
        tmp_source_name_10 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_10 == NULL ))
        {
            tmp_source_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_10 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_called_name_6 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 215;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_SequenceOf );
    if ( tmp_called_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_6 );

        exception_lineno = 215;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_source_name_11 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_11 == NULL )
    {
        tmp_source_name_11 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_11 == NULL ))
        {
            tmp_source_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_11 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_kw_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 215;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_Sequence );
    if ( tmp_called_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 215;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_2 = _PyDict_NewPresized( 1 );
    tmp_source_name_12 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_12 == NULL )
    {
        tmp_source_name_12 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_12 == NULL ))
        {
            tmp_source_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_12 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_8 );
            Py_DECREF( tmp_kw_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 215;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_NamedTypes );
    if ( tmp_called_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_kw_name_2 );

        exception_lineno = 215;
        goto frame_exception_exit_1;
    }
    tmp_source_name_13 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_13 == NULL )
    {
        tmp_source_name_13 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_13 == NULL ))
        {
            tmp_source_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_13 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_8 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_9 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 215;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_NamedType );
    if ( tmp_called_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_9 );

        exception_lineno = 215;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_12 = const_str_plain_operation;
    tmp_source_name_14 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_14 == NULL )
    {
        tmp_source_name_14 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_14 == NULL ))
        {
            tmp_source_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_14 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_8 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_9 );
            Py_DECREF( tmp_called_name_10 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 215;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_Enumerated );
    if ( tmp_called_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_called_name_10 );

        exception_lineno = 215;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_3 = _PyDict_NewPresized( 1 );
    tmp_source_name_15 = PyDict_GetItem( locals_dict, const_str_plain_namedval );

    if ( tmp_source_name_15 == NULL )
    {
        tmp_source_name_15 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedval );

        if (unlikely( tmp_source_name_15 == NULL ))
        {
            tmp_source_name_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedval );
        }

        if ( tmp_source_name_15 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_8 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_9 );
            Py_DECREF( tmp_called_name_10 );
            Py_DECREF( tmp_called_name_11 );
            Py_DECREF( tmp_kw_name_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 51740 ], 30, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 215;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_NamedValues );
    if ( tmp_called_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_kw_name_3 );

        exception_lineno = 215;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = const_tuple_str_plain_add_int_0_tuple;
    tmp_call_arg_element_2 = const_tuple_str_plain_delete_int_pos_1_tuple;
    tmp_call_arg_element_3 = const_tuple_str_plain_replace_int_pos_2_tuple;
    frame_function->f_lineno = 215;
    tmp_dict_value_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_12, tmp_call_arg_element_1, tmp_call_arg_element_2, tmp_call_arg_element_3 );
    Py_DECREF( tmp_called_name_12 );
    if ( tmp_dict_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_kw_name_3 );

        exception_lineno = 215;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_3 = const_str_plain_namedValues;
    PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_3, tmp_dict_value_3 );
    Py_DECREF( tmp_dict_value_3 );
    frame_function->f_lineno = 215;
    tmp_args_element_name_13 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_11, tmp_kw_name_3 );
    Py_DECREF( tmp_called_name_11 );
    Py_DECREF( tmp_kw_name_3 );
    if ( tmp_args_element_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_called_name_10 );

        exception_lineno = 215;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 215;
    tmp_args_element_name_11 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_10, tmp_args_element_name_12, tmp_args_element_name_13 );
    Py_DECREF( tmp_called_name_10 );
    Py_DECREF( tmp_args_element_name_13 );
    if ( tmp_args_element_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_9 );

        exception_lineno = 215;
        goto frame_exception_exit_1;
    }
    tmp_source_name_16 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_16 == NULL )
    {
        tmp_source_name_16 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_16 == NULL ))
        {
            tmp_source_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_16 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_8 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_9 );
            Py_DECREF( tmp_args_element_name_11 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 215;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_NamedType );
    if ( tmp_called_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_args_element_name_11 );

        exception_lineno = 215;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_15 = const_str_plain_modification;
    tmp_called_name_14 = PyDict_GetItem( locals_dict, const_str_plain_AttributeTypeAndValues );

    if ( tmp_called_name_14 == NULL )
    {
        tmp_called_name_14 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeTypeAndValues );

        if (unlikely( tmp_called_name_14 == NULL ))
        {
            tmp_called_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeTypeAndValues );
        }

        if ( tmp_called_name_14 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_8 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_9 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_called_name_13 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53270 ], 44, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 215;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 215;
    tmp_args_element_name_16 = CALL_FUNCTION_NO_ARGS( tmp_called_name_14 );
    if ( tmp_args_element_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_called_name_13 );

        exception_lineno = 215;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 215;
    tmp_args_element_name_14 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_13, tmp_args_element_name_15, tmp_args_element_name_16 );
    Py_DECREF( tmp_called_name_13 );
    Py_DECREF( tmp_args_element_name_16 );
    if ( tmp_args_element_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_args_element_name_11 );

        exception_lineno = 215;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 215;
    tmp_dict_value_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_9, tmp_args_element_name_11, tmp_args_element_name_14 );
    Py_DECREF( tmp_called_name_9 );
    Py_DECREF( tmp_args_element_name_11 );
    Py_DECREF( tmp_args_element_name_14 );
    if ( tmp_dict_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_kw_name_2 );

        exception_lineno = 215;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_2 = const_str_plain_componentType;
    PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
    Py_DECREF( tmp_dict_value_2 );
    frame_function->f_lineno = 215;
    tmp_dict_value_1 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_8, tmp_kw_name_2 );
    Py_DECREF( tmp_called_name_8 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 215;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_1 = const_str_plain_componentType;
    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    frame_function->f_lineno = 215;
    tmp_args_element_name_10 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_7, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_7 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_args_element_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_6 );

        exception_lineno = 215;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 215;
    tmp_args_element_name_8 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_6, tmp_args_element_name_9, tmp_args_element_name_10 );
    Py_DECREF( tmp_called_name_6 );
    Py_DECREF( tmp_args_element_name_10 );
    if ( tmp_args_element_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );

        exception_lineno = 215;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 215;
    tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, tmp_args_element_name_5, tmp_args_element_name_8 );
    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_5 );
    Py_DECREF( tmp_args_element_name_8 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 215;
        goto frame_exception_exit_1;
    }
    assert( var_componentType == NULL );
    var_componentType = tmp_assign_source_4;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 209;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 209;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 209;
                goto frame_exception_exit_1;
            }
            }
            if ( var_tagSet != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_tagSet,
                    var_tagSet
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 209;
                goto frame_exception_exit_1;
            }
            }
            if ( var_componentType != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_componentType,
                    var_componentType
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 209;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_15 = closure_pyasn1_modules$rfc2251_class_creation_34__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_ModifyRequest;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_34__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_tagSet != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_tagSet,
            var_tagSet
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_componentType != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_componentType,
            var_componentType
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_4 = closure_pyasn1_modules$rfc2251_class_creation_34__class_decl_dict;

    tmp_assign_source_5 = CALL_FUNCTION( tmp_called_name_15, tmp_args_name_1, tmp_kw_name_4 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_5;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_34_ModifyRequest_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_34_ModifyRequest_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_35_ModifyResponse_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_35__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_35__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_35__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_35__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_tagSet = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_35__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_ModifyResponse;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_f7ceda2ab7c77efb1c6b2699943b7cdc, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 219;
            goto frame_exception_exit_1;
        }

    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_Sequence );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 219;
        goto frame_exception_exit_1;
    }
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_tagSet );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 219;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_tagImplicitly );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 219;
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 220;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_Tag );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 220;
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 220;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_tagClassApplication );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 220;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_6 == NULL )
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_6 == NULL ))
        {
            tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 220;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 220;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = const_int_pos_7;
    frame_function->f_lineno = 220;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 220;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 220;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, tmp_args_element_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 220;
        goto frame_exception_exit_1;
    }
    assert( var_tagSet == NULL );
    var_tagSet = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 218;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 218;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 218;
                goto frame_exception_exit_1;
            }
            }
            if ( var_tagSet != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_tagSet,
                    var_tagSet
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 218;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_3 = closure_pyasn1_modules$rfc2251_class_creation_35__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_ModifyResponse;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_35__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_tagSet != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_tagSet,
            var_tagSet
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_35__class_decl_dict;

    tmp_assign_source_4 = CALL_FUNCTION( tmp_called_name_3, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_4;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_35_ModifyResponse_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_35_ModifyResponse_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_36_AttributeList_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_36__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_36__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_36__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_36__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_componentType = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    PyObject *tmp_kw_name_3;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_36__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_AttributeList;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_82942d0809b2fd3ee97888daf00f88b6, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_1 == NULL )
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_1 == NULL ))
        {
            tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 224;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_Sequence );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 224;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_source_name_2 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_2 == NULL )
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_2 == NULL ))
        {
            tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_2 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_kw_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 224;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_NamedTypes );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 224;
        goto frame_exception_exit_1;
    }
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_3 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 224;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_NamedType );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 224;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = const_str_plain_type;
    tmp_called_name_4 = PyDict_GetItem( locals_dict, const_str_plain_AttributeDescription );

    if ( tmp_called_name_4 == NULL )
    {
        tmp_called_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeDescription );

        if (unlikely( tmp_called_name_4 == NULL ))
        {
            tmp_called_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeDescription );
        }

        if ( tmp_called_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_called_name_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52569 ], 42, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 224;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 224;
    tmp_args_element_name_3 = CALL_FUNCTION_NO_ARGS( tmp_called_name_4 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 224;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 224;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, tmp_args_element_name_2, tmp_args_element_name_3 );
    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 224;
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 224;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_NamedType );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 224;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_5 = const_str_plain_vals;
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_5 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 224;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_SetOf );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_5 );

        exception_lineno = 224;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_2 = _PyDict_NewPresized( 1 );
    tmp_called_name_7 = PyDict_GetItem( locals_dict, const_str_plain_AttributeValue );

    if ( tmp_called_name_7 == NULL )
    {
        tmp_called_name_7 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeValue );

        if (unlikely( tmp_called_name_7 == NULL ))
        {
            tmp_called_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeValue );
        }

        if ( tmp_called_name_7 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_kw_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52647 ], 36, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 224;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 224;
    tmp_dict_value_2 = CALL_FUNCTION_NO_ARGS( tmp_called_name_7 );
    if ( tmp_dict_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );

        exception_lineno = 224;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_2 = const_str_plain_componentType;
    PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
    Py_DECREF( tmp_dict_value_2 );
    frame_function->f_lineno = 224;
    tmp_args_element_name_6 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_6, tmp_kw_name_2 );
    Py_DECREF( tmp_called_name_6 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_args_element_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_5 );

        exception_lineno = 224;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 224;
    tmp_args_element_name_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_5, tmp_args_element_name_5, tmp_args_element_name_6 );
    Py_DECREF( tmp_called_name_5 );
    Py_DECREF( tmp_args_element_name_6 );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 224;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 224;
    tmp_dict_value_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, tmp_args_element_name_1, tmp_args_element_name_4 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_1 );
    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 224;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_1 = const_str_plain_componentType;
    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    frame_function->f_lineno = 224;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 224;
        goto frame_exception_exit_1;
    }
    assert( var_componentType == NULL );
    var_componentType = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 223;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 223;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 223;
                goto frame_exception_exit_1;
            }
            }
            if ( var_componentType != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_componentType,
                    var_componentType
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 223;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_8 = closure_pyasn1_modules$rfc2251_class_creation_36__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_AttributeList;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_36__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_componentType != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_componentType,
            var_componentType
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_3 = closure_pyasn1_modules$rfc2251_class_creation_36__class_decl_dict;

    tmp_assign_source_4 = CALL_FUNCTION( tmp_called_name_8, tmp_args_name_1, tmp_kw_name_3 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_4;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_36_AttributeList_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_36_AttributeList_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_37_AddRequest_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_37__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_37__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_37__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_37__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_tagSet = NULL;
    PyObject *var_componentType = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_37__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_AddRequest;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_767099aea699b034785d5ae02bdc6bf7, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 227;
            goto frame_exception_exit_1;
        }

    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_Sequence );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 227;
        goto frame_exception_exit_1;
    }
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_tagSet );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 227;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_tagImplicitly );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 227;
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 228;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_Tag );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 228;
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 228;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_tagClassApplication );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 228;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_6 == NULL )
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_6 == NULL ))
        {
            tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 228;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 228;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = const_int_pos_8;
    frame_function->f_lineno = 228;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 228;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 228;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, tmp_args_element_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 228;
        goto frame_exception_exit_1;
    }
    assert( var_tagSet == NULL );
    var_tagSet = tmp_assign_source_3;

    tmp_source_name_7 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_7 == NULL )
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_7 == NULL ))
        {
            tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_7 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 230;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_NamedTypes );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 230;
        goto frame_exception_exit_1;
    }
    tmp_source_name_8 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_8 == NULL )
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_8 == NULL ))
        {
            tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_8 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 231;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_NamedType );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 231;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_6 = const_str_plain_entry;
    tmp_called_name_5 = PyDict_GetItem( locals_dict, const_str_plain_LDAPDN );

    if ( tmp_called_name_5 == NULL )
    {
        tmp_called_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPDN );

        if (unlikely( tmp_called_name_5 == NULL ))
        {
            tmp_called_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPDN );
        }

        if ( tmp_called_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_called_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52807 ], 28, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 231;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 231;
    tmp_args_element_name_7 = CALL_FUNCTION_NO_ARGS( tmp_called_name_5 );
    if ( tmp_args_element_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 231;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 231;
    tmp_args_element_name_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, tmp_args_element_name_6, tmp_args_element_name_7 );
    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_args_element_name_7 );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 231;
        goto frame_exception_exit_1;
    }
    tmp_source_name_9 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_9 == NULL )
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_9 == NULL ))
        {
            tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_9 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 232;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_NamedType );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );

        exception_lineno = 232;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_9 = const_str_plain_attributes;
    tmp_called_name_7 = PyDict_GetItem( locals_dict, const_str_plain_AttributeList );

    if ( tmp_called_name_7 == NULL )
    {
        tmp_called_name_7 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeList );

        if (unlikely( tmp_called_name_7 == NULL ))
        {
            tmp_called_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeList );
        }

        if ( tmp_called_name_7 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_called_name_6 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53314 ], 35, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 232;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 232;
    tmp_args_element_name_10 = CALL_FUNCTION_NO_ARGS( tmp_called_name_7 );
    if ( tmp_args_element_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_6 );

        exception_lineno = 232;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 232;
    tmp_args_element_name_8 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_6, tmp_args_element_name_9, tmp_args_element_name_10 );
    Py_DECREF( tmp_called_name_6 );
    Py_DECREF( tmp_args_element_name_10 );
    if ( tmp_args_element_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );

        exception_lineno = 232;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 232;
    tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, tmp_args_element_name_5, tmp_args_element_name_8 );
    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_5 );
    Py_DECREF( tmp_args_element_name_8 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 232;
        goto frame_exception_exit_1;
    }
    assert( var_componentType == NULL );
    var_componentType = tmp_assign_source_4;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 226;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 226;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 226;
                goto frame_exception_exit_1;
            }
            }
            if ( var_tagSet != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_tagSet,
                    var_tagSet
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 226;
                goto frame_exception_exit_1;
            }
            }
            if ( var_componentType != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_componentType,
                    var_componentType
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 226;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_8 = closure_pyasn1_modules$rfc2251_class_creation_37__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_AddRequest;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_37__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_tagSet != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_tagSet,
            var_tagSet
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_componentType != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_componentType,
            var_componentType
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_37__class_decl_dict;

    tmp_assign_source_5 = CALL_FUNCTION( tmp_called_name_8, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_5;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_37_AddRequest_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_37_AddRequest_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_38_AddResponse_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_38__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_38__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_38__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_38__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_tagSet = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_38__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_AddResponse;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_205923a8856722e973ba85c99a78bf15, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 236;
            goto frame_exception_exit_1;
        }

    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_Sequence );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 236;
        goto frame_exception_exit_1;
    }
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_tagSet );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 236;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_tagImplicitly );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 236;
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 237;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_Tag );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 237;
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 237;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_tagClassApplication );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 237;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_6 == NULL )
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_6 == NULL ))
        {
            tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 237;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 237;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = const_int_pos_9;
    frame_function->f_lineno = 237;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 237;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 237;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, tmp_args_element_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 237;
        goto frame_exception_exit_1;
    }
    assert( var_tagSet == NULL );
    var_tagSet = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 235;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 235;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 235;
                goto frame_exception_exit_1;
            }
            }
            if ( var_tagSet != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_tagSet,
                    var_tagSet
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 235;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_3 = closure_pyasn1_modules$rfc2251_class_creation_38__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_AddResponse;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_38__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_tagSet != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_tagSet,
            var_tagSet
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_38__class_decl_dict;

    tmp_assign_source_4 = CALL_FUNCTION( tmp_called_name_3, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_4;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_38_AddResponse_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_38_AddResponse_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_39_DelRequest_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_39__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_39__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_39__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_39__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_tagSet = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_39__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_DelRequest;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_eba51d586277c350f335171b371e458b, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 241;
            goto frame_exception_exit_1;
        }

    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_Sequence );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 241;
        goto frame_exception_exit_1;
    }
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_tagSet );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 241;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_tagImplicitly );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 241;
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 242;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_Tag );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 242;
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 242;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_tagClassApplication );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 242;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_6 == NULL )
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_6 == NULL ))
        {
            tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 242;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 242;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = const_int_pos_10;
    frame_function->f_lineno = 242;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 242;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 242;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, tmp_args_element_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 242;
        goto frame_exception_exit_1;
    }
    assert( var_tagSet == NULL );
    var_tagSet = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 240;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 240;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 240;
                goto frame_exception_exit_1;
            }
            }
            if ( var_tagSet != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_tagSet,
                    var_tagSet
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 240;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_3 = closure_pyasn1_modules$rfc2251_class_creation_39__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_DelRequest;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_39__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_tagSet != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_tagSet,
            var_tagSet
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_39__class_decl_dict;

    tmp_assign_source_4 = CALL_FUNCTION( tmp_called_name_3, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_4;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_39_DelRequest_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_39_DelRequest_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_40_DelResponse_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_40__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_40__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_40__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_40__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_tagSet = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_40__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_DelResponse;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_bb67dd1960f3bef6bfe9eca371e279f0, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 246;
            goto frame_exception_exit_1;
        }

    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_Sequence );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 246;
        goto frame_exception_exit_1;
    }
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_tagSet );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 246;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_tagImplicitly );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 246;
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 247;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_Tag );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 247;
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 247;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_tagClassApplication );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 247;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_6 == NULL )
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_6 == NULL ))
        {
            tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 247;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 247;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = const_int_pos_11;
    frame_function->f_lineno = 247;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 247;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 247;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, tmp_args_element_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 247;
        goto frame_exception_exit_1;
    }
    assert( var_tagSet == NULL );
    var_tagSet = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 245;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 245;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 245;
                goto frame_exception_exit_1;
            }
            }
            if ( var_tagSet != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_tagSet,
                    var_tagSet
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 245;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_3 = closure_pyasn1_modules$rfc2251_class_creation_40__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_DelResponse;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_40__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_tagSet != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_tagSet,
            var_tagSet
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_40__class_decl_dict;

    tmp_assign_source_4 = CALL_FUNCTION( tmp_called_name_3, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_4;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_40_DelResponse_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_40_DelResponse_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_41_ModifyDNRequest_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_41__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_41__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_41__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_41__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_tagSet = NULL;
    PyObject *var_componentType = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_41__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_ModifyDNRequest;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_636a5a14e7b65066b8237f19b12d0fed, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 251;
            goto frame_exception_exit_1;
        }

    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_Sequence );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 251;
        goto frame_exception_exit_1;
    }
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_tagSet );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 251;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_tagImplicitly );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 251;
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 252;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_Tag );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 252;
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 252;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_tagClassApplication );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 252;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_6 == NULL )
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_6 == NULL ))
        {
            tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 252;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 252;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = const_int_pos_12;
    frame_function->f_lineno = 252;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 252;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 252;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, tmp_args_element_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 252;
        goto frame_exception_exit_1;
    }
    assert( var_tagSet == NULL );
    var_tagSet = tmp_assign_source_3;

    tmp_source_name_7 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_7 == NULL )
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_7 == NULL ))
        {
            tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_7 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 254;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_NamedTypes );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 254;
        goto frame_exception_exit_1;
    }
    tmp_source_name_8 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_8 == NULL )
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_8 == NULL ))
        {
            tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_8 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 255;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_NamedType );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 255;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_6 = const_str_plain_entry;
    tmp_called_name_5 = PyDict_GetItem( locals_dict, const_str_plain_LDAPDN );

    if ( tmp_called_name_5 == NULL )
    {
        tmp_called_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPDN );

        if (unlikely( tmp_called_name_5 == NULL ))
        {
            tmp_called_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPDN );
        }

        if ( tmp_called_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_called_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52807 ], 28, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 255;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 255;
    tmp_args_element_name_7 = CALL_FUNCTION_NO_ARGS( tmp_called_name_5 );
    if ( tmp_args_element_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 255;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 255;
    tmp_args_element_name_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, tmp_args_element_name_6, tmp_args_element_name_7 );
    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_args_element_name_7 );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 255;
        goto frame_exception_exit_1;
    }
    tmp_source_name_9 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_9 == NULL )
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_9 == NULL ))
        {
            tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_9 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 256;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_NamedType );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );

        exception_lineno = 256;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_9 = const_str_plain_newrdn;
    tmp_called_name_7 = PyDict_GetItem( locals_dict, const_str_plain_RelativeLDAPDN );

    if ( tmp_called_name_7 == NULL )
    {
        tmp_called_name_7 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_RelativeLDAPDN );

        if (unlikely( tmp_called_name_7 == NULL ))
        {
            tmp_called_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_RelativeLDAPDN );
        }

        if ( tmp_called_name_7 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_called_name_6 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53349 ], 36, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 256;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 256;
    tmp_args_element_name_10 = CALL_FUNCTION_NO_ARGS( tmp_called_name_7 );
    if ( tmp_args_element_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_6 );

        exception_lineno = 256;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 256;
    tmp_args_element_name_8 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_6, tmp_args_element_name_9, tmp_args_element_name_10 );
    Py_DECREF( tmp_called_name_6 );
    Py_DECREF( tmp_args_element_name_10 );
    if ( tmp_args_element_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );

        exception_lineno = 256;
        goto frame_exception_exit_1;
    }
    tmp_source_name_10 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_10 == NULL )
    {
        tmp_source_name_10 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_10 == NULL ))
        {
            tmp_source_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_10 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 257;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_NamedType );
    if ( tmp_called_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );

        exception_lineno = 257;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_12 = const_str_plain_deleteoldrdn;
    tmp_source_name_11 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_11 == NULL )
    {
        tmp_source_name_11 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_11 == NULL ))
        {
            tmp_source_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_11 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_called_name_8 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 257;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_Boolean );
    if ( tmp_called_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_called_name_8 );

        exception_lineno = 257;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 257;
    tmp_args_element_name_13 = CALL_FUNCTION_NO_ARGS( tmp_called_name_9 );
    Py_DECREF( tmp_called_name_9 );
    if ( tmp_args_element_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_called_name_8 );

        exception_lineno = 257;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 257;
    tmp_args_element_name_11 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_8, tmp_args_element_name_12, tmp_args_element_name_13 );
    Py_DECREF( tmp_called_name_8 );
    Py_DECREF( tmp_args_element_name_13 );
    if ( tmp_args_element_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );

        exception_lineno = 257;
        goto frame_exception_exit_1;
    }
    tmp_source_name_12 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_12 == NULL )
    {
        tmp_source_name_12 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_12 == NULL ))
        {
            tmp_source_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_12 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 258;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_OptionalNamedType );
    if ( tmp_called_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );

        exception_lineno = 258;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_15 = const_str_plain_newSuperior;
    tmp_called_name_12 = PyDict_GetItem( locals_dict, const_str_plain_LDAPDN );

    if ( tmp_called_name_12 == NULL )
    {
        tmp_called_name_12 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPDN );

        if (unlikely( tmp_called_name_12 == NULL ))
        {
            tmp_called_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPDN );
        }

        if ( tmp_called_name_12 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_called_name_10 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52807 ], 28, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 258;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 258;
    tmp_source_name_13 = CALL_FUNCTION_NO_ARGS( tmp_called_name_12 );
    if ( tmp_source_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_called_name_10 );

        exception_lineno = 258;
        goto frame_exception_exit_1;
    }
    tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_13 );
    if ( tmp_called_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_called_name_10 );

        exception_lineno = 258;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_source_name_14 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_14 == NULL )
    {
        tmp_source_name_14 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_14 == NULL ))
        {
            tmp_source_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_14 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_called_name_10 );
            Py_DECREF( tmp_called_name_11 );
            Py_DECREF( tmp_kw_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 258;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_Tag );
    if ( tmp_called_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 258;
        goto frame_exception_exit_1;
    }
    tmp_source_name_15 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_15 == NULL )
    {
        tmp_source_name_15 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_15 == NULL ))
        {
            tmp_source_name_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_15 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_called_name_10 );
            Py_DECREF( tmp_called_name_11 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_13 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 258;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_13 );

        exception_lineno = 258;
        goto frame_exception_exit_1;
    }
    tmp_source_name_16 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_16 == NULL )
    {
        tmp_source_name_16 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_16 == NULL ))
        {
            tmp_source_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_16 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_called_name_10 );
            Py_DECREF( tmp_called_name_11 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_13 );
            Py_DECREF( tmp_args_element_name_17 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 258;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_18 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_tagFormatSimple );
    if ( tmp_args_element_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_args_element_name_17 );

        exception_lineno = 258;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_19 = const_int_0;
    frame_function->f_lineno = 258;
    tmp_dict_value_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_13, tmp_args_element_name_17, tmp_args_element_name_18, tmp_args_element_name_19 );
    Py_DECREF( tmp_called_name_13 );
    Py_DECREF( tmp_args_element_name_17 );
    Py_DECREF( tmp_args_element_name_18 );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 258;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_1 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    frame_function->f_lineno = 258;
    tmp_args_element_name_16 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_11, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_11 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_args_element_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_called_name_10 );

        exception_lineno = 258;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 258;
    tmp_args_element_name_14 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_10, tmp_args_element_name_15, tmp_args_element_name_16 );
    Py_DECREF( tmp_called_name_10 );
    Py_DECREF( tmp_args_element_name_16 );
    if ( tmp_args_element_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );

        exception_lineno = 258;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 258;
    tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_3, tmp_args_element_name_5, tmp_args_element_name_8, tmp_args_element_name_11, tmp_args_element_name_14 );
    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_5 );
    Py_DECREF( tmp_args_element_name_8 );
    Py_DECREF( tmp_args_element_name_11 );
    Py_DECREF( tmp_args_element_name_14 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 258;
        goto frame_exception_exit_1;
    }
    assert( var_componentType == NULL );
    var_componentType = tmp_assign_source_4;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 250;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 250;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 250;
                goto frame_exception_exit_1;
            }
            }
            if ( var_tagSet != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_tagSet,
                    var_tagSet
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 250;
                goto frame_exception_exit_1;
            }
            }
            if ( var_componentType != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_componentType,
                    var_componentType
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 250;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_14 = closure_pyasn1_modules$rfc2251_class_creation_41__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_ModifyDNRequest;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_41__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_tagSet != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_tagSet,
            var_tagSet
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_componentType != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_componentType,
            var_componentType
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_2 = closure_pyasn1_modules$rfc2251_class_creation_41__class_decl_dict;

    tmp_assign_source_5 = CALL_FUNCTION( tmp_called_name_14, tmp_args_name_1, tmp_kw_name_2 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_5;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_41_ModifyDNRequest_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_41_ModifyDNRequest_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_42_ModifyDNResponse_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_42__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_42__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_42__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_42__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_tagSet = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_42__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_ModifyDNResponse;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_5b83b09e9d39beebdd313d0e4804111d, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 263;
            goto frame_exception_exit_1;
        }

    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_Sequence );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 263;
        goto frame_exception_exit_1;
    }
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_tagSet );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 263;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_tagImplicitly );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 263;
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 264;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_Tag );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 264;
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 264;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_tagClassApplication );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 264;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_6 == NULL )
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_6 == NULL ))
        {
            tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 264;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 264;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = const_int_pos_13;
    frame_function->f_lineno = 264;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 264;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 264;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, tmp_args_element_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 264;
        goto frame_exception_exit_1;
    }
    assert( var_tagSet == NULL );
    var_tagSet = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 262;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 262;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 262;
                goto frame_exception_exit_1;
            }
            }
            if ( var_tagSet != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_tagSet,
                    var_tagSet
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 262;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_3 = closure_pyasn1_modules$rfc2251_class_creation_42__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_ModifyDNResponse;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_42__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_tagSet != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_tagSet,
            var_tagSet
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_42__class_decl_dict;

    tmp_assign_source_4 = CALL_FUNCTION( tmp_called_name_3, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_4;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_42_ModifyDNResponse_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_42_ModifyDNResponse_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_43_CompareRequest_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_43__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_43__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_43__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_43__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_tagSet = NULL;
    PyObject *var_componentType = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_43__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_CompareRequest;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_b7b66113ea3a2a989838da0f416ccaa7, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 268;
            goto frame_exception_exit_1;
        }

    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_Sequence );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 268;
        goto frame_exception_exit_1;
    }
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_tagSet );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 268;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_tagImplicitly );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 268;
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 269;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_Tag );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 269;
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 269;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_tagClassApplication );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 269;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_6 == NULL )
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_6 == NULL ))
        {
            tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 269;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 269;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = const_int_pos_14;
    frame_function->f_lineno = 269;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 269;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 269;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, tmp_args_element_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 269;
        goto frame_exception_exit_1;
    }
    assert( var_tagSet == NULL );
    var_tagSet = tmp_assign_source_3;

    tmp_source_name_7 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_7 == NULL )
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_7 == NULL ))
        {
            tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_7 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 271;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_NamedTypes );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 271;
        goto frame_exception_exit_1;
    }
    tmp_source_name_8 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_8 == NULL )
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_8 == NULL ))
        {
            tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_8 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 272;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_NamedType );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 272;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_6 = const_str_plain_entry;
    tmp_called_name_5 = PyDict_GetItem( locals_dict, const_str_plain_LDAPDN );

    if ( tmp_called_name_5 == NULL )
    {
        tmp_called_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPDN );

        if (unlikely( tmp_called_name_5 == NULL ))
        {
            tmp_called_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPDN );
        }

        if ( tmp_called_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_called_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52807 ], 28, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 272;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 272;
    tmp_args_element_name_7 = CALL_FUNCTION_NO_ARGS( tmp_called_name_5 );
    if ( tmp_args_element_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 272;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 272;
    tmp_args_element_name_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, tmp_args_element_name_6, tmp_args_element_name_7 );
    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_args_element_name_7 );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 272;
        goto frame_exception_exit_1;
    }
    tmp_source_name_9 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_9 == NULL )
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_9 == NULL ))
        {
            tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_9 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 273;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_NamedType );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );

        exception_lineno = 273;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_9 = const_str_plain_ava;
    tmp_called_name_7 = PyDict_GetItem( locals_dict, const_str_plain_AttributeValueAssertion );

    if ( tmp_called_name_7 == NULL )
    {
        tmp_called_name_7 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeValueAssertion );

        if (unlikely( tmp_called_name_7 == NULL ))
        {
            tmp_called_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AttributeValueAssertion );
        }

        if ( tmp_called_name_7 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_called_name_6 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52955 ], 45, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 273;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 273;
    tmp_args_element_name_10 = CALL_FUNCTION_NO_ARGS( tmp_called_name_7 );
    if ( tmp_args_element_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_6 );

        exception_lineno = 273;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 273;
    tmp_args_element_name_8 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_6, tmp_args_element_name_9, tmp_args_element_name_10 );
    Py_DECREF( tmp_called_name_6 );
    Py_DECREF( tmp_args_element_name_10 );
    if ( tmp_args_element_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );

        exception_lineno = 273;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 273;
    tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, tmp_args_element_name_5, tmp_args_element_name_8 );
    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_5 );
    Py_DECREF( tmp_args_element_name_8 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 273;
        goto frame_exception_exit_1;
    }
    assert( var_componentType == NULL );
    var_componentType = tmp_assign_source_4;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 267;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 267;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 267;
                goto frame_exception_exit_1;
            }
            }
            if ( var_tagSet != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_tagSet,
                    var_tagSet
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 267;
                goto frame_exception_exit_1;
            }
            }
            if ( var_componentType != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_componentType,
                    var_componentType
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 267;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_8 = closure_pyasn1_modules$rfc2251_class_creation_43__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_CompareRequest;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_43__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_tagSet != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_tagSet,
            var_tagSet
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_componentType != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_componentType,
            var_componentType
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_43__class_decl_dict;

    tmp_assign_source_5 = CALL_FUNCTION( tmp_called_name_8, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_5;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_43_CompareRequest_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_43_CompareRequest_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_44_CompareResponse_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_44__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_44__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_44__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_44__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_tagSet = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_44__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_CompareResponse;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_44248db67ed4a55521fb94f679f329ec, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 277;
            goto frame_exception_exit_1;
        }

    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_Sequence );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 277;
        goto frame_exception_exit_1;
    }
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_tagSet );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 277;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_tagImplicitly );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 277;
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 278;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_Tag );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 278;
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 278;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_tagClassApplication );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 278;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_6 == NULL )
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_6 == NULL ))
        {
            tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 278;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 278;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = const_int_pos_15;
    frame_function->f_lineno = 278;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 278;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 278;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, tmp_args_element_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 278;
        goto frame_exception_exit_1;
    }
    assert( var_tagSet == NULL );
    var_tagSet = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 276;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 276;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 276;
                goto frame_exception_exit_1;
            }
            }
            if ( var_tagSet != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_tagSet,
                    var_tagSet
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 276;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_3 = closure_pyasn1_modules$rfc2251_class_creation_44__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_CompareResponse;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_44__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_tagSet != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_tagSet,
            var_tagSet
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_44__class_decl_dict;

    tmp_assign_source_4 = CALL_FUNCTION( tmp_called_name_3, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_4;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_44_CompareResponse_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_44_CompareResponse_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_45_AbandonRequest_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_45__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_45__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_45__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_45__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_tagSet = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_45__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_AbandonRequest;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_4b370decf1b9c123d23dc8614dd2c245, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 282;
            goto frame_exception_exit_1;
        }

    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_Sequence );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 282;
        goto frame_exception_exit_1;
    }
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_tagSet );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 282;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_tagImplicitly );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 282;
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 283;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_Tag );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 283;
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 283;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_tagClassApplication );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 283;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_6 == NULL )
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_6 == NULL ))
        {
            tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 283;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 283;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = const_int_pos_16;
    frame_function->f_lineno = 283;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 283;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 283;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, tmp_args_element_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 283;
        goto frame_exception_exit_1;
    }
    assert( var_tagSet == NULL );
    var_tagSet = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 281;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 281;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 281;
                goto frame_exception_exit_1;
            }
            }
            if ( var_tagSet != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_tagSet,
                    var_tagSet
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 281;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_3 = closure_pyasn1_modules$rfc2251_class_creation_45__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_AbandonRequest;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_45__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_tagSet != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_tagSet,
            var_tagSet
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_45__class_decl_dict;

    tmp_assign_source_4 = CALL_FUNCTION( tmp_called_name_3, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_4;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_45_AbandonRequest_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_45_AbandonRequest_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_46_ExtendedRequest_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_46__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_46__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_46__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_46__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_tagSet = NULL;
    PyObject *var_componentType = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    PyObject *tmp_kw_name_3;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_46__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_ExtendedRequest;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_b9cd1b9aeb9c66cd50d04d261b0cca8f, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 287;
            goto frame_exception_exit_1;
        }

    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_Sequence );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 287;
        goto frame_exception_exit_1;
    }
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_tagSet );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 287;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_tagImplicitly );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 287;
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 288;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_Tag );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 288;
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 288;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_tagClassApplication );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 288;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_6 == NULL )
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_6 == NULL ))
        {
            tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 288;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 288;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = const_int_pos_23;
    frame_function->f_lineno = 288;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 288;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 288;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, tmp_args_element_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 288;
        goto frame_exception_exit_1;
    }
    assert( var_tagSet == NULL );
    var_tagSet = tmp_assign_source_3;

    tmp_source_name_7 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_7 == NULL )
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_7 == NULL ))
        {
            tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_7 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 290;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_NamedTypes );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 290;
        goto frame_exception_exit_1;
    }
    tmp_source_name_8 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_8 == NULL )
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_8 == NULL ))
        {
            tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_8 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 291;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_NamedType );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 291;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_6 = const_str_plain_requestName;
    tmp_called_name_6 = PyDict_GetItem( locals_dict, const_str_plain_LDAPOID );

    if ( tmp_called_name_6 == NULL )
    {
        tmp_called_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPOID );

        if (unlikely( tmp_called_name_6 == NULL ))
        {
            tmp_called_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPOID );
        }

        if ( tmp_called_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_called_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52683 ], 29, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 291;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 291;
    tmp_source_name_9 = CALL_FUNCTION_NO_ARGS( tmp_called_name_6 );
    if ( tmp_source_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 291;
        goto frame_exception_exit_1;
    }
    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_9 );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 291;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_source_name_10 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_10 == NULL )
    {
        tmp_source_name_10 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_10 == NULL ))
        {
            tmp_source_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_10 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 291;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_Tag );
    if ( tmp_called_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 291;
        goto frame_exception_exit_1;
    }
    tmp_source_name_11 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_11 == NULL )
    {
        tmp_source_name_11 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_11 == NULL ))
        {
            tmp_source_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_11 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_7 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 291;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_7 );

        exception_lineno = 291;
        goto frame_exception_exit_1;
    }
    tmp_source_name_12 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_12 == NULL )
    {
        tmp_source_name_12 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_12 == NULL ))
        {
            tmp_source_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_12 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_args_element_name_8 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 291;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_tagFormatSimple );
    if ( tmp_args_element_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_8 );

        exception_lineno = 291;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_10 = const_int_0;
    frame_function->f_lineno = 291;
    tmp_dict_value_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_7, tmp_args_element_name_8, tmp_args_element_name_9, tmp_args_element_name_10 );
    Py_DECREF( tmp_called_name_7 );
    Py_DECREF( tmp_args_element_name_8 );
    Py_DECREF( tmp_args_element_name_9 );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 291;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_1 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    frame_function->f_lineno = 291;
    tmp_args_element_name_7 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_5, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_5 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_args_element_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 291;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 291;
    tmp_args_element_name_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, tmp_args_element_name_6, tmp_args_element_name_7 );
    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_args_element_name_7 );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 291;
        goto frame_exception_exit_1;
    }
    tmp_source_name_13 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_13 == NULL )
    {
        tmp_source_name_13 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_13 == NULL ))
        {
            tmp_source_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_13 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 292;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_OptionalNamedType );
    if ( tmp_called_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );

        exception_lineno = 292;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_12 = const_str_plain_requestValue;
    tmp_source_name_15 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_15 == NULL )
    {
        tmp_source_name_15 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_15 == NULL ))
        {
            tmp_source_name_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_15 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_called_name_8 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 292;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_OctetString );
    if ( tmp_called_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_8 );

        exception_lineno = 292;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 292;
    tmp_source_name_14 = CALL_FUNCTION_NO_ARGS( tmp_called_name_10 );
    Py_DECREF( tmp_called_name_10 );
    if ( tmp_source_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_8 );

        exception_lineno = 292;
        goto frame_exception_exit_1;
    }
    tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_14 );
    if ( tmp_called_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_8 );

        exception_lineno = 292;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_2 = _PyDict_NewPresized( 1 );
    tmp_source_name_16 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_16 == NULL )
    {
        tmp_source_name_16 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_16 == NULL ))
        {
            tmp_source_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_16 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_called_name_8 );
            Py_DECREF( tmp_called_name_9 );
            Py_DECREF( tmp_kw_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 292;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_Tag );
    if ( tmp_called_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_kw_name_2 );

        exception_lineno = 292;
        goto frame_exception_exit_1;
    }
    tmp_source_name_17 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_17 == NULL )
    {
        tmp_source_name_17 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_17 == NULL ))
        {
            tmp_source_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_17 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_called_name_8 );
            Py_DECREF( tmp_called_name_9 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_11 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 292;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_11 );

        exception_lineno = 292;
        goto frame_exception_exit_1;
    }
    tmp_source_name_18 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_18 == NULL )
    {
        tmp_source_name_18 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_18 == NULL ))
        {
            tmp_source_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_18 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_called_name_8 );
            Py_DECREF( tmp_called_name_9 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_11 );
            Py_DECREF( tmp_args_element_name_14 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 292;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_tagFormatSimple );
    if ( tmp_args_element_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_args_element_name_14 );

        exception_lineno = 292;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_16 = const_int_pos_1;
    frame_function->f_lineno = 292;
    tmp_dict_value_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_11, tmp_args_element_name_14, tmp_args_element_name_15, tmp_args_element_name_16 );
    Py_DECREF( tmp_called_name_11 );
    Py_DECREF( tmp_args_element_name_14 );
    Py_DECREF( tmp_args_element_name_15 );
    if ( tmp_dict_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_kw_name_2 );

        exception_lineno = 292;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_2 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
    Py_DECREF( tmp_dict_value_2 );
    frame_function->f_lineno = 292;
    tmp_args_element_name_13 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_9, tmp_kw_name_2 );
    Py_DECREF( tmp_called_name_9 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_args_element_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_8 );

        exception_lineno = 292;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 292;
    tmp_args_element_name_11 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_8, tmp_args_element_name_12, tmp_args_element_name_13 );
    Py_DECREF( tmp_called_name_8 );
    Py_DECREF( tmp_args_element_name_13 );
    if ( tmp_args_element_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );

        exception_lineno = 292;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 292;
    tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, tmp_args_element_name_5, tmp_args_element_name_11 );
    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_5 );
    Py_DECREF( tmp_args_element_name_11 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 292;
        goto frame_exception_exit_1;
    }
    assert( var_componentType == NULL );
    var_componentType = tmp_assign_source_4;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 286;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 286;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 286;
                goto frame_exception_exit_1;
            }
            }
            if ( var_tagSet != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_tagSet,
                    var_tagSet
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 286;
                goto frame_exception_exit_1;
            }
            }
            if ( var_componentType != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_componentType,
                    var_componentType
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 286;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_12 = closure_pyasn1_modules$rfc2251_class_creation_46__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_ExtendedRequest;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_46__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_tagSet != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_tagSet,
            var_tagSet
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_componentType != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_componentType,
            var_componentType
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_3 = closure_pyasn1_modules$rfc2251_class_creation_46__class_decl_dict;

    tmp_assign_source_5 = CALL_FUNCTION( tmp_called_name_12, tmp_args_name_1, tmp_kw_name_3 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_5;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_46_ExtendedRequest_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_46_ExtendedRequest_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_47_ExtendedResponse_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_47__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_47__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_47__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_47__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_tagSet = NULL;
    PyObject *var_componentType = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_args_element_name_20;
    PyObject *tmp_args_element_name_21;
    PyObject *tmp_args_element_name_22;
    PyObject *tmp_args_element_name_23;
    PyObject *tmp_args_element_name_24;
    PyObject *tmp_args_element_name_25;
    PyObject *tmp_args_element_name_26;
    PyObject *tmp_args_element_name_27;
    PyObject *tmp_args_element_name_28;
    PyObject *tmp_args_element_name_29;
    PyObject *tmp_args_element_name_30;
    PyObject *tmp_args_element_name_31;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_arg_element_8;
    PyObject *tmp_call_arg_element_9;
    PyObject *tmp_call_arg_element_10;
    PyObject *tmp_call_arg_element_11;
    PyObject *tmp_call_arg_element_12;
    PyObject *tmp_call_arg_element_13;
    PyObject *tmp_call_arg_element_14;
    PyObject *tmp_call_arg_element_15;
    PyObject *tmp_call_arg_element_16;
    PyObject *tmp_call_arg_element_17;
    PyObject *tmp_call_arg_element_18;
    PyObject *tmp_call_arg_element_19;
    PyObject *tmp_call_arg_element_20;
    PyObject *tmp_call_arg_element_21;
    PyObject *tmp_call_arg_element_22;
    PyObject *tmp_call_arg_element_23;
    PyObject *tmp_call_arg_element_24;
    PyObject *tmp_call_arg_element_25;
    PyObject *tmp_call_arg_element_26;
    PyObject *tmp_call_arg_element_27;
    PyObject *tmp_call_arg_element_28;
    PyObject *tmp_call_arg_element_29;
    PyObject *tmp_call_arg_element_30;
    PyObject *tmp_call_arg_element_31;
    PyObject *tmp_call_arg_element_32;
    PyObject *tmp_call_arg_element_33;
    PyObject *tmp_call_arg_element_34;
    PyObject *tmp_call_arg_element_35;
    PyObject *tmp_call_arg_element_36;
    PyObject *tmp_call_arg_element_37;
    PyObject *tmp_call_arg_element_38;
    PyObject *tmp_call_arg_element_39;
    PyObject *tmp_call_arg_element_40;
    PyObject *tmp_call_arg_element_41;
    PyObject *tmp_call_arg_element_42;
    PyObject *tmp_call_arg_element_43;
    PyObject *tmp_call_arg_element_44;
    PyObject *tmp_call_arg_element_45;
    PyObject *tmp_call_arg_element_46;
    PyObject *tmp_call_arg_element_47;
    PyObject *tmp_call_arg_element_48;
    PyObject *tmp_call_arg_element_49;
    PyObject *tmp_call_arg_element_50;
    PyObject *tmp_call_arg_element_51;
    PyObject *tmp_call_arg_element_52;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_called_name_16;
    PyObject *tmp_called_name_17;
    PyObject *tmp_called_name_18;
    PyObject *tmp_called_name_19;
    PyObject *tmp_called_name_20;
    PyObject *tmp_called_name_21;
    PyObject *tmp_called_name_22;
    PyObject *tmp_called_name_23;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    PyObject *tmp_kw_name_3;
    PyObject *tmp_kw_name_4;
    PyObject *tmp_kw_name_5;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_source_name_22;
    PyObject *tmp_source_name_23;
    PyObject *tmp_source_name_24;
    PyObject *tmp_source_name_25;
    PyObject *tmp_source_name_26;
    PyObject *tmp_source_name_27;
    PyObject *tmp_source_name_28;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_47__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_ExtendedResponse;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_5fa2e0b09e584254a5247313d767b7e8, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 296;
            goto frame_exception_exit_1;
        }

    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_Sequence );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 296;
        goto frame_exception_exit_1;
    }
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_tagSet );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 296;
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_tagImplicitly );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 296;
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 297;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_Tag );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 297;
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 297;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_tagClassApplication );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 297;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_6 == NULL )
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_6 == NULL ))
        {
            tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 297;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 297;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = const_int_pos_24;
    frame_function->f_lineno = 297;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 297;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 297;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, tmp_args_element_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 297;
        goto frame_exception_exit_1;
    }
    assert( var_tagSet == NULL );
    var_tagSet = tmp_assign_source_3;

    tmp_source_name_7 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_7 == NULL )
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_7 == NULL ))
        {
            tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_7 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 299;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_NamedTypes );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 299;
        goto frame_exception_exit_1;
    }
    tmp_source_name_8 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_8 == NULL )
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_8 == NULL ))
        {
            tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_8 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 300;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_NamedType );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 300;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_6 = const_str_plain_resultCode;
    tmp_source_name_9 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_9 == NULL )
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_9 == NULL ))
        {
            tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_9 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_called_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 300;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_Enumerated );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 300;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_source_name_10 = PyDict_GetItem( locals_dict, const_str_plain_namedval );

    if ( tmp_source_name_10 == NULL )
    {
        tmp_source_name_10 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedval );

        if (unlikely( tmp_source_name_10 == NULL ))
        {
            tmp_source_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedval );
        }

        if ( tmp_source_name_10 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 51740 ], 30, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 300;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_NamedValues );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 300;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = const_tuple_str_plain_success_int_0_tuple;
    tmp_call_arg_element_2 = const_tuple_str_plain_operationsError_int_pos_1_tuple;
    tmp_call_arg_element_3 = const_tuple_str_plain_protocolError_int_pos_2_tuple;
    tmp_call_arg_element_4 = const_tuple_str_plain_timeLimitExceeded_int_pos_3_tuple;
    tmp_call_arg_element_5 = const_tuple_str_plain_sizeLimitExceeded_int_pos_4_tuple;
    tmp_call_arg_element_6 = const_tuple_str_plain_compareFalse_int_pos_5_tuple;
    tmp_call_arg_element_7 = const_tuple_str_plain_compareTrue_int_pos_6_tuple;
    tmp_call_arg_element_8 = const_tuple_str_plain_authMethodNotSupported_int_pos_7_tuple;
    tmp_call_arg_element_9 = const_tuple_str_plain_strongAuthRequired_int_pos_8_tuple;
    tmp_call_arg_element_10 = const_tuple_str_digest_4f195fdd223b17cfd65e5f548667eea5_int_pos_9_tuple;
    tmp_call_arg_element_11 = const_tuple_str_plain_referral_int_pos_10_tuple;
    tmp_call_arg_element_12 = const_tuple_str_plain_adminLimitExceeded_int_pos_11_tuple;
    tmp_call_arg_element_13 = const_tuple_str_plain_unavailableCriticalExtension_int_pos_12_tuple;
    tmp_call_arg_element_14 = const_tuple_str_plain_confidentialityRequired_int_pos_13_tuple;
    tmp_call_arg_element_15 = const_tuple_str_plain_saslBindInProgress_int_pos_14_tuple;
    tmp_call_arg_element_16 = const_tuple_str_plain_noSuchAttribute_int_pos_16_tuple;
    tmp_call_arg_element_17 = const_tuple_str_plain_undefinedAttributeType_int_pos_17_tuple;
    tmp_call_arg_element_18 = const_tuple_str_plain_inappropriateMatching_int_pos_18_tuple;
    tmp_call_arg_element_19 = const_tuple_str_plain_constraintViolation_int_pos_19_tuple;
    tmp_call_arg_element_20 = const_tuple_str_plain_attributeOrValueExists_int_pos_20_tuple;
    tmp_call_arg_element_21 = const_tuple_str_plain_invalidAttributeSyntax_int_pos_21_tuple;
    tmp_call_arg_element_22 = const_tuple_str_plain_noSuchObject_int_pos_32_tuple;
    tmp_call_arg_element_23 = const_tuple_str_plain_aliasProblem_int_pos_33_tuple;
    tmp_call_arg_element_24 = const_tuple_str_plain_invalidDNSyntax_int_pos_34_tuple;
    tmp_call_arg_element_25 = const_tuple_str_digest_9ecb9e98a4e53a42773177fd3208db1a_int_pos_35_tuple;
    tmp_call_arg_element_26 = const_tuple_str_plain_aliasDereferencingProblem_int_pos_36_tuple;
    tmp_call_arg_element_27 = const_tuple_str_plain_inappropriateAuthentication_int_pos_48_tuple;
    tmp_call_arg_element_28 = const_tuple_str_plain_invalidCredentials_int_pos_49_tuple;
    tmp_call_arg_element_29 = const_tuple_str_plain_insufficientAccessRights_int_pos_50_tuple;
    tmp_call_arg_element_30 = const_tuple_str_plain_busy_int_pos_51_tuple;
    tmp_call_arg_element_31 = const_tuple_str_plain_unavailable_int_pos_52_tuple;
    tmp_call_arg_element_32 = const_tuple_str_plain_unwillingToPerform_int_pos_53_tuple;
    tmp_call_arg_element_33 = const_tuple_str_plain_loopDetect_int_pos_54_tuple;
    tmp_call_arg_element_34 = const_tuple_str_plain_namingViolation_int_pos_64_tuple;
    tmp_call_arg_element_35 = const_tuple_str_plain_objectClassViolation_int_pos_65_tuple;
    tmp_call_arg_element_36 = const_tuple_str_plain_notAllowedOnNonLeaf_int_pos_66_tuple;
    tmp_call_arg_element_37 = const_tuple_str_plain_notAllowedOnRDN_int_pos_67_tuple;
    tmp_call_arg_element_38 = const_tuple_str_plain_entryAlreadyExists_int_pos_68_tuple;
    tmp_call_arg_element_39 = const_tuple_str_plain_objectClassModsProhibited_int_pos_69_tuple;
    tmp_call_arg_element_40 = const_tuple_str_digest_f95e66addcd2fe5d78faabdeec24b203_int_pos_70_tuple;
    tmp_call_arg_element_41 = const_tuple_str_plain_affectsMultipleDSAs_int_pos_71_tuple;
    tmp_call_arg_element_42 = const_tuple_str_plain_other_int_pos_80_tuple;
    tmp_call_arg_element_43 = const_tuple_str_digest_d5e75659fbb8dd91b485f53529ce6029_int_pos_81_tuple;
    tmp_call_arg_element_44 = const_tuple_str_digest_c62754620912974b073e7a838e355782_int_pos_82_tuple;
    tmp_call_arg_element_45 = const_tuple_str_digest_bc1245ca16d93bd4ffa7e606a9f4b445_int_pos_83_tuple;
    tmp_call_arg_element_46 = const_tuple_str_digest_4f4038e9c5903a8e36f1972133d3d29f_int_pos_84_tuple;
    tmp_call_arg_element_47 = const_tuple_str_digest_94ef42bcdb99c0cee81fc3ee8ef2bafd_int_pos_85_tuple;
    tmp_call_arg_element_48 = const_tuple_str_digest_4902b3b8002754e9aa8d9efc06afe33c_int_pos_86_tuple;
    tmp_call_arg_element_49 = const_tuple_str_digest_c01ff8b1c3f7587c3342d653d8656713_int_pos_87_tuple;
    tmp_call_arg_element_50 = const_tuple_str_digest_374cdbe4bbbf65f37e852f694e02c190_int_pos_88_tuple;
    tmp_call_arg_element_51 = const_tuple_str_digest_9d169277999c894465fa96c2be79fc53_int_pos_89_tuple;
    tmp_call_arg_element_52 = const_tuple_str_digest_941c35c421ec5e89f5ed872865e8a629_int_pos_90_tuple;
    frame_function->f_lineno = 300;
    tmp_dict_value_1 = CALL_FUNCTION_WITH_ARGS52( tmp_called_name_6, tmp_call_arg_element_1, tmp_call_arg_element_2, tmp_call_arg_element_3, tmp_call_arg_element_4, tmp_call_arg_element_5, tmp_call_arg_element_6, tmp_call_arg_element_7, tmp_call_arg_element_8, tmp_call_arg_element_9, tmp_call_arg_element_10, tmp_call_arg_element_11, tmp_call_arg_element_12, tmp_call_arg_element_13, tmp_call_arg_element_14, tmp_call_arg_element_15, tmp_call_arg_element_16, tmp_call_arg_element_17, tmp_call_arg_element_18, tmp_call_arg_element_19, tmp_call_arg_element_20, tmp_call_arg_element_21, tmp_call_arg_element_22, tmp_call_arg_element_23, tmp_call_arg_element_24, tmp_call_arg_element_25, tmp_call_arg_element_26, tmp_call_arg_element_27, tmp_call_arg_element_28, tmp_call_arg_element_29, tmp_call_arg_element_30, tmp_call_arg_element_31, tmp_call_arg_element_32, tmp_call_arg_element_33, tmp_call_arg_element_34, tmp_call_arg_element_35, tmp_call_arg_element_36, tmp_call_arg_element_37, tmp_call_arg_element_38, tmp_call_arg_element_39, tmp_call_arg_element_40, tmp_call_arg_element_41, tmp_call_arg_element_42, tmp_call_arg_element_43, tmp_call_arg_element_44, tmp_call_arg_element_45, tmp_call_arg_element_46, tmp_call_arg_element_47, tmp_call_arg_element_48, tmp_call_arg_element_49, tmp_call_arg_element_50, tmp_call_arg_element_51, tmp_call_arg_element_52 );
    Py_DECREF( tmp_called_name_6 );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 300;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_1 = const_str_plain_namedValues;
    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    frame_function->f_lineno = 300;
    tmp_args_element_name_7 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_5, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_5 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_args_element_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 300;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 300;
    tmp_args_element_name_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, tmp_args_element_name_6, tmp_args_element_name_7 );
    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_args_element_name_7 );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 300;
        goto frame_exception_exit_1;
    }
    tmp_source_name_11 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_11 == NULL )
    {
        tmp_source_name_11 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_11 == NULL ))
        {
            tmp_source_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_11 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 301;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_NamedType );
    if ( tmp_called_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );

        exception_lineno = 301;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_9 = const_str_plain_matchedDN;
    tmp_called_name_8 = PyDict_GetItem( locals_dict, const_str_plain_LDAPDN );

    if ( tmp_called_name_8 == NULL )
    {
        tmp_called_name_8 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPDN );

        if (unlikely( tmp_called_name_8 == NULL ))
        {
            tmp_called_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPDN );
        }

        if ( tmp_called_name_8 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_called_name_7 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52807 ], 28, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 301;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 301;
    tmp_args_element_name_10 = CALL_FUNCTION_NO_ARGS( tmp_called_name_8 );
    if ( tmp_args_element_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_called_name_7 );

        exception_lineno = 301;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 301;
    tmp_args_element_name_8 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_7, tmp_args_element_name_9, tmp_args_element_name_10 );
    Py_DECREF( tmp_called_name_7 );
    Py_DECREF( tmp_args_element_name_10 );
    if ( tmp_args_element_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );

        exception_lineno = 301;
        goto frame_exception_exit_1;
    }
    tmp_source_name_12 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_12 == NULL )
    {
        tmp_source_name_12 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_12 == NULL ))
        {
            tmp_source_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_12 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 302;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_NamedType );
    if ( tmp_called_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );

        exception_lineno = 302;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_12 = const_str_plain_errorMessage;
    tmp_called_name_10 = PyDict_GetItem( locals_dict, const_str_plain_LDAPString );

    if ( tmp_called_name_10 == NULL )
    {
        tmp_called_name_10 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPString );

        if (unlikely( tmp_called_name_10 == NULL ))
        {
            tmp_called_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPString );
        }

        if ( tmp_called_name_10 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_called_name_9 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52505 ], 32, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 302;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 302;
    tmp_args_element_name_13 = CALL_FUNCTION_NO_ARGS( tmp_called_name_10 );
    if ( tmp_args_element_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_called_name_9 );

        exception_lineno = 302;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 302;
    tmp_args_element_name_11 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_9, tmp_args_element_name_12, tmp_args_element_name_13 );
    Py_DECREF( tmp_called_name_9 );
    Py_DECREF( tmp_args_element_name_13 );
    if ( tmp_args_element_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );

        exception_lineno = 302;
        goto frame_exception_exit_1;
    }
    tmp_source_name_13 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_13 == NULL )
    {
        tmp_source_name_13 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_13 == NULL ))
        {
            tmp_source_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_13 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 303;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_OptionalNamedType );
    if ( tmp_called_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );

        exception_lineno = 303;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_15 = const_str_plain_referral;
    tmp_called_name_13 = PyDict_GetItem( locals_dict, const_str_plain_Referral );

    if ( tmp_called_name_13 == NULL )
    {
        tmp_called_name_13 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_Referral );

        if (unlikely( tmp_called_name_13 == NULL ))
        {
            tmp_called_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Referral );
        }

        if ( tmp_called_name_13 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_called_name_11 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53240 ], 30, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 303;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 303;
    tmp_source_name_14 = CALL_FUNCTION_NO_ARGS( tmp_called_name_13 );
    if ( tmp_source_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_called_name_11 );

        exception_lineno = 303;
        goto frame_exception_exit_1;
    }
    tmp_called_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_14 );
    if ( tmp_called_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_called_name_11 );

        exception_lineno = 303;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_2 = _PyDict_NewPresized( 1 );
    tmp_source_name_15 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_15 == NULL )
    {
        tmp_source_name_15 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_15 == NULL ))
        {
            tmp_source_name_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_15 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_called_name_11 );
            Py_DECREF( tmp_called_name_12 );
            Py_DECREF( tmp_kw_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 303;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_Tag );
    if ( tmp_called_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_kw_name_2 );

        exception_lineno = 303;
        goto frame_exception_exit_1;
    }
    tmp_source_name_16 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_16 == NULL )
    {
        tmp_source_name_16 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_16 == NULL ))
        {
            tmp_source_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_16 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_called_name_11 );
            Py_DECREF( tmp_called_name_12 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_14 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 303;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_14 );

        exception_lineno = 303;
        goto frame_exception_exit_1;
    }
    tmp_source_name_17 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_17 == NULL )
    {
        tmp_source_name_17 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_17 == NULL ))
        {
            tmp_source_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_17 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_called_name_11 );
            Py_DECREF( tmp_called_name_12 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_14 );
            Py_DECREF( tmp_args_element_name_17 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 303;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_18 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_14 );
        Py_DECREF( tmp_args_element_name_17 );

        exception_lineno = 303;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_19 = const_int_pos_3;
    frame_function->f_lineno = 303;
    tmp_dict_value_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_14, tmp_args_element_name_17, tmp_args_element_name_18, tmp_args_element_name_19 );
    Py_DECREF( tmp_called_name_14 );
    Py_DECREF( tmp_args_element_name_17 );
    Py_DECREF( tmp_args_element_name_18 );
    if ( tmp_dict_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_kw_name_2 );

        exception_lineno = 303;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_2 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
    Py_DECREF( tmp_dict_value_2 );
    frame_function->f_lineno = 303;
    tmp_args_element_name_16 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_12, tmp_kw_name_2 );
    Py_DECREF( tmp_called_name_12 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_args_element_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_called_name_11 );

        exception_lineno = 303;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 303;
    tmp_args_element_name_14 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_11, tmp_args_element_name_15, tmp_args_element_name_16 );
    Py_DECREF( tmp_called_name_11 );
    Py_DECREF( tmp_args_element_name_16 );
    if ( tmp_args_element_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );

        exception_lineno = 303;
        goto frame_exception_exit_1;
    }
    tmp_source_name_18 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_18 == NULL )
    {
        tmp_source_name_18 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_18 == NULL ))
        {
            tmp_source_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_18 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_args_element_name_14 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 305;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_OptionalNamedType );
    if ( tmp_called_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );

        exception_lineno = 305;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_21 = const_str_plain_responseName;
    tmp_called_name_17 = PyDict_GetItem( locals_dict, const_str_plain_LDAPOID );

    if ( tmp_called_name_17 == NULL )
    {
        tmp_called_name_17 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPOID );

        if (unlikely( tmp_called_name_17 == NULL ))
        {
            tmp_called_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPOID );
        }

        if ( tmp_called_name_17 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_args_element_name_14 );
            Py_DECREF( tmp_called_name_15 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52683 ], 29, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 305;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 305;
    tmp_source_name_19 = CALL_FUNCTION_NO_ARGS( tmp_called_name_17 );
    if ( tmp_source_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_called_name_15 );

        exception_lineno = 305;
        goto frame_exception_exit_1;
    }
    tmp_called_name_16 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_19 );
    if ( tmp_called_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_called_name_15 );

        exception_lineno = 305;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_3 = _PyDict_NewPresized( 1 );
    tmp_source_name_20 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_20 == NULL )
    {
        tmp_source_name_20 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_20 == NULL ))
        {
            tmp_source_name_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_20 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_args_element_name_14 );
            Py_DECREF( tmp_called_name_15 );
            Py_DECREF( tmp_called_name_16 );
            Py_DECREF( tmp_kw_name_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 305;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_18 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_Tag );
    if ( tmp_called_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_kw_name_3 );

        exception_lineno = 305;
        goto frame_exception_exit_1;
    }
    tmp_source_name_21 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_21 == NULL )
    {
        tmp_source_name_21 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_21 == NULL ))
        {
            tmp_source_name_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_21 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_args_element_name_14 );
            Py_DECREF( tmp_called_name_15 );
            Py_DECREF( tmp_called_name_16 );
            Py_DECREF( tmp_kw_name_3 );
            Py_DECREF( tmp_called_name_18 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 305;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_23 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_kw_name_3 );
        Py_DECREF( tmp_called_name_18 );

        exception_lineno = 305;
        goto frame_exception_exit_1;
    }
    tmp_source_name_22 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_22 == NULL )
    {
        tmp_source_name_22 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_22 == NULL ))
        {
            tmp_source_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_22 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_args_element_name_14 );
            Py_DECREF( tmp_called_name_15 );
            Py_DECREF( tmp_called_name_16 );
            Py_DECREF( tmp_kw_name_3 );
            Py_DECREF( tmp_called_name_18 );
            Py_DECREF( tmp_args_element_name_23 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 305;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_24 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_tagFormatSimple );
    if ( tmp_args_element_name_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_kw_name_3 );
        Py_DECREF( tmp_called_name_18 );
        Py_DECREF( tmp_args_element_name_23 );

        exception_lineno = 305;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_25 = const_int_pos_10;
    frame_function->f_lineno = 305;
    tmp_dict_value_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_18, tmp_args_element_name_23, tmp_args_element_name_24, tmp_args_element_name_25 );
    Py_DECREF( tmp_called_name_18 );
    Py_DECREF( tmp_args_element_name_23 );
    Py_DECREF( tmp_args_element_name_24 );
    if ( tmp_dict_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_kw_name_3 );

        exception_lineno = 305;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_3 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_3, tmp_dict_value_3 );
    Py_DECREF( tmp_dict_value_3 );
    frame_function->f_lineno = 305;
    tmp_args_element_name_22 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_16, tmp_kw_name_3 );
    Py_DECREF( tmp_called_name_16 );
    Py_DECREF( tmp_kw_name_3 );
    if ( tmp_args_element_name_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_called_name_15 );

        exception_lineno = 305;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 305;
    tmp_args_element_name_20 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_15, tmp_args_element_name_21, tmp_args_element_name_22 );
    Py_DECREF( tmp_called_name_15 );
    Py_DECREF( tmp_args_element_name_22 );
    if ( tmp_args_element_name_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );

        exception_lineno = 305;
        goto frame_exception_exit_1;
    }
    tmp_source_name_23 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_23 == NULL )
    {
        tmp_source_name_23 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_23 == NULL ))
        {
            tmp_source_name_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_23 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_args_element_name_14 );
            Py_DECREF( tmp_args_element_name_20 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 306;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_19 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain_OptionalNamedType );
    if ( tmp_called_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_args_element_name_20 );

        exception_lineno = 306;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_27 = const_str_plain_response;
    tmp_source_name_25 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_25 == NULL )
    {
        tmp_source_name_25 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_25 == NULL ))
        {
            tmp_source_name_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_25 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_args_element_name_14 );
            Py_DECREF( tmp_args_element_name_20 );
            Py_DECREF( tmp_called_name_19 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 306;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_21 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain_OctetString );
    if ( tmp_called_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_args_element_name_20 );
        Py_DECREF( tmp_called_name_19 );

        exception_lineno = 306;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 306;
    tmp_source_name_24 = CALL_FUNCTION_NO_ARGS( tmp_called_name_21 );
    Py_DECREF( tmp_called_name_21 );
    if ( tmp_source_name_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_args_element_name_20 );
        Py_DECREF( tmp_called_name_19 );

        exception_lineno = 306;
        goto frame_exception_exit_1;
    }
    tmp_called_name_20 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_24 );
    if ( tmp_called_name_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_args_element_name_20 );
        Py_DECREF( tmp_called_name_19 );

        exception_lineno = 306;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_4 = _PyDict_NewPresized( 1 );
    tmp_source_name_26 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_26 == NULL )
    {
        tmp_source_name_26 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_26 == NULL ))
        {
            tmp_source_name_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_26 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_args_element_name_14 );
            Py_DECREF( tmp_args_element_name_20 );
            Py_DECREF( tmp_called_name_19 );
            Py_DECREF( tmp_called_name_20 );
            Py_DECREF( tmp_kw_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 306;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_22 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain_Tag );
    if ( tmp_called_name_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_args_element_name_20 );
        Py_DECREF( tmp_called_name_19 );
        Py_DECREF( tmp_called_name_20 );
        Py_DECREF( tmp_kw_name_4 );

        exception_lineno = 306;
        goto frame_exception_exit_1;
    }
    tmp_source_name_27 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_27 == NULL )
    {
        tmp_source_name_27 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_27 == NULL ))
        {
            tmp_source_name_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_27 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_args_element_name_14 );
            Py_DECREF( tmp_args_element_name_20 );
            Py_DECREF( tmp_called_name_19 );
            Py_DECREF( tmp_called_name_20 );
            Py_DECREF( tmp_kw_name_4 );
            Py_DECREF( tmp_called_name_22 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 306;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_29 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_args_element_name_20 );
        Py_DECREF( tmp_called_name_19 );
        Py_DECREF( tmp_called_name_20 );
        Py_DECREF( tmp_kw_name_4 );
        Py_DECREF( tmp_called_name_22 );

        exception_lineno = 306;
        goto frame_exception_exit_1;
    }
    tmp_source_name_28 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_28 == NULL )
    {
        tmp_source_name_28 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_28 == NULL ))
        {
            tmp_source_name_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_28 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_args_element_name_14 );
            Py_DECREF( tmp_args_element_name_20 );
            Py_DECREF( tmp_called_name_19 );
            Py_DECREF( tmp_called_name_20 );
            Py_DECREF( tmp_kw_name_4 );
            Py_DECREF( tmp_called_name_22 );
            Py_DECREF( tmp_args_element_name_29 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 306;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_30 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain_tagFormatSimple );
    if ( tmp_args_element_name_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_args_element_name_20 );
        Py_DECREF( tmp_called_name_19 );
        Py_DECREF( tmp_called_name_20 );
        Py_DECREF( tmp_kw_name_4 );
        Py_DECREF( tmp_called_name_22 );
        Py_DECREF( tmp_args_element_name_29 );

        exception_lineno = 306;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_31 = const_int_pos_11;
    frame_function->f_lineno = 306;
    tmp_dict_value_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_22, tmp_args_element_name_29, tmp_args_element_name_30, tmp_args_element_name_31 );
    Py_DECREF( tmp_called_name_22 );
    Py_DECREF( tmp_args_element_name_29 );
    Py_DECREF( tmp_args_element_name_30 );
    if ( tmp_dict_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_args_element_name_20 );
        Py_DECREF( tmp_called_name_19 );
        Py_DECREF( tmp_called_name_20 );
        Py_DECREF( tmp_kw_name_4 );

        exception_lineno = 306;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_4 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_4, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    frame_function->f_lineno = 306;
    tmp_args_element_name_28 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_20, tmp_kw_name_4 );
    Py_DECREF( tmp_called_name_20 );
    Py_DECREF( tmp_kw_name_4 );
    if ( tmp_args_element_name_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_args_element_name_20 );
        Py_DECREF( tmp_called_name_19 );

        exception_lineno = 306;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 306;
    tmp_args_element_name_26 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_19, tmp_args_element_name_27, tmp_args_element_name_28 );
    Py_DECREF( tmp_called_name_19 );
    Py_DECREF( tmp_args_element_name_28 );
    if ( tmp_args_element_name_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        Py_DECREF( tmp_args_element_name_20 );

        exception_lineno = 306;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 306;
    tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS6( tmp_called_name_3, tmp_args_element_name_5, tmp_args_element_name_8, tmp_args_element_name_11, tmp_args_element_name_14, tmp_args_element_name_20, tmp_args_element_name_26 );
    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_5 );
    Py_DECREF( tmp_args_element_name_8 );
    Py_DECREF( tmp_args_element_name_11 );
    Py_DECREF( tmp_args_element_name_14 );
    Py_DECREF( tmp_args_element_name_20 );
    Py_DECREF( tmp_args_element_name_26 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 306;
        goto frame_exception_exit_1;
    }
    assert( var_componentType == NULL );
    var_componentType = tmp_assign_source_4;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 295;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 295;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 295;
                goto frame_exception_exit_1;
            }
            }
            if ( var_tagSet != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_tagSet,
                    var_tagSet
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 295;
                goto frame_exception_exit_1;
            }
            }
            if ( var_componentType != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_componentType,
                    var_componentType
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 295;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_23 = closure_pyasn1_modules$rfc2251_class_creation_47__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_ExtendedResponse;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_47__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_tagSet != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_tagSet,
            var_tagSet
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_componentType != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_componentType,
            var_componentType
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_5 = closure_pyasn1_modules$rfc2251_class_creation_47__class_decl_dict;

    tmp_assign_source_5 = CALL_FUNCTION( tmp_called_name_23, tmp_args_name_1, tmp_kw_name_5 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_5;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_47_ExtendedResponse_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_tagSet );
    var_tagSet = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_47_ExtendedResponse_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_48_MessageID_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_48__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_48__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_48__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_48__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_subtypeSpec = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_left_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_48__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_MessageID;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_ddb6cda0d2f59c4dc1bd961b622d2557, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_2 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_2 == NULL )
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_2 == NULL ))
        {
            tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 310;
            goto frame_exception_exit_1;
        }

    }

    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_Integer );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 310;
        goto frame_exception_exit_1;
    }
    tmp_left_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_subtypeSpec );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_left_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 310;
        goto frame_exception_exit_1;
    }
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_constraint );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_constraint );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_constraint );
        }

        if ( tmp_source_name_3 == NULL )
        {
            Py_DECREF( tmp_left_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 49934 ], 32, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 310;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_ValueRangeConstraint );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_1 );

        exception_lineno = 310;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = const_int_0;
    tmp_args_element_name_2 = PyDict_GetItem( locals_dict, const_str_plain_maxInt );

    if ( tmp_args_element_name_2 == NULL )
    {
        tmp_args_element_name_2 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_maxInt );

        if (unlikely( tmp_args_element_name_2 == NULL ))
        {
            tmp_args_element_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_maxInt );
        }

        if ( tmp_args_element_name_2 == NULL )
        {
            Py_DECREF( tmp_left_name_1 );
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53138 ], 28, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 311;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 311;
    tmp_right_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, tmp_args_element_name_1, tmp_args_element_name_2 );
    Py_DECREF( tmp_called_name_1 );
    if ( tmp_right_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_1 );

        exception_lineno = 311;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_3 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 310;
        goto frame_exception_exit_1;
    }
    assert( var_subtypeSpec == NULL );
    var_subtypeSpec = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 309;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 309;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 309;
                goto frame_exception_exit_1;
            }
            }
            if ( var_subtypeSpec != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_subtypeSpec,
                    var_subtypeSpec
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 309;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_2 = closure_pyasn1_modules$rfc2251_class_creation_48__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_MessageID;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_48__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_subtypeSpec != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_subtypeSpec,
            var_subtypeSpec
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = closure_pyasn1_modules$rfc2251_class_creation_48__class_decl_dict;

    tmp_assign_source_4 = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_4;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_48_MessageID_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_subtypeSpec );
    var_subtypeSpec = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_subtypeSpec );
    var_subtypeSpec = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_48_MessageID_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_49_LDAPMessage_of_pyasn1_modules$rfc2251( PyObject *&closure_pyasn1_modules$rfc2251_class_creation_49__bases, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_49__class_decl_dict, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_49__metaclass, PyObject *&closure_pyasn1_modules$rfc2251_class_creation_49__prepared )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObject *var___module__ = NULL;
    PyObject *var___qualname__ = NULL;
    PyObject *var___class__ = NULL;
    PyObject *var_componentType = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_args_element_name_20;
    PyObject *tmp_args_element_name_21;
    PyObject *tmp_args_element_name_22;
    PyObject *tmp_args_element_name_23;
    PyObject *tmp_args_element_name_24;
    PyObject *tmp_args_element_name_25;
    PyObject *tmp_args_element_name_26;
    PyObject *tmp_args_element_name_27;
    PyObject *tmp_args_element_name_28;
    PyObject *tmp_args_element_name_29;
    PyObject *tmp_args_element_name_30;
    PyObject *tmp_args_element_name_31;
    PyObject *tmp_args_element_name_32;
    PyObject *tmp_args_element_name_33;
    PyObject *tmp_args_element_name_34;
    PyObject *tmp_args_element_name_35;
    PyObject *tmp_args_element_name_36;
    PyObject *tmp_args_element_name_37;
    PyObject *tmp_args_element_name_38;
    PyObject *tmp_args_element_name_39;
    PyObject *tmp_args_element_name_40;
    PyObject *tmp_args_element_name_41;
    PyObject *tmp_args_element_name_42;
    PyObject *tmp_args_element_name_43;
    PyObject *tmp_args_element_name_44;
    PyObject *tmp_args_element_name_45;
    PyObject *tmp_args_element_name_46;
    PyObject *tmp_args_element_name_47;
    PyObject *tmp_args_element_name_48;
    PyObject *tmp_args_element_name_49;
    PyObject *tmp_args_element_name_50;
    PyObject *tmp_args_element_name_51;
    PyObject *tmp_args_element_name_52;
    PyObject *tmp_args_element_name_53;
    PyObject *tmp_args_element_name_54;
    PyObject *tmp_args_element_name_55;
    PyObject *tmp_args_element_name_56;
    PyObject *tmp_args_element_name_57;
    PyObject *tmp_args_element_name_58;
    PyObject *tmp_args_element_name_59;
    PyObject *tmp_args_element_name_60;
    PyObject *tmp_args_element_name_61;
    PyObject *tmp_args_element_name_62;
    PyObject *tmp_args_element_name_63;
    PyObject *tmp_args_element_name_64;
    PyObject *tmp_args_element_name_65;
    PyObject *tmp_args_element_name_66;
    PyObject *tmp_args_element_name_67;
    PyObject *tmp_args_element_name_68;
    PyObject *tmp_args_element_name_69;
    PyObject *tmp_args_element_name_70;
    PyObject *tmp_args_element_name_71;
    PyObject *tmp_args_element_name_72;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_called_name_16;
    PyObject *tmp_called_name_17;
    PyObject *tmp_called_name_18;
    PyObject *tmp_called_name_19;
    PyObject *tmp_called_name_20;
    PyObject *tmp_called_name_21;
    PyObject *tmp_called_name_22;
    PyObject *tmp_called_name_23;
    PyObject *tmp_called_name_24;
    PyObject *tmp_called_name_25;
    PyObject *tmp_called_name_26;
    PyObject *tmp_called_name_27;
    PyObject *tmp_called_name_28;
    PyObject *tmp_called_name_29;
    PyObject *tmp_called_name_30;
    PyObject *tmp_called_name_31;
    PyObject *tmp_called_name_32;
    PyObject *tmp_called_name_33;
    PyObject *tmp_called_name_34;
    PyObject *tmp_called_name_35;
    PyObject *tmp_called_name_36;
    PyObject *tmp_called_name_37;
    PyObject *tmp_called_name_38;
    PyObject *tmp_called_name_39;
    PyObject *tmp_called_name_40;
    PyObject *tmp_called_name_41;
    PyObject *tmp_called_name_42;
    PyObject *tmp_called_name_43;
    PyObject *tmp_called_name_44;
    PyObject *tmp_called_name_45;
    PyObject *tmp_called_name_46;
    PyObject *tmp_called_name_47;
    PyObject *tmp_called_name_48;
    PyObject *tmp_called_name_49;
    PyObject *tmp_called_name_50;
    PyObject *tmp_called_name_51;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    PyObject *tmp_kw_name_3;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_source_name_22;
    PyObject *tmp_source_name_23;
    PyObject *tmp_source_name_24;
    PyObject *tmp_source_name_25;
    PyObject *tmp_source_name_26;
    PyObject *tmp_source_name_27;
    PyObject *tmp_source_name_28;
    PyObject *tmp_source_name_29;
    PyObject *tmp_source_name_30;
    PyObject *tmp_tuple_element_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_set_locals = closure_pyasn1_modules$rfc2251_class_creation_49__prepared;

    Py_DECREF(locals_dict);
    locals_dict = tmp_set_locals;
    Py_INCREF(locals_dict);
    tmp_assign_source_1 = const_str_digest_e30baf3a42d48aa38c91959217bd1135;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_str_plain_LDAPMessage;
    assert( var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___qualname__ = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_e7c833233274c9eee1aaa211089a1f8e, module_pyasn1_modules$rfc2251 );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_1 == NULL )
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_1 == NULL ))
        {
            tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 315;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_NamedTypes );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 315;
        goto frame_exception_exit_1;
    }
    tmp_source_name_2 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_2 == NULL )
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_2 == NULL ))
        {
            tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_2 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 316;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_NamedType );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 316;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = const_str_plain_messageID;
    tmp_called_name_3 = PyDict_GetItem( locals_dict, const_str_plain_MessageID );

    if ( tmp_called_name_3 == NULL )
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_MessageID );

        if (unlikely( tmp_called_name_3 == NULL ))
        {
            tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MessageID );
        }

        if ( tmp_called_name_3 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53385 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 316;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 316;
    tmp_args_element_name_3 = CALL_FUNCTION_NO_ARGS( tmp_called_name_3 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 316;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 316;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, tmp_args_element_name_2, tmp_args_element_name_3 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 316;
        goto frame_exception_exit_1;
    }
    tmp_source_name_3 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_3 == NULL )
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_3 == NULL ))
        {
            tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_3 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_NamedType );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_5 = const_str_plain_protocolOp;
    tmp_source_name_4 = PyDict_GetItem( locals_dict, const_str_plain_univ );

    if ( tmp_source_name_4 == NULL )
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

        if (unlikely( tmp_source_name_4 == NULL ))
        {
            tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
        }

        if ( tmp_source_name_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_Choice );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_source_name_5 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_5 == NULL )
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_5 == NULL ))
        {
            tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_NamedTypes );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_6 == NULL )
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_6 == NULL ))
        {
            tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_NamedType );
    if ( tmp_called_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_8 = const_str_plain_bindRequest;
    tmp_called_name_8 = PyDict_GetItem( locals_dict, const_str_plain_BindRequest );

    if ( tmp_called_name_8 == NULL )
    {
        tmp_called_name_8 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_BindRequest );

        if (unlikely( tmp_called_name_8 == NULL ))
        {
            tmp_called_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BindRequest );
        }

        if ( tmp_called_name_8 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_called_name_7 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53416 ], 33, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 317;
    tmp_args_element_name_9 = CALL_FUNCTION_NO_ARGS( tmp_called_name_8 );
    if ( tmp_args_element_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_called_name_7 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 317;
    tmp_args_element_name_7 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_7, tmp_args_element_name_8, tmp_args_element_name_9 );
    Py_DECREF( tmp_called_name_7 );
    Py_DECREF( tmp_args_element_name_9 );
    if ( tmp_args_element_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_source_name_7 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_7 == NULL )
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_7 == NULL ))
        {
            tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_7 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_NamedType );
    if ( tmp_called_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_11 = const_str_plain_bindResponse;
    tmp_called_name_10 = PyDict_GetItem( locals_dict, const_str_plain_BindResponse );

    if ( tmp_called_name_10 == NULL )
    {
        tmp_called_name_10 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_BindResponse );

        if (unlikely( tmp_called_name_10 == NULL ))
        {
            tmp_called_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BindResponse );
        }

        if ( tmp_called_name_10 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_called_name_9 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53449 ], 34, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 317;
    tmp_args_element_name_12 = CALL_FUNCTION_NO_ARGS( tmp_called_name_10 );
    if ( tmp_args_element_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_called_name_9 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 317;
    tmp_args_element_name_10 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_9, tmp_args_element_name_11, tmp_args_element_name_12 );
    Py_DECREF( tmp_called_name_9 );
    Py_DECREF( tmp_args_element_name_12 );
    if ( tmp_args_element_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_source_name_8 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_8 == NULL )
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_8 == NULL ))
        {
            tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_8 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_NamedType );
    if ( tmp_called_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_14 = const_str_plain_unbindRequest;
    tmp_called_name_12 = PyDict_GetItem( locals_dict, const_str_plain_UnbindRequest );

    if ( tmp_called_name_12 == NULL )
    {
        tmp_called_name_12 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_UnbindRequest );

        if (unlikely( tmp_called_name_12 == NULL ))
        {
            tmp_called_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_UnbindRequest );
        }

        if ( tmp_called_name_12 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_called_name_11 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53483 ], 35, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 317;
    tmp_args_element_name_15 = CALL_FUNCTION_NO_ARGS( tmp_called_name_12 );
    if ( tmp_args_element_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_called_name_11 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 317;
    tmp_args_element_name_13 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_11, tmp_args_element_name_14, tmp_args_element_name_15 );
    Py_DECREF( tmp_called_name_11 );
    Py_DECREF( tmp_args_element_name_15 );
    if ( tmp_args_element_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_source_name_9 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_9 == NULL )
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_9 == NULL ))
        {
            tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_9 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_NamedType );
    if ( tmp_called_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_17 = const_str_plain_searchRequest;
    tmp_called_name_14 = PyDict_GetItem( locals_dict, const_str_plain_SearchRequest );

    if ( tmp_called_name_14 == NULL )
    {
        tmp_called_name_14 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_SearchRequest );

        if (unlikely( tmp_called_name_14 == NULL ))
        {
            tmp_called_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SearchRequest );
        }

        if ( tmp_called_name_14 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_called_name_13 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53518 ], 35, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 317;
    tmp_args_element_name_18 = CALL_FUNCTION_NO_ARGS( tmp_called_name_14 );
    if ( tmp_args_element_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_called_name_13 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 317;
    tmp_args_element_name_16 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_13, tmp_args_element_name_17, tmp_args_element_name_18 );
    Py_DECREF( tmp_called_name_13 );
    Py_DECREF( tmp_args_element_name_18 );
    if ( tmp_args_element_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_source_name_10 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_10 == NULL )
    {
        tmp_source_name_10 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_10 == NULL ))
        {
            tmp_source_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_10 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_NamedType );
    if ( tmp_called_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_20 = const_str_plain_searchResEntry;
    tmp_called_name_16 = PyDict_GetItem( locals_dict, const_str_plain_SearchResultEntry );

    if ( tmp_called_name_16 == NULL )
    {
        tmp_called_name_16 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_SearchResultEntry );

        if (unlikely( tmp_called_name_16 == NULL ))
        {
            tmp_called_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SearchResultEntry );
        }

        if ( tmp_called_name_16 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_called_name_15 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53553 ], 39, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 317;
    tmp_args_element_name_21 = CALL_FUNCTION_NO_ARGS( tmp_called_name_16 );
    if ( tmp_args_element_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_called_name_15 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 317;
    tmp_args_element_name_19 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_15, tmp_args_element_name_20, tmp_args_element_name_21 );
    Py_DECREF( tmp_called_name_15 );
    Py_DECREF( tmp_args_element_name_21 );
    if ( tmp_args_element_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_source_name_11 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_11 == NULL )
    {
        tmp_source_name_11 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_11 == NULL ))
        {
            tmp_source_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_11 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_NamedType );
    if ( tmp_called_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_23 = const_str_plain_searchResDone;
    tmp_called_name_18 = PyDict_GetItem( locals_dict, const_str_plain_SearchResultDone );

    if ( tmp_called_name_18 == NULL )
    {
        tmp_called_name_18 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_SearchResultDone );

        if (unlikely( tmp_called_name_18 == NULL ))
        {
            tmp_called_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SearchResultDone );
        }

        if ( tmp_called_name_18 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_called_name_17 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53592 ], 38, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 317;
    tmp_args_element_name_24 = CALL_FUNCTION_NO_ARGS( tmp_called_name_18 );
    if ( tmp_args_element_name_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_called_name_17 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 317;
    tmp_args_element_name_22 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_17, tmp_args_element_name_23, tmp_args_element_name_24 );
    Py_DECREF( tmp_called_name_17 );
    Py_DECREF( tmp_args_element_name_24 );
    if ( tmp_args_element_name_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_source_name_12 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_12 == NULL )
    {
        tmp_source_name_12 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_12 == NULL ))
        {
            tmp_source_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_12 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_19 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_NamedType );
    if ( tmp_called_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_26 = const_str_plain_searchResRef;
    tmp_called_name_20 = PyDict_GetItem( locals_dict, const_str_plain_SearchResultReference );

    if ( tmp_called_name_20 == NULL )
    {
        tmp_called_name_20 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_SearchResultReference );

        if (unlikely( tmp_called_name_20 == NULL ))
        {
            tmp_called_name_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SearchResultReference );
        }

        if ( tmp_called_name_20 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            Py_DECREF( tmp_called_name_19 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53630 ], 43, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 317;
    tmp_args_element_name_27 = CALL_FUNCTION_NO_ARGS( tmp_called_name_20 );
    if ( tmp_args_element_name_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_called_name_19 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 317;
    tmp_args_element_name_25 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_19, tmp_args_element_name_26, tmp_args_element_name_27 );
    Py_DECREF( tmp_called_name_19 );
    Py_DECREF( tmp_args_element_name_27 );
    if ( tmp_args_element_name_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_source_name_13 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_13 == NULL )
    {
        tmp_source_name_13 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_13 == NULL ))
        {
            tmp_source_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_13 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            Py_DECREF( tmp_args_element_name_25 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_21 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_NamedType );
    if ( tmp_called_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_29 = const_str_plain_modifyRequest;
    tmp_called_name_22 = PyDict_GetItem( locals_dict, const_str_plain_ModifyRequest );

    if ( tmp_called_name_22 == NULL )
    {
        tmp_called_name_22 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_ModifyRequest );

        if (unlikely( tmp_called_name_22 == NULL ))
        {
            tmp_called_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ModifyRequest );
        }

        if ( tmp_called_name_22 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_called_name_21 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53673 ], 35, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 317;
    tmp_args_element_name_30 = CALL_FUNCTION_NO_ARGS( tmp_called_name_22 );
    if ( tmp_args_element_name_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_called_name_21 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 317;
    tmp_args_element_name_28 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_21, tmp_args_element_name_29, tmp_args_element_name_30 );
    Py_DECREF( tmp_called_name_21 );
    Py_DECREF( tmp_args_element_name_30 );
    if ( tmp_args_element_name_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_source_name_14 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_14 == NULL )
    {
        tmp_source_name_14 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_14 == NULL ))
        {
            tmp_source_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_14 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_28 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_23 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_NamedType );
    if ( tmp_called_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_32 = const_str_plain_modifyResponse;
    tmp_called_name_24 = PyDict_GetItem( locals_dict, const_str_plain_ModifyResponse );

    if ( tmp_called_name_24 == NULL )
    {
        tmp_called_name_24 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_ModifyResponse );

        if (unlikely( tmp_called_name_24 == NULL ))
        {
            tmp_called_name_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ModifyResponse );
        }

        if ( tmp_called_name_24 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_28 );
            Py_DECREF( tmp_called_name_23 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53708 ], 36, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 317;
    tmp_args_element_name_33 = CALL_FUNCTION_NO_ARGS( tmp_called_name_24 );
    if ( tmp_args_element_name_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_called_name_23 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 317;
    tmp_args_element_name_31 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_23, tmp_args_element_name_32, tmp_args_element_name_33 );
    Py_DECREF( tmp_called_name_23 );
    Py_DECREF( tmp_args_element_name_33 );
    if ( tmp_args_element_name_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_source_name_15 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_15 == NULL )
    {
        tmp_source_name_15 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_15 == NULL ))
        {
            tmp_source_name_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_15 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_28 );
            Py_DECREF( tmp_args_element_name_31 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_25 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_NamedType );
    if ( tmp_called_name_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_35 = const_str_plain_addRequest;
    tmp_called_name_26 = PyDict_GetItem( locals_dict, const_str_plain_AddRequest );

    if ( tmp_called_name_26 == NULL )
    {
        tmp_called_name_26 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AddRequest );

        if (unlikely( tmp_called_name_26 == NULL ))
        {
            tmp_called_name_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AddRequest );
        }

        if ( tmp_called_name_26 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_28 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_called_name_25 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53744 ], 32, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 317;
    tmp_args_element_name_36 = CALL_FUNCTION_NO_ARGS( tmp_called_name_26 );
    if ( tmp_args_element_name_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_called_name_25 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 317;
    tmp_args_element_name_34 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_25, tmp_args_element_name_35, tmp_args_element_name_36 );
    Py_DECREF( tmp_called_name_25 );
    Py_DECREF( tmp_args_element_name_36 );
    if ( tmp_args_element_name_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_source_name_16 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_16 == NULL )
    {
        tmp_source_name_16 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_16 == NULL ))
        {
            tmp_source_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_16 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_28 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_34 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_27 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_NamedType );
    if ( tmp_called_name_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_38 = const_str_plain_addResponse;
    tmp_called_name_28 = PyDict_GetItem( locals_dict, const_str_plain_AddResponse );

    if ( tmp_called_name_28 == NULL )
    {
        tmp_called_name_28 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AddResponse );

        if (unlikely( tmp_called_name_28 == NULL ))
        {
            tmp_called_name_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AddResponse );
        }

        if ( tmp_called_name_28 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_28 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_34 );
            Py_DECREF( tmp_called_name_27 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53776 ], 33, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 317;
    tmp_args_element_name_39 = CALL_FUNCTION_NO_ARGS( tmp_called_name_28 );
    if ( tmp_args_element_name_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );
        Py_DECREF( tmp_called_name_27 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 317;
    tmp_args_element_name_37 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_27, tmp_args_element_name_38, tmp_args_element_name_39 );
    Py_DECREF( tmp_called_name_27 );
    Py_DECREF( tmp_args_element_name_39 );
    if ( tmp_args_element_name_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_source_name_17 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_17 == NULL )
    {
        tmp_source_name_17 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_17 == NULL ))
        {
            tmp_source_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_17 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_28 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_34 );
            Py_DECREF( tmp_args_element_name_37 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_29 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_NamedType );
    if ( tmp_called_name_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );
        Py_DECREF( tmp_args_element_name_37 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_41 = const_str_plain_delRequest;
    tmp_called_name_30 = PyDict_GetItem( locals_dict, const_str_plain_DelRequest );

    if ( tmp_called_name_30 == NULL )
    {
        tmp_called_name_30 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_DelRequest );

        if (unlikely( tmp_called_name_30 == NULL ))
        {
            tmp_called_name_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DelRequest );
        }

        if ( tmp_called_name_30 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_28 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_34 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_called_name_29 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53809 ], 32, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 317;
    tmp_args_element_name_42 = CALL_FUNCTION_NO_ARGS( tmp_called_name_30 );
    if ( tmp_args_element_name_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_called_name_29 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 317;
    tmp_args_element_name_40 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_29, tmp_args_element_name_41, tmp_args_element_name_42 );
    Py_DECREF( tmp_called_name_29 );
    Py_DECREF( tmp_args_element_name_42 );
    if ( tmp_args_element_name_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );
        Py_DECREF( tmp_args_element_name_37 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_source_name_18 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_18 == NULL )
    {
        tmp_source_name_18 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_18 == NULL ))
        {
            tmp_source_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_18 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_28 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_34 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_40 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_31 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_NamedType );
    if ( tmp_called_name_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_40 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_44 = const_str_plain_delResponse;
    tmp_called_name_32 = PyDict_GetItem( locals_dict, const_str_plain_DelResponse );

    if ( tmp_called_name_32 == NULL )
    {
        tmp_called_name_32 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_DelResponse );

        if (unlikely( tmp_called_name_32 == NULL ))
        {
            tmp_called_name_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DelResponse );
        }

        if ( tmp_called_name_32 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_28 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_34 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_40 );
            Py_DECREF( tmp_called_name_31 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53841 ], 33, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 317;
    tmp_args_element_name_45 = CALL_FUNCTION_NO_ARGS( tmp_called_name_32 );
    if ( tmp_args_element_name_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_40 );
        Py_DECREF( tmp_called_name_31 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 317;
    tmp_args_element_name_43 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_31, tmp_args_element_name_44, tmp_args_element_name_45 );
    Py_DECREF( tmp_called_name_31 );
    Py_DECREF( tmp_args_element_name_45 );
    if ( tmp_args_element_name_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_40 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_source_name_19 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_19 == NULL )
    {
        tmp_source_name_19 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_19 == NULL ))
        {
            tmp_source_name_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_19 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_28 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_34 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_40 );
            Py_DECREF( tmp_args_element_name_43 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_33 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_NamedType );
    if ( tmp_called_name_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_40 );
        Py_DECREF( tmp_args_element_name_43 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_47 = const_str_plain_modDNRequest;
    tmp_called_name_34 = PyDict_GetItem( locals_dict, const_str_plain_ModifyDNRequest );

    if ( tmp_called_name_34 == NULL )
    {
        tmp_called_name_34 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_ModifyDNRequest );

        if (unlikely( tmp_called_name_34 == NULL ))
        {
            tmp_called_name_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ModifyDNRequest );
        }

        if ( tmp_called_name_34 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_28 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_34 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_40 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_called_name_33 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53874 ], 37, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 317;
    tmp_args_element_name_48 = CALL_FUNCTION_NO_ARGS( tmp_called_name_34 );
    if ( tmp_args_element_name_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_40 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_called_name_33 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 317;
    tmp_args_element_name_46 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_33, tmp_args_element_name_47, tmp_args_element_name_48 );
    Py_DECREF( tmp_called_name_33 );
    Py_DECREF( tmp_args_element_name_48 );
    if ( tmp_args_element_name_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_40 );
        Py_DECREF( tmp_args_element_name_43 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_source_name_20 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_20 == NULL )
    {
        tmp_source_name_20 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_20 == NULL ))
        {
            tmp_source_name_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_20 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_28 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_34 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_40 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_args_element_name_46 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_35 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_NamedType );
    if ( tmp_called_name_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_40 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_46 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_50 = const_str_plain_modDNResponse;
    tmp_called_name_36 = PyDict_GetItem( locals_dict, const_str_plain_ModifyDNResponse );

    if ( tmp_called_name_36 == NULL )
    {
        tmp_called_name_36 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_ModifyDNResponse );

        if (unlikely( tmp_called_name_36 == NULL ))
        {
            tmp_called_name_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ModifyDNResponse );
        }

        if ( tmp_called_name_36 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_28 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_34 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_40 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_args_element_name_46 );
            Py_DECREF( tmp_called_name_35 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53911 ], 38, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 317;
    tmp_args_element_name_51 = CALL_FUNCTION_NO_ARGS( tmp_called_name_36 );
    if ( tmp_args_element_name_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_40 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_46 );
        Py_DECREF( tmp_called_name_35 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 317;
    tmp_args_element_name_49 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_35, tmp_args_element_name_50, tmp_args_element_name_51 );
    Py_DECREF( tmp_called_name_35 );
    Py_DECREF( tmp_args_element_name_51 );
    if ( tmp_args_element_name_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_40 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_46 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_source_name_21 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_21 == NULL )
    {
        tmp_source_name_21 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_21 == NULL ))
        {
            tmp_source_name_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_21 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_28 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_34 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_40 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_args_element_name_46 );
            Py_DECREF( tmp_args_element_name_49 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_37 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_NamedType );
    if ( tmp_called_name_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_40 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_46 );
        Py_DECREF( tmp_args_element_name_49 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_53 = const_str_plain_compareRequest;
    tmp_called_name_38 = PyDict_GetItem( locals_dict, const_str_plain_CompareRequest );

    if ( tmp_called_name_38 == NULL )
    {
        tmp_called_name_38 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_CompareRequest );

        if (unlikely( tmp_called_name_38 == NULL ))
        {
            tmp_called_name_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_CompareRequest );
        }

        if ( tmp_called_name_38 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_28 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_34 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_40 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_args_element_name_46 );
            Py_DECREF( tmp_args_element_name_49 );
            Py_DECREF( tmp_called_name_37 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53949 ], 36, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 317;
    tmp_args_element_name_54 = CALL_FUNCTION_NO_ARGS( tmp_called_name_38 );
    if ( tmp_args_element_name_54 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_40 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_46 );
        Py_DECREF( tmp_args_element_name_49 );
        Py_DECREF( tmp_called_name_37 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 317;
    tmp_args_element_name_52 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_37, tmp_args_element_name_53, tmp_args_element_name_54 );
    Py_DECREF( tmp_called_name_37 );
    Py_DECREF( tmp_args_element_name_54 );
    if ( tmp_args_element_name_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_40 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_46 );
        Py_DECREF( tmp_args_element_name_49 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_source_name_22 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_22 == NULL )
    {
        tmp_source_name_22 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_22 == NULL ))
        {
            tmp_source_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_22 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_28 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_34 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_40 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_args_element_name_46 );
            Py_DECREF( tmp_args_element_name_49 );
            Py_DECREF( tmp_args_element_name_52 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_39 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_NamedType );
    if ( tmp_called_name_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_40 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_46 );
        Py_DECREF( tmp_args_element_name_49 );
        Py_DECREF( tmp_args_element_name_52 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_56 = const_str_plain_compareResponse;
    tmp_called_name_40 = PyDict_GetItem( locals_dict, const_str_plain_CompareResponse );

    if ( tmp_called_name_40 == NULL )
    {
        tmp_called_name_40 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_CompareResponse );

        if (unlikely( tmp_called_name_40 == NULL ))
        {
            tmp_called_name_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_CompareResponse );
        }

        if ( tmp_called_name_40 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_28 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_34 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_40 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_args_element_name_46 );
            Py_DECREF( tmp_args_element_name_49 );
            Py_DECREF( tmp_args_element_name_52 );
            Py_DECREF( tmp_called_name_39 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 53985 ], 37, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 317;
    tmp_args_element_name_57 = CALL_FUNCTION_NO_ARGS( tmp_called_name_40 );
    if ( tmp_args_element_name_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_40 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_46 );
        Py_DECREF( tmp_args_element_name_49 );
        Py_DECREF( tmp_args_element_name_52 );
        Py_DECREF( tmp_called_name_39 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 317;
    tmp_args_element_name_55 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_39, tmp_args_element_name_56, tmp_args_element_name_57 );
    Py_DECREF( tmp_called_name_39 );
    Py_DECREF( tmp_args_element_name_57 );
    if ( tmp_args_element_name_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_40 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_46 );
        Py_DECREF( tmp_args_element_name_49 );
        Py_DECREF( tmp_args_element_name_52 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_source_name_23 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_23 == NULL )
    {
        tmp_source_name_23 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_23 == NULL ))
        {
            tmp_source_name_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_23 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_28 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_34 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_40 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_args_element_name_46 );
            Py_DECREF( tmp_args_element_name_49 );
            Py_DECREF( tmp_args_element_name_52 );
            Py_DECREF( tmp_args_element_name_55 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_41 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain_NamedType );
    if ( tmp_called_name_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_40 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_46 );
        Py_DECREF( tmp_args_element_name_49 );
        Py_DECREF( tmp_args_element_name_52 );
        Py_DECREF( tmp_args_element_name_55 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_59 = const_str_plain_abandonRequest;
    tmp_called_name_42 = PyDict_GetItem( locals_dict, const_str_plain_AbandonRequest );

    if ( tmp_called_name_42 == NULL )
    {
        tmp_called_name_42 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AbandonRequest );

        if (unlikely( tmp_called_name_42 == NULL ))
        {
            tmp_called_name_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AbandonRequest );
        }

        if ( tmp_called_name_42 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_28 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_34 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_40 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_args_element_name_46 );
            Py_DECREF( tmp_args_element_name_49 );
            Py_DECREF( tmp_args_element_name_52 );
            Py_DECREF( tmp_args_element_name_55 );
            Py_DECREF( tmp_called_name_41 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 54022 ], 36, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 317;
    tmp_args_element_name_60 = CALL_FUNCTION_NO_ARGS( tmp_called_name_42 );
    if ( tmp_args_element_name_60 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_40 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_46 );
        Py_DECREF( tmp_args_element_name_49 );
        Py_DECREF( tmp_args_element_name_52 );
        Py_DECREF( tmp_args_element_name_55 );
        Py_DECREF( tmp_called_name_41 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 317;
    tmp_args_element_name_58 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_41, tmp_args_element_name_59, tmp_args_element_name_60 );
    Py_DECREF( tmp_called_name_41 );
    Py_DECREF( tmp_args_element_name_60 );
    if ( tmp_args_element_name_58 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_40 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_46 );
        Py_DECREF( tmp_args_element_name_49 );
        Py_DECREF( tmp_args_element_name_52 );
        Py_DECREF( tmp_args_element_name_55 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_source_name_24 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_24 == NULL )
    {
        tmp_source_name_24 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_24 == NULL ))
        {
            tmp_source_name_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_24 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_28 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_34 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_40 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_args_element_name_46 );
            Py_DECREF( tmp_args_element_name_49 );
            Py_DECREF( tmp_args_element_name_52 );
            Py_DECREF( tmp_args_element_name_55 );
            Py_DECREF( tmp_args_element_name_58 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_43 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_NamedType );
    if ( tmp_called_name_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_40 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_46 );
        Py_DECREF( tmp_args_element_name_49 );
        Py_DECREF( tmp_args_element_name_52 );
        Py_DECREF( tmp_args_element_name_55 );
        Py_DECREF( tmp_args_element_name_58 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_62 = const_str_plain_extendedReq;
    tmp_called_name_44 = PyDict_GetItem( locals_dict, const_str_plain_ExtendedRequest );

    if ( tmp_called_name_44 == NULL )
    {
        tmp_called_name_44 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_ExtendedRequest );

        if (unlikely( tmp_called_name_44 == NULL ))
        {
            tmp_called_name_44 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ExtendedRequest );
        }

        if ( tmp_called_name_44 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_28 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_34 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_40 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_args_element_name_46 );
            Py_DECREF( tmp_args_element_name_49 );
            Py_DECREF( tmp_args_element_name_52 );
            Py_DECREF( tmp_args_element_name_55 );
            Py_DECREF( tmp_args_element_name_58 );
            Py_DECREF( tmp_called_name_43 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 54058 ], 37, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 317;
    tmp_args_element_name_63 = CALL_FUNCTION_NO_ARGS( tmp_called_name_44 );
    if ( tmp_args_element_name_63 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_40 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_46 );
        Py_DECREF( tmp_args_element_name_49 );
        Py_DECREF( tmp_args_element_name_52 );
        Py_DECREF( tmp_args_element_name_55 );
        Py_DECREF( tmp_args_element_name_58 );
        Py_DECREF( tmp_called_name_43 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 317;
    tmp_args_element_name_61 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_43, tmp_args_element_name_62, tmp_args_element_name_63 );
    Py_DECREF( tmp_called_name_43 );
    Py_DECREF( tmp_args_element_name_63 );
    if ( tmp_args_element_name_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_40 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_46 );
        Py_DECREF( tmp_args_element_name_49 );
        Py_DECREF( tmp_args_element_name_52 );
        Py_DECREF( tmp_args_element_name_55 );
        Py_DECREF( tmp_args_element_name_58 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_source_name_25 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_25 == NULL )
    {
        tmp_source_name_25 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_25 == NULL ))
        {
            tmp_source_name_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_25 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_28 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_34 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_40 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_args_element_name_46 );
            Py_DECREF( tmp_args_element_name_49 );
            Py_DECREF( tmp_args_element_name_52 );
            Py_DECREF( tmp_args_element_name_55 );
            Py_DECREF( tmp_args_element_name_58 );
            Py_DECREF( tmp_args_element_name_61 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_45 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain_NamedType );
    if ( tmp_called_name_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_40 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_46 );
        Py_DECREF( tmp_args_element_name_49 );
        Py_DECREF( tmp_args_element_name_52 );
        Py_DECREF( tmp_args_element_name_55 );
        Py_DECREF( tmp_args_element_name_58 );
        Py_DECREF( tmp_args_element_name_61 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_65 = const_str_plain_extendedResp;
    tmp_called_name_46 = PyDict_GetItem( locals_dict, const_str_plain_ExtendedResponse );

    if ( tmp_called_name_46 == NULL )
    {
        tmp_called_name_46 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_ExtendedResponse );

        if (unlikely( tmp_called_name_46 == NULL ))
        {
            tmp_called_name_46 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ExtendedResponse );
        }

        if ( tmp_called_name_46 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_13 );
            Py_DECREF( tmp_args_element_name_16 );
            Py_DECREF( tmp_args_element_name_19 );
            Py_DECREF( tmp_args_element_name_22 );
            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_28 );
            Py_DECREF( tmp_args_element_name_31 );
            Py_DECREF( tmp_args_element_name_34 );
            Py_DECREF( tmp_args_element_name_37 );
            Py_DECREF( tmp_args_element_name_40 );
            Py_DECREF( tmp_args_element_name_43 );
            Py_DECREF( tmp_args_element_name_46 );
            Py_DECREF( tmp_args_element_name_49 );
            Py_DECREF( tmp_args_element_name_52 );
            Py_DECREF( tmp_args_element_name_55 );
            Py_DECREF( tmp_args_element_name_58 );
            Py_DECREF( tmp_args_element_name_61 );
            Py_DECREF( tmp_called_name_45 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 54095 ], 38, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 317;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 317;
    tmp_args_element_name_66 = CALL_FUNCTION_NO_ARGS( tmp_called_name_46 );
    if ( tmp_args_element_name_66 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_40 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_46 );
        Py_DECREF( tmp_args_element_name_49 );
        Py_DECREF( tmp_args_element_name_52 );
        Py_DECREF( tmp_args_element_name_55 );
        Py_DECREF( tmp_args_element_name_58 );
        Py_DECREF( tmp_args_element_name_61 );
        Py_DECREF( tmp_called_name_45 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 317;
    tmp_args_element_name_64 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_45, tmp_args_element_name_65, tmp_args_element_name_66 );
    Py_DECREF( tmp_called_name_45 );
    Py_DECREF( tmp_args_element_name_66 );
    if ( tmp_args_element_name_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        Py_DECREF( tmp_args_element_name_16 );
        Py_DECREF( tmp_args_element_name_19 );
        Py_DECREF( tmp_args_element_name_22 );
        Py_DECREF( tmp_args_element_name_25 );
        Py_DECREF( tmp_args_element_name_28 );
        Py_DECREF( tmp_args_element_name_31 );
        Py_DECREF( tmp_args_element_name_34 );
        Py_DECREF( tmp_args_element_name_37 );
        Py_DECREF( tmp_args_element_name_40 );
        Py_DECREF( tmp_args_element_name_43 );
        Py_DECREF( tmp_args_element_name_46 );
        Py_DECREF( tmp_args_element_name_49 );
        Py_DECREF( tmp_args_element_name_52 );
        Py_DECREF( tmp_args_element_name_55 );
        Py_DECREF( tmp_args_element_name_58 );
        Py_DECREF( tmp_args_element_name_61 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 317;
    tmp_dict_value_1 = CALL_FUNCTION_WITH_ARGS20( tmp_called_name_6, tmp_args_element_name_7, tmp_args_element_name_10, tmp_args_element_name_13, tmp_args_element_name_16, tmp_args_element_name_19, tmp_args_element_name_22, tmp_args_element_name_25, tmp_args_element_name_28, tmp_args_element_name_31, tmp_args_element_name_34, tmp_args_element_name_37, tmp_args_element_name_40, tmp_args_element_name_43, tmp_args_element_name_46, tmp_args_element_name_49, tmp_args_element_name_52, tmp_args_element_name_55, tmp_args_element_name_58, tmp_args_element_name_61, tmp_args_element_name_64 );
    Py_DECREF( tmp_called_name_6 );
    Py_DECREF( tmp_args_element_name_7 );
    Py_DECREF( tmp_args_element_name_10 );
    Py_DECREF( tmp_args_element_name_13 );
    Py_DECREF( tmp_args_element_name_16 );
    Py_DECREF( tmp_args_element_name_19 );
    Py_DECREF( tmp_args_element_name_22 );
    Py_DECREF( tmp_args_element_name_25 );
    Py_DECREF( tmp_args_element_name_28 );
    Py_DECREF( tmp_args_element_name_31 );
    Py_DECREF( tmp_args_element_name_34 );
    Py_DECREF( tmp_args_element_name_37 );
    Py_DECREF( tmp_args_element_name_40 );
    Py_DECREF( tmp_args_element_name_43 );
    Py_DECREF( tmp_args_element_name_46 );
    Py_DECREF( tmp_args_element_name_49 );
    Py_DECREF( tmp_args_element_name_52 );
    Py_DECREF( tmp_args_element_name_55 );
    Py_DECREF( tmp_args_element_name_58 );
    Py_DECREF( tmp_args_element_name_61 );
    Py_DECREF( tmp_args_element_name_64 );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_1 = const_str_plain_componentType;
    PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    frame_function->f_lineno = 317;
    tmp_args_element_name_6 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_5, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_5 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_args_element_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 317;
    tmp_args_element_name_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, tmp_args_element_name_5, tmp_args_element_name_6 );
    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_args_element_name_6 );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_source_name_26 = PyDict_GetItem( locals_dict, const_str_plain_namedtype );

    if ( tmp_source_name_26 == NULL )
    {
        tmp_source_name_26 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype );

        if (unlikely( tmp_source_name_26 == NULL ))
        {
            tmp_source_name_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_namedtype );
        }

        if ( tmp_source_name_26 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 52328 ], 31, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 318;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_47 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain_OptionalNamedType );
    if ( tmp_called_name_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_4 );

        exception_lineno = 318;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_68 = const_str_plain_controls;
    tmp_called_name_49 = PyDict_GetItem( locals_dict, const_str_plain_Controls );

    if ( tmp_called_name_49 == NULL )
    {
        tmp_called_name_49 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_Controls );

        if (unlikely( tmp_called_name_49 == NULL ))
        {
            tmp_called_name_49 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Controls );
        }

        if ( tmp_called_name_49 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_4 );
            Py_DECREF( tmp_called_name_47 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 54133 ], 30, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 318;
            goto frame_exception_exit_1;
        }

    }

    frame_function->f_lineno = 318;
    tmp_source_name_27 = CALL_FUNCTION_NO_ARGS( tmp_called_name_49 );
    if ( tmp_source_name_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_4 );
        Py_DECREF( tmp_called_name_47 );

        exception_lineno = 318;
        goto frame_exception_exit_1;
    }
    tmp_called_name_48 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain_subtype );
    Py_DECREF( tmp_source_name_27 );
    if ( tmp_called_name_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_4 );
        Py_DECREF( tmp_called_name_47 );

        exception_lineno = 318;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_2 = _PyDict_NewPresized( 1 );
    tmp_source_name_28 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_28 == NULL )
    {
        tmp_source_name_28 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_28 == NULL ))
        {
            tmp_source_name_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_28 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_4 );
            Py_DECREF( tmp_called_name_47 );
            Py_DECREF( tmp_called_name_48 );
            Py_DECREF( tmp_kw_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 318;
            goto frame_exception_exit_1;
        }

    }

    tmp_called_name_50 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain_Tag );
    if ( tmp_called_name_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_4 );
        Py_DECREF( tmp_called_name_47 );
        Py_DECREF( tmp_called_name_48 );
        Py_DECREF( tmp_kw_name_2 );

        exception_lineno = 318;
        goto frame_exception_exit_1;
    }
    tmp_source_name_29 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_29 == NULL )
    {
        tmp_source_name_29 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_29 == NULL ))
        {
            tmp_source_name_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_29 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_4 );
            Py_DECREF( tmp_called_name_47 );
            Py_DECREF( tmp_called_name_48 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_50 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 318;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_70 = LOOKUP_ATTRIBUTE( tmp_source_name_29, const_str_plain_tagClassContext );
    if ( tmp_args_element_name_70 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_4 );
        Py_DECREF( tmp_called_name_47 );
        Py_DECREF( tmp_called_name_48 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_50 );

        exception_lineno = 318;
        goto frame_exception_exit_1;
    }
    tmp_source_name_30 = PyDict_GetItem( locals_dict, const_str_plain_tag );

    if ( tmp_source_name_30 == NULL )
    {
        tmp_source_name_30 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag );

        if (unlikely( tmp_source_name_30 == NULL ))
        {
            tmp_source_name_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tag );
        }

        if ( tmp_source_name_30 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_4 );
            Py_DECREF( tmp_called_name_47 );
            Py_DECREF( tmp_called_name_48 );
            Py_DECREF( tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_50 );
            Py_DECREF( tmp_args_element_name_70 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = UNSTREAM_STRING( &constant_bin[ 44616 ], 25, 0 );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 318;
            goto frame_exception_exit_1;
        }

    }

    tmp_args_element_name_71 = LOOKUP_ATTRIBUTE( tmp_source_name_30, const_str_plain_tagFormatConstructed );
    if ( tmp_args_element_name_71 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_4 );
        Py_DECREF( tmp_called_name_47 );
        Py_DECREF( tmp_called_name_48 );
        Py_DECREF( tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_50 );
        Py_DECREF( tmp_args_element_name_70 );

        exception_lineno = 318;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_72 = const_int_0;
    frame_function->f_lineno = 318;
    tmp_dict_value_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_50, tmp_args_element_name_70, tmp_args_element_name_71, tmp_args_element_name_72 );
    Py_DECREF( tmp_called_name_50 );
    Py_DECREF( tmp_args_element_name_70 );
    Py_DECREF( tmp_args_element_name_71 );
    if ( tmp_dict_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_4 );
        Py_DECREF( tmp_called_name_47 );
        Py_DECREF( tmp_called_name_48 );
        Py_DECREF( tmp_kw_name_2 );

        exception_lineno = 318;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_2 = const_str_plain_implicitTag;
    PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
    Py_DECREF( tmp_dict_value_2 );
    frame_function->f_lineno = 318;
    tmp_args_element_name_69 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_48, tmp_kw_name_2 );
    Py_DECREF( tmp_called_name_48 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_args_element_name_69 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_4 );
        Py_DECREF( tmp_called_name_47 );

        exception_lineno = 318;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 318;
    tmp_args_element_name_67 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_47, tmp_args_element_name_68, tmp_args_element_name_69 );
    Py_DECREF( tmp_called_name_47 );
    Py_DECREF( tmp_args_element_name_69 );
    if ( tmp_args_element_name_67 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_4 );

        exception_lineno = 318;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 318;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, tmp_args_element_name_1, tmp_args_element_name_4, tmp_args_element_name_67 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    Py_DECREF( tmp_args_element_name_4 );
    Py_DECREF( tmp_args_element_name_67 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 318;
        goto frame_exception_exit_1;
    }
    assert( var_componentType == NULL );
    var_componentType = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = locals_dict;
            Py_INCREF( locals_dict );
            if ( var___module__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 314;
                goto frame_exception_exit_1;
            }
            }
            if ( var___qualname__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___qualname__,
                    var___qualname__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 314;
                goto frame_exception_exit_1;
            }
            }
            if ( var___class__ != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain___class__,
                    var___class__
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 314;
                goto frame_exception_exit_1;
            }
            }
            if ( var_componentType != NULL )
            {
                tmp_res = PyObject_SetItem(
                    tmp_frame_locals,
                    const_str_plain_componentType,
                    var_componentType
                );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 314;
                goto frame_exception_exit_1;
            }
            }


            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;
    frame_no_exception_1:;

    tmp_called_name_51 = closure_pyasn1_modules$rfc2251_class_creation_49__metaclass;

    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = const_str_plain_LDAPMessage;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = closure_pyasn1_modules$rfc2251_class_creation_49__bases;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = locals_dict;
    Py_INCREF( locals_dict );
    if ( var___module__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___module__,
            var___module__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___qualname__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___qualname__,
            var___qualname__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var___class__ != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain___class__,
            var___class__
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    if ( var_componentType != NULL )
    {
        tmp_res = PyObject_SetItem(
            tmp_tuple_element_1,
            const_str_plain_componentType,
            var_componentType
        );

    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_1 );


        goto try_except_handler_1;
    }
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_3 = closure_pyasn1_modules$rfc2251_class_creation_49__class_decl_dict;

    tmp_assign_source_4 = CALL_FUNCTION( tmp_called_name_51, tmp_args_name_1, tmp_kw_name_3 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_except_handler_1;
    }
    assert( var___class__ == NULL );
    var___class__ = tmp_assign_source_4;

    tmp_return_value = var___class__;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( class_49_LDAPMessage_of_pyasn1_modules$rfc2251 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var___class__ );
    var___class__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___qualname__ );
    var___qualname__ = NULL;

    Py_XDECREF( var_componentType );
    var_componentType = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_49_LDAPMessage_of_pyasn1_modules$rfc2251 );
    return NULL;

function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}



#if PYTHON_VERSION >= 300
static struct PyModuleDef mdef_pyasn1_modules$rfc2251 =
{
    PyModuleDef_HEAD_INIT,
    "pyasn1_modules.rfc2251",   /* m_name */
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( pyasn1_modules$rfc2251 )
{
#if defined(_NUITKA_EXE) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Modules might be imported repeatedly, which is to be ignored.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( module_pyasn1_modules$rfc2251 );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    createGlobalConstants();

    // Initialize the compiled types of Nuitka.
    PyType_Ready( &Nuitka_Generator_Type );
    PyType_Ready( &Nuitka_Function_Type );
    PyType_Ready( &Nuitka_Method_Type );
    PyType_Ready( &Nuitka_Frame_Type );
#if PYTHON_VERSION < 300
    _initSlotCompare();
#endif
#if PYTHON_VERSION >= 270
    _initSlotIternext();
#endif

    patchBuiltinModule();
    patchTypeComparison();

#endif

#if _NUITKA_MODULE
    // Enable meta path based loader if not already done.
    setupMetaPathBasedLoader();
#endif

    createModuleConstants();
    createModuleCodeObjects();

    // puts( "in initpyasn1_modules$rfc2251" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    module_pyasn1_modules$rfc2251 = Py_InitModule4(
        "pyasn1_modules.rfc2251",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No __doc__ is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else
    module_pyasn1_modules$rfc2251 = PyModule_Create( &mdef_pyasn1_modules$rfc2251 );
#endif

    moduledict_pyasn1_modules$rfc2251 = (PyDictObject *)((PyModuleObject *)module_pyasn1_modules$rfc2251)->md_dict;

    CHECK_OBJECT( module_pyasn1_modules$rfc2251 );

// Seems to work for Python2.7 out of the box, but for Python3, the module
// doesn't automatically enter "sys.modules", so do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PySys_GetObject( (char *)"modules" ), const_str_digest_e30baf3a42d48aa38c91959217bd1135, module_pyasn1_modules$rfc2251 );

        assert( r != -1 );
    }
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    PyObject *module_dict = PyModule_GetDict( module_pyasn1_modules$rfc2251 );

    if ( PyDict_GetItem( module_dict, const_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then.
#if !defined(_NUITKA_EXE) || !0
        value = PyModule_GetDict( value );
#endif

#ifndef __NUITKA_NO_ASSERT__
        int res =
#endif
            PyDict_SetItem( module_dict, const_str_plain___builtins__, value );

        assert( res == 0 );
    }

#if PYTHON_VERSION >= 330
#if _MODULE_LOADER
    PyDict_SetItem( module_dict, const_str_plain___loader__, metapath_based_loader );
#else
    PyDict_SetItem( module_dict, const_str_plain___loader__, Py_None );
#endif
#endif

    // Temp variables if any
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_1__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_1__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_1__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_2__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_2__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_2__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_2__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_3__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_3__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_3__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_3__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_4__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_4__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_4__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_4__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_5__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_5__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_5__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_5__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_6__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_6__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_6__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_6__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_7__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_7__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_7__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_7__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_8__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_8__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_8__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_8__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_9__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_9__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_9__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_9__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_10__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_10__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_10__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_10__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_11__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_11__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_11__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_11__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_12__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_12__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_12__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_12__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_13__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_13__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_13__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_13__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_14__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_14__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_14__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_14__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_15__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_15__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_15__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_15__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_16__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_16__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_16__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_16__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_17__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_17__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_17__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_17__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_18__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_18__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_18__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_18__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_19__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_19__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_19__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_19__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_20__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_20__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_20__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_20__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_21__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_21__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_21__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_21__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_22__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_22__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_22__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_22__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_23__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_23__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_23__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_23__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_24__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_24__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_24__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_24__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_25__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_25__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_25__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_25__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_26__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_26__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_26__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_26__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_27__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_27__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_27__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_27__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_28__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_28__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_28__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_28__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_29__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_29__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_29__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_29__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_30__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_30__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_30__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_30__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_31__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_31__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_31__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_31__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_32__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_32__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_32__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_32__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_33__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_33__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_33__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_33__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_34__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_34__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_34__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_34__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_35__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_35__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_35__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_35__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_36__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_36__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_36__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_36__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_37__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_37__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_37__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_37__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_38__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_38__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_38__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_38__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_39__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_39__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_39__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_39__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_40__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_40__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_40__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_40__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_41__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_41__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_41__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_41__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_42__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_42__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_42__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_42__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_43__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_43__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_43__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_43__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_44__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_44__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_44__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_44__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_45__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_45__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_45__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_45__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_46__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_46__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_46__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_46__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_47__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_47__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_47__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_47__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_48__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_48__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_48__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_48__prepared = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_49__bases = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_49__class_decl_dict = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_49__metaclass = NULL;
    PyObject *tmp_pyasn1_modules$rfc2251_class_creation_49__prepared = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_17;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_18;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_19;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_20;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_21;
    PyObject *exception_keeper_type_22;
    PyObject *exception_keeper_value_22;
    PyTracebackObject *exception_keeper_tb_22;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_22;
    PyObject *exception_keeper_type_23;
    PyObject *exception_keeper_value_23;
    PyTracebackObject *exception_keeper_tb_23;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_23;
    PyObject *exception_keeper_type_24;
    PyObject *exception_keeper_value_24;
    PyTracebackObject *exception_keeper_tb_24;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_24;
    PyObject *exception_keeper_type_25;
    PyObject *exception_keeper_value_25;
    PyTracebackObject *exception_keeper_tb_25;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_25;
    PyObject *exception_keeper_type_26;
    PyObject *exception_keeper_value_26;
    PyTracebackObject *exception_keeper_tb_26;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_26;
    PyObject *exception_keeper_type_27;
    PyObject *exception_keeper_value_27;
    PyTracebackObject *exception_keeper_tb_27;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_27;
    PyObject *exception_keeper_type_28;
    PyObject *exception_keeper_value_28;
    PyTracebackObject *exception_keeper_tb_28;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_28;
    PyObject *exception_keeper_type_29;
    PyObject *exception_keeper_value_29;
    PyTracebackObject *exception_keeper_tb_29;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_29;
    PyObject *exception_keeper_type_30;
    PyObject *exception_keeper_value_30;
    PyTracebackObject *exception_keeper_tb_30;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_30;
    PyObject *exception_keeper_type_31;
    PyObject *exception_keeper_value_31;
    PyTracebackObject *exception_keeper_tb_31;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_31;
    PyObject *exception_keeper_type_32;
    PyObject *exception_keeper_value_32;
    PyTracebackObject *exception_keeper_tb_32;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_32;
    PyObject *exception_keeper_type_33;
    PyObject *exception_keeper_value_33;
    PyTracebackObject *exception_keeper_tb_33;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_33;
    PyObject *exception_keeper_type_34;
    PyObject *exception_keeper_value_34;
    PyTracebackObject *exception_keeper_tb_34;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_34;
    PyObject *exception_keeper_type_35;
    PyObject *exception_keeper_value_35;
    PyTracebackObject *exception_keeper_tb_35;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_35;
    PyObject *exception_keeper_type_36;
    PyObject *exception_keeper_value_36;
    PyTracebackObject *exception_keeper_tb_36;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_36;
    PyObject *exception_keeper_type_37;
    PyObject *exception_keeper_value_37;
    PyTracebackObject *exception_keeper_tb_37;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_37;
    PyObject *exception_keeper_type_38;
    PyObject *exception_keeper_value_38;
    PyTracebackObject *exception_keeper_tb_38;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_38;
    PyObject *exception_keeper_type_39;
    PyObject *exception_keeper_value_39;
    PyTracebackObject *exception_keeper_tb_39;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_39;
    PyObject *exception_keeper_type_40;
    PyObject *exception_keeper_value_40;
    PyTracebackObject *exception_keeper_tb_40;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_40;
    PyObject *exception_keeper_type_41;
    PyObject *exception_keeper_value_41;
    PyTracebackObject *exception_keeper_tb_41;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_41;
    PyObject *exception_keeper_type_42;
    PyObject *exception_keeper_value_42;
    PyTracebackObject *exception_keeper_tb_42;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_42;
    PyObject *exception_keeper_type_43;
    PyObject *exception_keeper_value_43;
    PyTracebackObject *exception_keeper_tb_43;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_43;
    PyObject *exception_keeper_type_44;
    PyObject *exception_keeper_value_44;
    PyTracebackObject *exception_keeper_tb_44;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_44;
    PyObject *exception_keeper_type_45;
    PyObject *exception_keeper_value_45;
    PyTracebackObject *exception_keeper_tb_45;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_45;
    PyObject *exception_keeper_type_46;
    PyObject *exception_keeper_value_46;
    PyTracebackObject *exception_keeper_tb_46;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_46;
    PyObject *exception_keeper_type_47;
    PyObject *exception_keeper_value_47;
    PyTracebackObject *exception_keeper_tb_47;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_47;
    PyObject *exception_keeper_type_48;
    PyObject *exception_keeper_value_48;
    PyTracebackObject *exception_keeper_tb_48;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_48;
    PyObject *exception_keeper_type_49;
    PyObject *exception_keeper_value_49;
    PyTracebackObject *exception_keeper_tb_49;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_49;
    PyObject *tmp_args_name_1;
    PyObject *tmp_args_name_2;
    PyObject *tmp_args_name_3;
    PyObject *tmp_args_name_4;
    PyObject *tmp_args_name_5;
    PyObject *tmp_args_name_6;
    PyObject *tmp_args_name_7;
    PyObject *tmp_args_name_8;
    PyObject *tmp_args_name_9;
    PyObject *tmp_args_name_10;
    PyObject *tmp_args_name_11;
    PyObject *tmp_args_name_12;
    PyObject *tmp_args_name_13;
    PyObject *tmp_args_name_14;
    PyObject *tmp_args_name_15;
    PyObject *tmp_args_name_16;
    PyObject *tmp_args_name_17;
    PyObject *tmp_args_name_18;
    PyObject *tmp_args_name_19;
    PyObject *tmp_args_name_20;
    PyObject *tmp_args_name_21;
    PyObject *tmp_args_name_22;
    PyObject *tmp_args_name_23;
    PyObject *tmp_args_name_24;
    PyObject *tmp_args_name_25;
    PyObject *tmp_args_name_26;
    PyObject *tmp_args_name_27;
    PyObject *tmp_args_name_28;
    PyObject *tmp_args_name_29;
    PyObject *tmp_args_name_30;
    PyObject *tmp_args_name_31;
    PyObject *tmp_args_name_32;
    PyObject *tmp_args_name_33;
    PyObject *tmp_args_name_34;
    PyObject *tmp_args_name_35;
    PyObject *tmp_args_name_36;
    PyObject *tmp_args_name_37;
    PyObject *tmp_args_name_38;
    PyObject *tmp_args_name_39;
    PyObject *tmp_args_name_40;
    PyObject *tmp_args_name_41;
    PyObject *tmp_args_name_42;
    PyObject *tmp_args_name_43;
    PyObject *tmp_args_name_44;
    PyObject *tmp_args_name_45;
    PyObject *tmp_args_name_46;
    PyObject *tmp_args_name_47;
    PyObject *tmp_args_name_48;
    PyObject *tmp_args_name_49;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_assign_source_57;
    PyObject *tmp_assign_source_58;
    PyObject *tmp_assign_source_59;
    PyObject *tmp_assign_source_60;
    PyObject *tmp_assign_source_61;
    PyObject *tmp_assign_source_62;
    PyObject *tmp_assign_source_63;
    PyObject *tmp_assign_source_64;
    PyObject *tmp_assign_source_65;
    PyObject *tmp_assign_source_66;
    PyObject *tmp_assign_source_67;
    PyObject *tmp_assign_source_68;
    PyObject *tmp_assign_source_69;
    PyObject *tmp_assign_source_70;
    PyObject *tmp_assign_source_71;
    PyObject *tmp_assign_source_72;
    PyObject *tmp_assign_source_73;
    PyObject *tmp_assign_source_74;
    PyObject *tmp_assign_source_75;
    PyObject *tmp_assign_source_76;
    PyObject *tmp_assign_source_77;
    PyObject *tmp_assign_source_78;
    PyObject *tmp_assign_source_79;
    PyObject *tmp_assign_source_80;
    PyObject *tmp_assign_source_81;
    PyObject *tmp_assign_source_82;
    PyObject *tmp_assign_source_83;
    PyObject *tmp_assign_source_84;
    PyObject *tmp_assign_source_85;
    PyObject *tmp_assign_source_86;
    PyObject *tmp_assign_source_87;
    PyObject *tmp_assign_source_88;
    PyObject *tmp_assign_source_89;
    PyObject *tmp_assign_source_90;
    PyObject *tmp_assign_source_91;
    PyObject *tmp_assign_source_92;
    PyObject *tmp_assign_source_93;
    PyObject *tmp_assign_source_94;
    PyObject *tmp_assign_source_95;
    PyObject *tmp_assign_source_96;
    PyObject *tmp_assign_source_97;
    PyObject *tmp_assign_source_98;
    PyObject *tmp_assign_source_99;
    PyObject *tmp_assign_source_100;
    PyObject *tmp_assign_source_101;
    PyObject *tmp_assign_source_102;
    PyObject *tmp_assign_source_103;
    PyObject *tmp_assign_source_104;
    PyObject *tmp_assign_source_105;
    PyObject *tmp_assign_source_106;
    PyObject *tmp_assign_source_107;
    PyObject *tmp_assign_source_108;
    PyObject *tmp_assign_source_109;
    PyObject *tmp_assign_source_110;
    PyObject *tmp_assign_source_111;
    PyObject *tmp_assign_source_112;
    PyObject *tmp_assign_source_113;
    PyObject *tmp_assign_source_114;
    PyObject *tmp_assign_source_115;
    PyObject *tmp_assign_source_116;
    PyObject *tmp_assign_source_117;
    PyObject *tmp_assign_source_118;
    PyObject *tmp_assign_source_119;
    PyObject *tmp_assign_source_120;
    PyObject *tmp_assign_source_121;
    PyObject *tmp_assign_source_122;
    PyObject *tmp_assign_source_123;
    PyObject *tmp_assign_source_124;
    PyObject *tmp_assign_source_125;
    PyObject *tmp_assign_source_126;
    PyObject *tmp_assign_source_127;
    PyObject *tmp_assign_source_128;
    PyObject *tmp_assign_source_129;
    PyObject *tmp_assign_source_130;
    PyObject *tmp_assign_source_131;
    PyObject *tmp_assign_source_132;
    PyObject *tmp_assign_source_133;
    PyObject *tmp_assign_source_134;
    PyObject *tmp_assign_source_135;
    PyObject *tmp_assign_source_136;
    PyObject *tmp_assign_source_137;
    PyObject *tmp_assign_source_138;
    PyObject *tmp_assign_source_139;
    PyObject *tmp_assign_source_140;
    PyObject *tmp_assign_source_141;
    PyObject *tmp_assign_source_142;
    PyObject *tmp_assign_source_143;
    PyObject *tmp_assign_source_144;
    PyObject *tmp_assign_source_145;
    PyObject *tmp_assign_source_146;
    PyObject *tmp_assign_source_147;
    PyObject *tmp_assign_source_148;
    PyObject *tmp_assign_source_149;
    PyObject *tmp_assign_source_150;
    PyObject *tmp_assign_source_151;
    PyObject *tmp_assign_source_152;
    PyObject *tmp_assign_source_153;
    PyObject *tmp_assign_source_154;
    PyObject *tmp_assign_source_155;
    PyObject *tmp_assign_source_156;
    PyObject *tmp_assign_source_157;
    PyObject *tmp_assign_source_158;
    PyObject *tmp_assign_source_159;
    PyObject *tmp_assign_source_160;
    PyObject *tmp_assign_source_161;
    PyObject *tmp_assign_source_162;
    PyObject *tmp_assign_source_163;
    PyObject *tmp_assign_source_164;
    PyObject *tmp_assign_source_165;
    PyObject *tmp_assign_source_166;
    PyObject *tmp_assign_source_167;
    PyObject *tmp_assign_source_168;
    PyObject *tmp_assign_source_169;
    PyObject *tmp_assign_source_170;
    PyObject *tmp_assign_source_171;
    PyObject *tmp_assign_source_172;
    PyObject *tmp_assign_source_173;
    PyObject *tmp_assign_source_174;
    PyObject *tmp_assign_source_175;
    PyObject *tmp_assign_source_176;
    PyObject *tmp_assign_source_177;
    PyObject *tmp_assign_source_178;
    PyObject *tmp_assign_source_179;
    PyObject *tmp_assign_source_180;
    PyObject *tmp_assign_source_181;
    PyObject *tmp_assign_source_182;
    PyObject *tmp_assign_source_183;
    PyObject *tmp_assign_source_184;
    PyObject *tmp_assign_source_185;
    PyObject *tmp_assign_source_186;
    PyObject *tmp_assign_source_187;
    PyObject *tmp_assign_source_188;
    PyObject *tmp_assign_source_189;
    PyObject *tmp_assign_source_190;
    PyObject *tmp_assign_source_191;
    PyObject *tmp_assign_source_192;
    PyObject *tmp_assign_source_193;
    PyObject *tmp_assign_source_194;
    PyObject *tmp_assign_source_195;
    PyObject *tmp_assign_source_196;
    PyObject *tmp_assign_source_197;
    PyObject *tmp_assign_source_198;
    PyObject *tmp_assign_source_199;
    PyObject *tmp_assign_source_200;
    PyObject *tmp_assign_source_201;
    PyObject *tmp_assign_source_202;
    PyObject *tmp_assign_source_203;
    PyObject *tmp_assign_source_204;
    PyObject *tmp_assign_source_205;
    PyObject *tmp_assign_source_206;
    PyObject *tmp_assign_source_207;
    PyObject *tmp_assign_source_208;
    PyObject *tmp_assign_source_209;
    PyObject *tmp_assign_source_210;
    PyObject *tmp_assign_source_211;
    PyObject *tmp_assign_source_212;
    PyObject *tmp_assign_source_213;
    PyObject *tmp_assign_source_214;
    PyObject *tmp_assign_source_215;
    PyObject *tmp_assign_source_216;
    PyObject *tmp_assign_source_217;
    PyObject *tmp_assign_source_218;
    PyObject *tmp_assign_source_219;
    PyObject *tmp_assign_source_220;
    PyObject *tmp_assign_source_221;
    PyObject *tmp_assign_source_222;
    PyObject *tmp_assign_source_223;
    PyObject *tmp_assign_source_224;
    PyObject *tmp_assign_source_225;
    PyObject *tmp_assign_source_226;
    PyObject *tmp_assign_source_227;
    PyObject *tmp_assign_source_228;
    PyObject *tmp_assign_source_229;
    PyObject *tmp_assign_source_230;
    PyObject *tmp_assign_source_231;
    PyObject *tmp_assign_source_232;
    PyObject *tmp_assign_source_233;
    PyObject *tmp_assign_source_234;
    PyObject *tmp_assign_source_235;
    PyObject *tmp_assign_source_236;
    PyObject *tmp_assign_source_237;
    PyObject *tmp_assign_source_238;
    PyObject *tmp_assign_source_239;
    PyObject *tmp_assign_source_240;
    PyObject *tmp_assign_source_241;
    PyObject *tmp_assign_source_242;
    PyObject *tmp_assign_source_243;
    PyObject *tmp_assign_source_244;
    PyObject *tmp_assign_source_245;
    PyObject *tmp_assign_source_246;
    PyObject *tmp_assign_source_247;
    PyObject *tmp_assign_source_248;
    PyObject *tmp_assign_source_249;
    PyObject *tmp_assign_source_250;
    PyObject *tmp_assign_source_251;
    PyObject *tmp_assign_source_252;
    PyObject *tmp_assign_source_253;
    PyObject *tmp_assign_source_254;
    PyObject *tmp_assign_source_255;
    PyObject *tmp_assign_source_256;
    PyObject *tmp_assign_source_257;
    PyObject *tmp_assign_source_258;
    PyObject *tmp_assign_source_259;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_called_name_16;
    PyObject *tmp_called_name_17;
    PyObject *tmp_called_name_18;
    PyObject *tmp_called_name_19;
    PyObject *tmp_called_name_20;
    PyObject *tmp_called_name_21;
    PyObject *tmp_called_name_22;
    PyObject *tmp_called_name_23;
    PyObject *tmp_called_name_24;
    PyObject *tmp_called_name_25;
    PyObject *tmp_called_name_26;
    PyObject *tmp_called_name_27;
    PyObject *tmp_called_name_28;
    PyObject *tmp_called_name_29;
    PyObject *tmp_called_name_30;
    PyObject *tmp_called_name_31;
    PyObject *tmp_called_name_32;
    PyObject *tmp_called_name_33;
    PyObject *tmp_called_name_34;
    PyObject *tmp_called_name_35;
    PyObject *tmp_called_name_36;
    PyObject *tmp_called_name_37;
    PyObject *tmp_called_name_38;
    PyObject *tmp_called_name_39;
    PyObject *tmp_called_name_40;
    PyObject *tmp_called_name_41;
    PyObject *tmp_called_name_42;
    PyObject *tmp_called_name_43;
    PyObject *tmp_called_name_44;
    PyObject *tmp_called_name_45;
    PyObject *tmp_called_name_46;
    PyObject *tmp_called_name_47;
    PyObject *tmp_called_name_48;
    PyObject *tmp_called_name_49;
    PyObject *tmp_called_name_50;
    PyObject *tmp_class_bases_1;
    PyObject *tmp_class_bases_2;
    PyObject *tmp_class_bases_3;
    PyObject *tmp_class_bases_4;
    PyObject *tmp_class_bases_5;
    PyObject *tmp_class_bases_6;
    PyObject *tmp_class_bases_7;
    PyObject *tmp_class_bases_8;
    PyObject *tmp_class_bases_9;
    PyObject *tmp_class_bases_10;
    PyObject *tmp_class_bases_11;
    PyObject *tmp_class_bases_12;
    PyObject *tmp_class_bases_13;
    PyObject *tmp_class_bases_14;
    PyObject *tmp_class_bases_15;
    PyObject *tmp_class_bases_16;
    PyObject *tmp_class_bases_17;
    PyObject *tmp_class_bases_18;
    PyObject *tmp_class_bases_19;
    PyObject *tmp_class_bases_20;
    PyObject *tmp_class_bases_21;
    PyObject *tmp_class_bases_22;
    PyObject *tmp_class_bases_23;
    PyObject *tmp_class_bases_24;
    PyObject *tmp_class_bases_25;
    PyObject *tmp_class_bases_26;
    PyObject *tmp_class_bases_27;
    PyObject *tmp_class_bases_28;
    PyObject *tmp_class_bases_29;
    PyObject *tmp_class_bases_30;
    PyObject *tmp_class_bases_31;
    PyObject *tmp_class_bases_32;
    PyObject *tmp_class_bases_33;
    PyObject *tmp_class_bases_34;
    PyObject *tmp_class_bases_35;
    PyObject *tmp_class_bases_36;
    PyObject *tmp_class_bases_37;
    PyObject *tmp_class_bases_38;
    PyObject *tmp_class_bases_39;
    PyObject *tmp_class_bases_40;
    PyObject *tmp_class_bases_41;
    PyObject *tmp_class_bases_42;
    PyObject *tmp_class_bases_43;
    PyObject *tmp_class_bases_44;
    PyObject *tmp_class_bases_45;
    PyObject *tmp_class_bases_46;
    PyObject *tmp_class_bases_47;
    PyObject *tmp_class_bases_48;
    PyObject *tmp_class_bases_49;
    PyObject *tmp_class_meta_1;
    PyObject *tmp_class_meta_2;
    PyObject *tmp_class_meta_3;
    PyObject *tmp_class_meta_4;
    PyObject *tmp_class_meta_5;
    PyObject *tmp_class_meta_6;
    PyObject *tmp_class_meta_7;
    PyObject *tmp_class_meta_8;
    PyObject *tmp_class_meta_9;
    PyObject *tmp_class_meta_10;
    PyObject *tmp_class_meta_11;
    PyObject *tmp_class_meta_12;
    PyObject *tmp_class_meta_13;
    PyObject *tmp_class_meta_14;
    PyObject *tmp_class_meta_15;
    PyObject *tmp_class_meta_16;
    PyObject *tmp_class_meta_17;
    PyObject *tmp_class_meta_18;
    PyObject *tmp_class_meta_19;
    PyObject *tmp_class_meta_20;
    PyObject *tmp_class_meta_21;
    PyObject *tmp_class_meta_22;
    PyObject *tmp_class_meta_23;
    PyObject *tmp_class_meta_24;
    PyObject *tmp_class_meta_25;
    PyObject *tmp_class_meta_26;
    PyObject *tmp_class_meta_27;
    PyObject *tmp_class_meta_28;
    PyObject *tmp_class_meta_29;
    PyObject *tmp_class_meta_30;
    PyObject *tmp_class_meta_31;
    PyObject *tmp_class_meta_32;
    PyObject *tmp_class_meta_33;
    PyObject *tmp_class_meta_34;
    PyObject *tmp_class_meta_35;
    PyObject *tmp_class_meta_36;
    PyObject *tmp_class_meta_37;
    PyObject *tmp_class_meta_38;
    PyObject *tmp_class_meta_39;
    PyObject *tmp_class_meta_40;
    PyObject *tmp_class_meta_41;
    PyObject *tmp_class_meta_42;
    PyObject *tmp_class_meta_43;
    PyObject *tmp_class_meta_44;
    PyObject *tmp_class_meta_45;
    PyObject *tmp_class_meta_46;
    PyObject *tmp_class_meta_47;
    PyObject *tmp_class_meta_48;
    PyObject *tmp_class_meta_49;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    int tmp_cmp_In_3;
    int tmp_cmp_In_4;
    int tmp_cmp_In_5;
    int tmp_cmp_In_6;
    int tmp_cmp_In_7;
    int tmp_cmp_In_8;
    int tmp_cmp_In_9;
    int tmp_cmp_In_10;
    int tmp_cmp_In_11;
    int tmp_cmp_In_12;
    int tmp_cmp_In_13;
    int tmp_cmp_In_14;
    int tmp_cmp_In_15;
    int tmp_cmp_In_16;
    int tmp_cmp_In_17;
    int tmp_cmp_In_18;
    int tmp_cmp_In_19;
    int tmp_cmp_In_20;
    int tmp_cmp_In_21;
    int tmp_cmp_In_22;
    int tmp_cmp_In_23;
    int tmp_cmp_In_24;
    int tmp_cmp_In_25;
    int tmp_cmp_In_26;
    int tmp_cmp_In_27;
    int tmp_cmp_In_28;
    int tmp_cmp_In_29;
    int tmp_cmp_In_30;
    int tmp_cmp_In_31;
    int tmp_cmp_In_32;
    int tmp_cmp_In_33;
    int tmp_cmp_In_34;
    int tmp_cmp_In_35;
    int tmp_cmp_In_36;
    int tmp_cmp_In_37;
    int tmp_cmp_In_38;
    int tmp_cmp_In_39;
    int tmp_cmp_In_40;
    int tmp_cmp_In_41;
    int tmp_cmp_In_42;
    int tmp_cmp_In_43;
    int tmp_cmp_In_44;
    int tmp_cmp_In_45;
    int tmp_cmp_In_46;
    int tmp_cmp_In_47;
    int tmp_cmp_In_48;
    int tmp_cmp_In_49;
    int tmp_cmp_In_50;
    int tmp_cmp_In_51;
    int tmp_cmp_In_52;
    int tmp_cmp_In_53;
    int tmp_cmp_In_54;
    int tmp_cmp_In_55;
    int tmp_cmp_In_56;
    int tmp_cmp_In_57;
    int tmp_cmp_In_58;
    int tmp_cmp_In_59;
    int tmp_cmp_In_60;
    int tmp_cmp_In_61;
    int tmp_cmp_In_62;
    int tmp_cmp_In_63;
    int tmp_cmp_In_64;
    int tmp_cmp_In_65;
    int tmp_cmp_In_66;
    int tmp_cmp_In_67;
    int tmp_cmp_In_68;
    int tmp_cmp_In_69;
    int tmp_cmp_In_70;
    int tmp_cmp_In_71;
    int tmp_cmp_In_72;
    int tmp_cmp_In_73;
    int tmp_cmp_In_74;
    int tmp_cmp_In_75;
    int tmp_cmp_In_76;
    int tmp_cmp_In_77;
    int tmp_cmp_In_78;
    int tmp_cmp_In_79;
    int tmp_cmp_In_80;
    int tmp_cmp_In_81;
    int tmp_cmp_In_82;
    int tmp_cmp_In_83;
    int tmp_cmp_In_84;
    int tmp_cmp_In_85;
    int tmp_cmp_In_86;
    int tmp_cmp_In_87;
    int tmp_cmp_In_88;
    int tmp_cmp_In_89;
    int tmp_cmp_In_90;
    int tmp_cmp_In_91;
    int tmp_cmp_In_92;
    int tmp_cmp_In_93;
    int tmp_cmp_In_94;
    int tmp_cmp_In_95;
    int tmp_cmp_In_96;
    int tmp_cmp_In_97;
    int tmp_cmp_In_98;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_left_8;
    PyObject *tmp_compare_left_9;
    PyObject *tmp_compare_left_10;
    PyObject *tmp_compare_left_11;
    PyObject *tmp_compare_left_12;
    PyObject *tmp_compare_left_13;
    PyObject *tmp_compare_left_14;
    PyObject *tmp_compare_left_15;
    PyObject *tmp_compare_left_16;
    PyObject *tmp_compare_left_17;
    PyObject *tmp_compare_left_18;
    PyObject *tmp_compare_left_19;
    PyObject *tmp_compare_left_20;
    PyObject *tmp_compare_left_21;
    PyObject *tmp_compare_left_22;
    PyObject *tmp_compare_left_23;
    PyObject *tmp_compare_left_24;
    PyObject *tmp_compare_left_25;
    PyObject *tmp_compare_left_26;
    PyObject *tmp_compare_left_27;
    PyObject *tmp_compare_left_28;
    PyObject *tmp_compare_left_29;
    PyObject *tmp_compare_left_30;
    PyObject *tmp_compare_left_31;
    PyObject *tmp_compare_left_32;
    PyObject *tmp_compare_left_33;
    PyObject *tmp_compare_left_34;
    PyObject *tmp_compare_left_35;
    PyObject *tmp_compare_left_36;
    PyObject *tmp_compare_left_37;
    PyObject *tmp_compare_left_38;
    PyObject *tmp_compare_left_39;
    PyObject *tmp_compare_left_40;
    PyObject *tmp_compare_left_41;
    PyObject *tmp_compare_left_42;
    PyObject *tmp_compare_left_43;
    PyObject *tmp_compare_left_44;
    PyObject *tmp_compare_left_45;
    PyObject *tmp_compare_left_46;
    PyObject *tmp_compare_left_47;
    PyObject *tmp_compare_left_48;
    PyObject *tmp_compare_left_49;
    PyObject *tmp_compare_left_50;
    PyObject *tmp_compare_left_51;
    PyObject *tmp_compare_left_52;
    PyObject *tmp_compare_left_53;
    PyObject *tmp_compare_left_54;
    PyObject *tmp_compare_left_55;
    PyObject *tmp_compare_left_56;
    PyObject *tmp_compare_left_57;
    PyObject *tmp_compare_left_58;
    PyObject *tmp_compare_left_59;
    PyObject *tmp_compare_left_60;
    PyObject *tmp_compare_left_61;
    PyObject *tmp_compare_left_62;
    PyObject *tmp_compare_left_63;
    PyObject *tmp_compare_left_64;
    PyObject *tmp_compare_left_65;
    PyObject *tmp_compare_left_66;
    PyObject *tmp_compare_left_67;
    PyObject *tmp_compare_left_68;
    PyObject *tmp_compare_left_69;
    PyObject *tmp_compare_left_70;
    PyObject *tmp_compare_left_71;
    PyObject *tmp_compare_left_72;
    PyObject *tmp_compare_left_73;
    PyObject *tmp_compare_left_74;
    PyObject *tmp_compare_left_75;
    PyObject *tmp_compare_left_76;
    PyObject *tmp_compare_left_77;
    PyObject *tmp_compare_left_78;
    PyObject *tmp_compare_left_79;
    PyObject *tmp_compare_left_80;
    PyObject *tmp_compare_left_81;
    PyObject *tmp_compare_left_82;
    PyObject *tmp_compare_left_83;
    PyObject *tmp_compare_left_84;
    PyObject *tmp_compare_left_85;
    PyObject *tmp_compare_left_86;
    PyObject *tmp_compare_left_87;
    PyObject *tmp_compare_left_88;
    PyObject *tmp_compare_left_89;
    PyObject *tmp_compare_left_90;
    PyObject *tmp_compare_left_91;
    PyObject *tmp_compare_left_92;
    PyObject *tmp_compare_left_93;
    PyObject *tmp_compare_left_94;
    PyObject *tmp_compare_left_95;
    PyObject *tmp_compare_left_96;
    PyObject *tmp_compare_left_97;
    PyObject *tmp_compare_left_98;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compare_right_8;
    PyObject *tmp_compare_right_9;
    PyObject *tmp_compare_right_10;
    PyObject *tmp_compare_right_11;
    PyObject *tmp_compare_right_12;
    PyObject *tmp_compare_right_13;
    PyObject *tmp_compare_right_14;
    PyObject *tmp_compare_right_15;
    PyObject *tmp_compare_right_16;
    PyObject *tmp_compare_right_17;
    PyObject *tmp_compare_right_18;
    PyObject *tmp_compare_right_19;
    PyObject *tmp_compare_right_20;
    PyObject *tmp_compare_right_21;
    PyObject *tmp_compare_right_22;
    PyObject *tmp_compare_right_23;
    PyObject *tmp_compare_right_24;
    PyObject *tmp_compare_right_25;
    PyObject *tmp_compare_right_26;
    PyObject *tmp_compare_right_27;
    PyObject *tmp_compare_right_28;
    PyObject *tmp_compare_right_29;
    PyObject *tmp_compare_right_30;
    PyObject *tmp_compare_right_31;
    PyObject *tmp_compare_right_32;
    PyObject *tmp_compare_right_33;
    PyObject *tmp_compare_right_34;
    PyObject *tmp_compare_right_35;
    PyObject *tmp_compare_right_36;
    PyObject *tmp_compare_right_37;
    PyObject *tmp_compare_right_38;
    PyObject *tmp_compare_right_39;
    PyObject *tmp_compare_right_40;
    PyObject *tmp_compare_right_41;
    PyObject *tmp_compare_right_42;
    PyObject *tmp_compare_right_43;
    PyObject *tmp_compare_right_44;
    PyObject *tmp_compare_right_45;
    PyObject *tmp_compare_right_46;
    PyObject *tmp_compare_right_47;
    PyObject *tmp_compare_right_48;
    PyObject *tmp_compare_right_49;
    PyObject *tmp_compare_right_50;
    PyObject *tmp_compare_right_51;
    PyObject *tmp_compare_right_52;
    PyObject *tmp_compare_right_53;
    PyObject *tmp_compare_right_54;
    PyObject *tmp_compare_right_55;
    PyObject *tmp_compare_right_56;
    PyObject *tmp_compare_right_57;
    PyObject *tmp_compare_right_58;
    PyObject *tmp_compare_right_59;
    PyObject *tmp_compare_right_60;
    PyObject *tmp_compare_right_61;
    PyObject *tmp_compare_right_62;
    PyObject *tmp_compare_right_63;
    PyObject *tmp_compare_right_64;
    PyObject *tmp_compare_right_65;
    PyObject *tmp_compare_right_66;
    PyObject *tmp_compare_right_67;
    PyObject *tmp_compare_right_68;
    PyObject *tmp_compare_right_69;
    PyObject *tmp_compare_right_70;
    PyObject *tmp_compare_right_71;
    PyObject *tmp_compare_right_72;
    PyObject *tmp_compare_right_73;
    PyObject *tmp_compare_right_74;
    PyObject *tmp_compare_right_75;
    PyObject *tmp_compare_right_76;
    PyObject *tmp_compare_right_77;
    PyObject *tmp_compare_right_78;
    PyObject *tmp_compare_right_79;
    PyObject *tmp_compare_right_80;
    PyObject *tmp_compare_right_81;
    PyObject *tmp_compare_right_82;
    PyObject *tmp_compare_right_83;
    PyObject *tmp_compare_right_84;
    PyObject *tmp_compare_right_85;
    PyObject *tmp_compare_right_86;
    PyObject *tmp_compare_right_87;
    PyObject *tmp_compare_right_88;
    PyObject *tmp_compare_right_89;
    PyObject *tmp_compare_right_90;
    PyObject *tmp_compare_right_91;
    PyObject *tmp_compare_right_92;
    PyObject *tmp_compare_right_93;
    PyObject *tmp_compare_right_94;
    PyObject *tmp_compare_right_95;
    PyObject *tmp_compare_right_96;
    PyObject *tmp_compare_right_97;
    PyObject *tmp_compare_right_98;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    int tmp_cond_truth_8;
    int tmp_cond_truth_9;
    int tmp_cond_truth_10;
    int tmp_cond_truth_11;
    int tmp_cond_truth_12;
    int tmp_cond_truth_13;
    int tmp_cond_truth_14;
    int tmp_cond_truth_15;
    int tmp_cond_truth_16;
    int tmp_cond_truth_17;
    int tmp_cond_truth_18;
    int tmp_cond_truth_19;
    int tmp_cond_truth_20;
    int tmp_cond_truth_21;
    int tmp_cond_truth_22;
    int tmp_cond_truth_23;
    int tmp_cond_truth_24;
    int tmp_cond_truth_25;
    int tmp_cond_truth_26;
    int tmp_cond_truth_27;
    int tmp_cond_truth_28;
    int tmp_cond_truth_29;
    int tmp_cond_truth_30;
    int tmp_cond_truth_31;
    int tmp_cond_truth_32;
    int tmp_cond_truth_33;
    int tmp_cond_truth_34;
    int tmp_cond_truth_35;
    int tmp_cond_truth_36;
    int tmp_cond_truth_37;
    int tmp_cond_truth_38;
    int tmp_cond_truth_39;
    int tmp_cond_truth_40;
    int tmp_cond_truth_41;
    int tmp_cond_truth_42;
    int tmp_cond_truth_43;
    int tmp_cond_truth_44;
    int tmp_cond_truth_45;
    int tmp_cond_truth_46;
    int tmp_cond_truth_47;
    int tmp_cond_truth_48;
    int tmp_cond_truth_49;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_cond_value_8;
    PyObject *tmp_cond_value_9;
    PyObject *tmp_cond_value_10;
    PyObject *tmp_cond_value_11;
    PyObject *tmp_cond_value_12;
    PyObject *tmp_cond_value_13;
    PyObject *tmp_cond_value_14;
    PyObject *tmp_cond_value_15;
    PyObject *tmp_cond_value_16;
    PyObject *tmp_cond_value_17;
    PyObject *tmp_cond_value_18;
    PyObject *tmp_cond_value_19;
    PyObject *tmp_cond_value_20;
    PyObject *tmp_cond_value_21;
    PyObject *tmp_cond_value_22;
    PyObject *tmp_cond_value_23;
    PyObject *tmp_cond_value_24;
    PyObject *tmp_cond_value_25;
    PyObject *tmp_cond_value_26;
    PyObject *tmp_cond_value_27;
    PyObject *tmp_cond_value_28;
    PyObject *tmp_cond_value_29;
    PyObject *tmp_cond_value_30;
    PyObject *tmp_cond_value_31;
    PyObject *tmp_cond_value_32;
    PyObject *tmp_cond_value_33;
    PyObject *tmp_cond_value_34;
    PyObject *tmp_cond_value_35;
    PyObject *tmp_cond_value_36;
    PyObject *tmp_cond_value_37;
    PyObject *tmp_cond_value_38;
    PyObject *tmp_cond_value_39;
    PyObject *tmp_cond_value_40;
    PyObject *tmp_cond_value_41;
    PyObject *tmp_cond_value_42;
    PyObject *tmp_cond_value_43;
    PyObject *tmp_cond_value_44;
    PyObject *tmp_cond_value_45;
    PyObject *tmp_cond_value_46;
    PyObject *tmp_cond_value_47;
    PyObject *tmp_cond_value_48;
    PyObject *tmp_cond_value_49;
    PyObject *tmp_dget_dict_1;
    PyObject *tmp_dget_dict_2;
    PyObject *tmp_dget_dict_3;
    PyObject *tmp_dget_dict_4;
    PyObject *tmp_dget_dict_5;
    PyObject *tmp_dget_dict_6;
    PyObject *tmp_dget_dict_7;
    PyObject *tmp_dget_dict_8;
    PyObject *tmp_dget_dict_9;
    PyObject *tmp_dget_dict_10;
    PyObject *tmp_dget_dict_11;
    PyObject *tmp_dget_dict_12;
    PyObject *tmp_dget_dict_13;
    PyObject *tmp_dget_dict_14;
    PyObject *tmp_dget_dict_15;
    PyObject *tmp_dget_dict_16;
    PyObject *tmp_dget_dict_17;
    PyObject *tmp_dget_dict_18;
    PyObject *tmp_dget_dict_19;
    PyObject *tmp_dget_dict_20;
    PyObject *tmp_dget_dict_21;
    PyObject *tmp_dget_dict_22;
    PyObject *tmp_dget_dict_23;
    PyObject *tmp_dget_dict_24;
    PyObject *tmp_dget_dict_25;
    PyObject *tmp_dget_dict_26;
    PyObject *tmp_dget_dict_27;
    PyObject *tmp_dget_dict_28;
    PyObject *tmp_dget_dict_29;
    PyObject *tmp_dget_dict_30;
    PyObject *tmp_dget_dict_31;
    PyObject *tmp_dget_dict_32;
    PyObject *tmp_dget_dict_33;
    PyObject *tmp_dget_dict_34;
    PyObject *tmp_dget_dict_35;
    PyObject *tmp_dget_dict_36;
    PyObject *tmp_dget_dict_37;
    PyObject *tmp_dget_dict_38;
    PyObject *tmp_dget_dict_39;
    PyObject *tmp_dget_dict_40;
    PyObject *tmp_dget_dict_41;
    PyObject *tmp_dget_dict_42;
    PyObject *tmp_dget_dict_43;
    PyObject *tmp_dget_dict_44;
    PyObject *tmp_dget_dict_45;
    PyObject *tmp_dget_dict_46;
    PyObject *tmp_dget_dict_47;
    PyObject *tmp_dget_dict_48;
    PyObject *tmp_dget_dict_49;
    PyObject *tmp_dget_key_1;
    PyObject *tmp_dget_key_2;
    PyObject *tmp_dget_key_3;
    PyObject *tmp_dget_key_4;
    PyObject *tmp_dget_key_5;
    PyObject *tmp_dget_key_6;
    PyObject *tmp_dget_key_7;
    PyObject *tmp_dget_key_8;
    PyObject *tmp_dget_key_9;
    PyObject *tmp_dget_key_10;
    PyObject *tmp_dget_key_11;
    PyObject *tmp_dget_key_12;
    PyObject *tmp_dget_key_13;
    PyObject *tmp_dget_key_14;
    PyObject *tmp_dget_key_15;
    PyObject *tmp_dget_key_16;
    PyObject *tmp_dget_key_17;
    PyObject *tmp_dget_key_18;
    PyObject *tmp_dget_key_19;
    PyObject *tmp_dget_key_20;
    PyObject *tmp_dget_key_21;
    PyObject *tmp_dget_key_22;
    PyObject *tmp_dget_key_23;
    PyObject *tmp_dget_key_24;
    PyObject *tmp_dget_key_25;
    PyObject *tmp_dget_key_26;
    PyObject *tmp_dget_key_27;
    PyObject *tmp_dget_key_28;
    PyObject *tmp_dget_key_29;
    PyObject *tmp_dget_key_30;
    PyObject *tmp_dget_key_31;
    PyObject *tmp_dget_key_32;
    PyObject *tmp_dget_key_33;
    PyObject *tmp_dget_key_34;
    PyObject *tmp_dget_key_35;
    PyObject *tmp_dget_key_36;
    PyObject *tmp_dget_key_37;
    PyObject *tmp_dget_key_38;
    PyObject *tmp_dget_key_39;
    PyObject *tmp_dget_key_40;
    PyObject *tmp_dget_key_41;
    PyObject *tmp_dget_key_42;
    PyObject *tmp_dget_key_43;
    PyObject *tmp_dget_key_44;
    PyObject *tmp_dget_key_45;
    PyObject *tmp_dget_key_46;
    PyObject *tmp_dget_key_47;
    PyObject *tmp_dget_key_48;
    PyObject *tmp_dget_key_49;
    PyObject *tmp_hasattr_attr_1;
    PyObject *tmp_hasattr_attr_2;
    PyObject *tmp_hasattr_attr_3;
    PyObject *tmp_hasattr_attr_4;
    PyObject *tmp_hasattr_attr_5;
    PyObject *tmp_hasattr_attr_6;
    PyObject *tmp_hasattr_attr_7;
    PyObject *tmp_hasattr_attr_8;
    PyObject *tmp_hasattr_attr_9;
    PyObject *tmp_hasattr_attr_10;
    PyObject *tmp_hasattr_attr_11;
    PyObject *tmp_hasattr_attr_12;
    PyObject *tmp_hasattr_attr_13;
    PyObject *tmp_hasattr_attr_14;
    PyObject *tmp_hasattr_attr_15;
    PyObject *tmp_hasattr_attr_16;
    PyObject *tmp_hasattr_attr_17;
    PyObject *tmp_hasattr_attr_18;
    PyObject *tmp_hasattr_attr_19;
    PyObject *tmp_hasattr_attr_20;
    PyObject *tmp_hasattr_attr_21;
    PyObject *tmp_hasattr_attr_22;
    PyObject *tmp_hasattr_attr_23;
    PyObject *tmp_hasattr_attr_24;
    PyObject *tmp_hasattr_attr_25;
    PyObject *tmp_hasattr_attr_26;
    PyObject *tmp_hasattr_attr_27;
    PyObject *tmp_hasattr_attr_28;
    PyObject *tmp_hasattr_attr_29;
    PyObject *tmp_hasattr_attr_30;
    PyObject *tmp_hasattr_attr_31;
    PyObject *tmp_hasattr_attr_32;
    PyObject *tmp_hasattr_attr_33;
    PyObject *tmp_hasattr_attr_34;
    PyObject *tmp_hasattr_attr_35;
    PyObject *tmp_hasattr_attr_36;
    PyObject *tmp_hasattr_attr_37;
    PyObject *tmp_hasattr_attr_38;
    PyObject *tmp_hasattr_attr_39;
    PyObject *tmp_hasattr_attr_40;
    PyObject *tmp_hasattr_attr_41;
    PyObject *tmp_hasattr_attr_42;
    PyObject *tmp_hasattr_attr_43;
    PyObject *tmp_hasattr_attr_44;
    PyObject *tmp_hasattr_attr_45;
    PyObject *tmp_hasattr_attr_46;
    PyObject *tmp_hasattr_attr_47;
    PyObject *tmp_hasattr_attr_48;
    PyObject *tmp_hasattr_attr_49;
    PyObject *tmp_hasattr_source_1;
    PyObject *tmp_hasattr_source_2;
    PyObject *tmp_hasattr_source_3;
    PyObject *tmp_hasattr_source_4;
    PyObject *tmp_hasattr_source_5;
    PyObject *tmp_hasattr_source_6;
    PyObject *tmp_hasattr_source_7;
    PyObject *tmp_hasattr_source_8;
    PyObject *tmp_hasattr_source_9;
    PyObject *tmp_hasattr_source_10;
    PyObject *tmp_hasattr_source_11;
    PyObject *tmp_hasattr_source_12;
    PyObject *tmp_hasattr_source_13;
    PyObject *tmp_hasattr_source_14;
    PyObject *tmp_hasattr_source_15;
    PyObject *tmp_hasattr_source_16;
    PyObject *tmp_hasattr_source_17;
    PyObject *tmp_hasattr_source_18;
    PyObject *tmp_hasattr_source_19;
    PyObject *tmp_hasattr_source_20;
    PyObject *tmp_hasattr_source_21;
    PyObject *tmp_hasattr_source_22;
    PyObject *tmp_hasattr_source_23;
    PyObject *tmp_hasattr_source_24;
    PyObject *tmp_hasattr_source_25;
    PyObject *tmp_hasattr_source_26;
    PyObject *tmp_hasattr_source_27;
    PyObject *tmp_hasattr_source_28;
    PyObject *tmp_hasattr_source_29;
    PyObject *tmp_hasattr_source_30;
    PyObject *tmp_hasattr_source_31;
    PyObject *tmp_hasattr_source_32;
    PyObject *tmp_hasattr_source_33;
    PyObject *tmp_hasattr_source_34;
    PyObject *tmp_hasattr_source_35;
    PyObject *tmp_hasattr_source_36;
    PyObject *tmp_hasattr_source_37;
    PyObject *tmp_hasattr_source_38;
    PyObject *tmp_hasattr_source_39;
    PyObject *tmp_hasattr_source_40;
    PyObject *tmp_hasattr_source_41;
    PyObject *tmp_hasattr_source_42;
    PyObject *tmp_hasattr_source_43;
    PyObject *tmp_hasattr_source_44;
    PyObject *tmp_hasattr_source_45;
    PyObject *tmp_hasattr_source_46;
    PyObject *tmp_hasattr_source_47;
    PyObject *tmp_hasattr_source_48;
    PyObject *tmp_hasattr_source_49;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_globals_2;
    PyObject *tmp_import_globals_3;
    PyObject *tmp_import_globals_4;
    PyObject *tmp_import_globals_5;
    PyObject *tmp_import_globals_6;
    PyObject *tmp_import_globals_7;
    PyObject *tmp_import_globals_8;
    PyObject *tmp_import_globals_9;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_import_name_from_2;
    PyObject *tmp_import_name_from_3;
    PyObject *tmp_import_name_from_4;
    PyObject *tmp_import_name_from_5;
    PyObject *tmp_import_name_from_6;
    PyObject *tmp_import_name_from_7;
    PyObject *tmp_import_name_from_8;
    PyObject *tmp_import_name_from_9;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    PyObject *tmp_kw_name_3;
    PyObject *tmp_kw_name_4;
    PyObject *tmp_kw_name_5;
    PyObject *tmp_kw_name_6;
    PyObject *tmp_kw_name_7;
    PyObject *tmp_kw_name_8;
    PyObject *tmp_kw_name_9;
    PyObject *tmp_kw_name_10;
    PyObject *tmp_kw_name_11;
    PyObject *tmp_kw_name_12;
    PyObject *tmp_kw_name_13;
    PyObject *tmp_kw_name_14;
    PyObject *tmp_kw_name_15;
    PyObject *tmp_kw_name_16;
    PyObject *tmp_kw_name_17;
    PyObject *tmp_kw_name_18;
    PyObject *tmp_kw_name_19;
    PyObject *tmp_kw_name_20;
    PyObject *tmp_kw_name_21;
    PyObject *tmp_kw_name_22;
    PyObject *tmp_kw_name_23;
    PyObject *tmp_kw_name_24;
    PyObject *tmp_kw_name_25;
    PyObject *tmp_kw_name_26;
    PyObject *tmp_kw_name_27;
    PyObject *tmp_kw_name_28;
    PyObject *tmp_kw_name_29;
    PyObject *tmp_kw_name_30;
    PyObject *tmp_kw_name_31;
    PyObject *tmp_kw_name_32;
    PyObject *tmp_kw_name_33;
    PyObject *tmp_kw_name_34;
    PyObject *tmp_kw_name_35;
    PyObject *tmp_kw_name_36;
    PyObject *tmp_kw_name_37;
    PyObject *tmp_kw_name_38;
    PyObject *tmp_kw_name_39;
    PyObject *tmp_kw_name_40;
    PyObject *tmp_kw_name_41;
    PyObject *tmp_kw_name_42;
    PyObject *tmp_kw_name_43;
    PyObject *tmp_kw_name_44;
    PyObject *tmp_kw_name_45;
    PyObject *tmp_kw_name_46;
    PyObject *tmp_kw_name_47;
    PyObject *tmp_kw_name_48;
    PyObject *tmp_kw_name_49;
    PyObject *tmp_remove_dict;
    PyObject *tmp_remove_key;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_source_name_22;
    PyObject *tmp_source_name_23;
    PyObject *tmp_source_name_24;
    PyObject *tmp_source_name_25;
    PyObject *tmp_source_name_26;
    PyObject *tmp_source_name_27;
    PyObject *tmp_source_name_28;
    PyObject *tmp_source_name_29;
    PyObject *tmp_source_name_30;
    PyObject *tmp_source_name_31;
    PyObject *tmp_source_name_32;
    PyObject *tmp_source_name_33;
    PyObject *tmp_source_name_34;
    PyObject *tmp_source_name_35;
    PyObject *tmp_source_name_36;
    PyObject *tmp_source_name_37;
    PyObject *tmp_source_name_38;
    PyObject *tmp_source_name_39;
    PyObject *tmp_source_name_40;
    PyObject *tmp_source_name_41;
    PyObject *tmp_source_name_42;
    PyObject *tmp_source_name_43;
    PyObject *tmp_source_name_44;
    PyObject *tmp_source_name_45;
    PyObject *tmp_source_name_46;
    PyObject *tmp_source_name_47;
    PyObject *tmp_source_name_48;
    PyObject *tmp_source_name_49;
    PyObject *tmp_source_name_50;
    PyObject *tmp_source_name_51;
    PyObject *tmp_source_name_52;
    PyObject *tmp_source_name_53;
    PyObject *tmp_source_name_54;
    PyObject *tmp_source_name_55;
    PyObject *tmp_source_name_56;
    PyObject *tmp_source_name_57;
    PyObject *tmp_source_name_58;
    PyObject *tmp_source_name_59;
    PyObject *tmp_source_name_60;
    PyObject *tmp_source_name_61;
    PyObject *tmp_source_name_62;
    PyObject *tmp_source_name_63;
    PyObject *tmp_source_name_64;
    PyObject *tmp_source_name_65;
    PyObject *tmp_source_name_66;
    PyObject *tmp_source_name_67;
    PyObject *tmp_source_name_68;
    PyObject *tmp_source_name_69;
    PyObject *tmp_source_name_70;
    PyObject *tmp_source_name_71;
    PyObject *tmp_source_name_72;
    PyObject *tmp_source_name_73;
    PyObject *tmp_source_name_74;
    PyObject *tmp_source_name_75;
    PyObject *tmp_source_name_76;
    PyObject *tmp_source_name_77;
    PyObject *tmp_source_name_78;
    PyObject *tmp_source_name_79;
    PyObject *tmp_source_name_80;
    PyObject *tmp_source_name_81;
    PyObject *tmp_source_name_82;
    PyObject *tmp_source_name_83;
    PyObject *tmp_source_name_84;
    PyObject *tmp_source_name_85;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscribed_name_2;
    PyObject *tmp_subscribed_name_3;
    PyObject *tmp_subscribed_name_4;
    PyObject *tmp_subscribed_name_5;
    PyObject *tmp_subscribed_name_6;
    PyObject *tmp_subscribed_name_7;
    PyObject *tmp_subscribed_name_8;
    PyObject *tmp_subscribed_name_9;
    PyObject *tmp_subscribed_name_10;
    PyObject *tmp_subscribed_name_11;
    PyObject *tmp_subscribed_name_12;
    PyObject *tmp_subscribed_name_13;
    PyObject *tmp_subscribed_name_14;
    PyObject *tmp_subscribed_name_15;
    PyObject *tmp_subscribed_name_16;
    PyObject *tmp_subscribed_name_17;
    PyObject *tmp_subscribed_name_18;
    PyObject *tmp_subscribed_name_19;
    PyObject *tmp_subscribed_name_20;
    PyObject *tmp_subscribed_name_21;
    PyObject *tmp_subscribed_name_22;
    PyObject *tmp_subscribed_name_23;
    PyObject *tmp_subscribed_name_24;
    PyObject *tmp_subscribed_name_25;
    PyObject *tmp_subscribed_name_26;
    PyObject *tmp_subscribed_name_27;
    PyObject *tmp_subscribed_name_28;
    PyObject *tmp_subscribed_name_29;
    PyObject *tmp_subscribed_name_30;
    PyObject *tmp_subscribed_name_31;
    PyObject *tmp_subscribed_name_32;
    PyObject *tmp_subscribed_name_33;
    PyObject *tmp_subscribed_name_34;
    PyObject *tmp_subscribed_name_35;
    PyObject *tmp_subscribed_name_36;
    PyObject *tmp_subscribed_name_37;
    PyObject *tmp_subscribed_name_38;
    PyObject *tmp_subscribed_name_39;
    PyObject *tmp_subscribed_name_40;
    PyObject *tmp_subscribed_name_41;
    PyObject *tmp_subscribed_name_42;
    PyObject *tmp_subscribed_name_43;
    PyObject *tmp_subscribed_name_44;
    PyObject *tmp_subscribed_name_45;
    PyObject *tmp_subscribed_name_46;
    PyObject *tmp_subscribed_name_47;
    PyObject *tmp_subscribed_name_48;
    PyObject *tmp_subscribed_name_49;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_subscript_name_2;
    PyObject *tmp_subscript_name_3;
    PyObject *tmp_subscript_name_4;
    PyObject *tmp_subscript_name_5;
    PyObject *tmp_subscript_name_6;
    PyObject *tmp_subscript_name_7;
    PyObject *tmp_subscript_name_8;
    PyObject *tmp_subscript_name_9;
    PyObject *tmp_subscript_name_10;
    PyObject *tmp_subscript_name_11;
    PyObject *tmp_subscript_name_12;
    PyObject *tmp_subscript_name_13;
    PyObject *tmp_subscript_name_14;
    PyObject *tmp_subscript_name_15;
    PyObject *tmp_subscript_name_16;
    PyObject *tmp_subscript_name_17;
    PyObject *tmp_subscript_name_18;
    PyObject *tmp_subscript_name_19;
    PyObject *tmp_subscript_name_20;
    PyObject *tmp_subscript_name_21;
    PyObject *tmp_subscript_name_22;
    PyObject *tmp_subscript_name_23;
    PyObject *tmp_subscript_name_24;
    PyObject *tmp_subscript_name_25;
    PyObject *tmp_subscript_name_26;
    PyObject *tmp_subscript_name_27;
    PyObject *tmp_subscript_name_28;
    PyObject *tmp_subscript_name_29;
    PyObject *tmp_subscript_name_30;
    PyObject *tmp_subscript_name_31;
    PyObject *tmp_subscript_name_32;
    PyObject *tmp_subscript_name_33;
    PyObject *tmp_subscript_name_34;
    PyObject *tmp_subscript_name_35;
    PyObject *tmp_subscript_name_36;
    PyObject *tmp_subscript_name_37;
    PyObject *tmp_subscript_name_38;
    PyObject *tmp_subscript_name_39;
    PyObject *tmp_subscript_name_40;
    PyObject *tmp_subscript_name_41;
    PyObject *tmp_subscript_name_42;
    PyObject *tmp_subscript_name_43;
    PyObject *tmp_subscript_name_44;
    PyObject *tmp_subscript_name_45;
    PyObject *tmp_subscript_name_46;
    PyObject *tmp_subscript_name_47;
    PyObject *tmp_subscript_name_48;
    PyObject *tmp_subscript_name_49;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    PyObject *tmp_tuple_element_5;
    PyObject *tmp_tuple_element_6;
    PyObject *tmp_tuple_element_7;
    PyObject *tmp_tuple_element_8;
    PyObject *tmp_tuple_element_9;
    PyObject *tmp_tuple_element_10;
    PyObject *tmp_tuple_element_11;
    PyObject *tmp_tuple_element_12;
    PyObject *tmp_tuple_element_13;
    PyObject *tmp_tuple_element_14;
    PyObject *tmp_tuple_element_15;
    PyObject *tmp_tuple_element_16;
    PyObject *tmp_tuple_element_17;
    PyObject *tmp_tuple_element_18;
    PyObject *tmp_tuple_element_19;
    PyObject *tmp_tuple_element_20;
    PyObject *tmp_tuple_element_21;
    PyObject *tmp_tuple_element_22;
    PyObject *tmp_tuple_element_23;
    PyObject *tmp_tuple_element_24;
    PyObject *tmp_tuple_element_25;
    PyObject *tmp_tuple_element_26;
    PyObject *tmp_tuple_element_27;
    PyObject *tmp_tuple_element_28;
    PyObject *tmp_tuple_element_29;
    PyObject *tmp_tuple_element_30;
    PyObject *tmp_tuple_element_31;
    PyObject *tmp_tuple_element_32;
    PyObject *tmp_tuple_element_33;
    PyObject *tmp_tuple_element_34;
    PyObject *tmp_tuple_element_35;
    PyObject *tmp_tuple_element_36;
    PyObject *tmp_tuple_element_37;
    PyObject *tmp_tuple_element_38;
    PyObject *tmp_tuple_element_39;
    PyObject *tmp_tuple_element_40;
    PyObject *tmp_tuple_element_41;
    PyObject *tmp_tuple_element_42;
    PyObject *tmp_tuple_element_43;
    PyObject *tmp_tuple_element_44;
    PyObject *tmp_tuple_element_45;
    PyObject *tmp_tuple_element_46;
    PyObject *tmp_tuple_element_47;
    PyObject *tmp_tuple_element_48;
    PyObject *tmp_tuple_element_49;
    PyObject *tmp_tuple_element_50;
    PyObject *tmp_tuple_element_51;
    PyObject *tmp_tuple_element_52;
    PyObject *tmp_tuple_element_53;
    PyObject *tmp_tuple_element_54;
    PyObject *tmp_tuple_element_55;
    PyObject *tmp_tuple_element_56;
    PyObject *tmp_tuple_element_57;
    PyObject *tmp_tuple_element_58;
    PyObject *tmp_tuple_element_59;
    PyObject *tmp_tuple_element_60;
    PyObject *tmp_tuple_element_61;
    PyObject *tmp_tuple_element_62;
    PyObject *tmp_tuple_element_63;
    PyObject *tmp_tuple_element_64;
    PyObject *tmp_tuple_element_65;
    PyObject *tmp_tuple_element_66;
    PyObject *tmp_tuple_element_67;
    PyObject *tmp_tuple_element_68;
    PyObject *tmp_tuple_element_69;
    PyObject *tmp_tuple_element_70;
    PyObject *tmp_tuple_element_71;
    PyObject *tmp_tuple_element_72;
    PyObject *tmp_tuple_element_73;
    PyObject *tmp_tuple_element_74;
    PyObject *tmp_tuple_element_75;
    PyObject *tmp_tuple_element_76;
    PyObject *tmp_tuple_element_77;
    PyObject *tmp_tuple_element_78;
    PyObject *tmp_tuple_element_79;
    PyObject *tmp_tuple_element_80;
    PyObject *tmp_tuple_element_81;
    PyObject *tmp_tuple_element_82;
    PyObject *tmp_tuple_element_83;
    PyObject *tmp_tuple_element_84;
    PyObject *tmp_tuple_element_85;
    PyObject *tmp_tuple_element_86;
    PyObject *tmp_tuple_element_87;
    PyObject *tmp_tuple_element_88;
    PyObject *tmp_tuple_element_89;
    PyObject *tmp_tuple_element_90;
    PyObject *tmp_tuple_element_91;
    PyObject *tmp_tuple_element_92;
    PyObject *tmp_tuple_element_93;
    PyObject *tmp_tuple_element_94;
    PyObject *tmp_tuple_element_95;
    PyObject *tmp_tuple_element_96;
    PyObject *tmp_tuple_element_97;
    PyObject *tmp_tuple_element_98;
    PyObject *tmp_type_arg_1;
    PyObject *tmp_type_arg_2;
    PyObject *tmp_type_arg_3;
    PyObject *tmp_type_arg_4;
    PyObject *tmp_type_arg_5;
    PyObject *tmp_type_arg_6;
    PyObject *tmp_type_arg_7;
    PyObject *tmp_type_arg_8;
    PyObject *tmp_type_arg_9;
    PyObject *tmp_type_arg_10;
    PyObject *tmp_type_arg_11;
    PyObject *tmp_type_arg_12;
    PyObject *tmp_type_arg_13;
    PyObject *tmp_type_arg_14;
    PyObject *tmp_type_arg_15;
    PyObject *tmp_type_arg_16;
    PyObject *tmp_type_arg_17;
    PyObject *tmp_type_arg_18;
    PyObject *tmp_type_arg_19;
    PyObject *tmp_type_arg_20;
    PyObject *tmp_type_arg_21;
    PyObject *tmp_type_arg_22;
    PyObject *tmp_type_arg_23;
    PyObject *tmp_type_arg_24;
    PyObject *tmp_type_arg_25;
    PyObject *tmp_type_arg_26;
    PyObject *tmp_type_arg_27;
    PyObject *tmp_type_arg_28;
    PyObject *tmp_type_arg_29;
    PyObject *tmp_type_arg_30;
    PyObject *tmp_type_arg_31;
    PyObject *tmp_type_arg_32;
    PyObject *tmp_type_arg_33;
    PyObject *tmp_type_arg_34;
    PyObject *tmp_type_arg_35;
    PyObject *tmp_type_arg_36;
    PyObject *tmp_type_arg_37;
    PyObject *tmp_type_arg_38;
    PyObject *tmp_type_arg_39;
    PyObject *tmp_type_arg_40;
    PyObject *tmp_type_arg_41;
    PyObject *tmp_type_arg_42;
    PyObject *tmp_type_arg_43;
    PyObject *tmp_type_arg_44;
    PyObject *tmp_type_arg_45;
    PyObject *tmp_type_arg_46;
    PyObject *tmp_type_arg_47;
    PyObject *tmp_type_arg_48;
    PyObject *tmp_type_arg_49;
    PyFrameObject *frame_module;


    // Module code.
    tmp_assign_source_1 = Py_None;
    UPDATE_STRING_DICT0( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain___doc__, tmp_assign_source_1 );
    tmp_assign_source_2 = const_str_digest_6a2f0605d1e2f8992d30eea76449f137;
    UPDATE_STRING_DICT0( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain___file__, tmp_assign_source_2 );
    tmp_assign_source_3 = Py_None;
    UPDATE_STRING_DICT0( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain___cached__, tmp_assign_source_3 );
    tmp_assign_source_4 = const_str_plain_pyasn1_modules;
    UPDATE_STRING_DICT0( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain___package__, tmp_assign_source_4 );
    // Frame without reuse.
    frame_module = MAKE_FRAME( codeobj_c935d0f03df1c2ef037118536ace7a98, module_pyasn1_modules$rfc2251 );

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack( frame_module );
    assert( Py_REFCNT( frame_module ) == 1 );

#if PYTHON_VERSION >= 340
    frame_module->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_pyasn1_modules$rfc2251)->md_dict;
    frame_module->f_lineno = 10;
    tmp_import_name_from_1 = IMPORT_MODULE( const_str_digest_7c8c58049edd248f8b1cb370445e702c, tmp_import_globals_1, tmp_import_globals_1, const_tuple_8d452a14c86d6dbde022d5740faa1c75_tuple, const_int_0 );
    if ( tmp_import_name_from_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 10;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_5 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_tag );
    Py_DECREF( tmp_import_name_from_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 10;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_tag, tmp_assign_source_5 );
    tmp_import_globals_2 = ((PyModuleObject *)module_pyasn1_modules$rfc2251)->md_dict;
    frame_module->f_lineno = 10;
    tmp_import_name_from_2 = IMPORT_MODULE( const_str_digest_7c8c58049edd248f8b1cb370445e702c, tmp_import_globals_2, tmp_import_globals_2, const_tuple_8d452a14c86d6dbde022d5740faa1c75_tuple, const_int_0 );
    if ( tmp_import_name_from_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 10;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_6 = IMPORT_NAME( tmp_import_name_from_2, const_str_plain_namedtype );
    Py_DECREF( tmp_import_name_from_2 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 10;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedtype, tmp_assign_source_6 );
    tmp_import_globals_3 = ((PyModuleObject *)module_pyasn1_modules$rfc2251)->md_dict;
    frame_module->f_lineno = 10;
    tmp_import_name_from_3 = IMPORT_MODULE( const_str_digest_7c8c58049edd248f8b1cb370445e702c, tmp_import_globals_3, tmp_import_globals_3, const_tuple_8d452a14c86d6dbde022d5740faa1c75_tuple, const_int_0 );
    if ( tmp_import_name_from_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 10;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_7 = IMPORT_NAME( tmp_import_name_from_3, const_str_plain_namedval );
    Py_DECREF( tmp_import_name_from_3 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 10;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_namedval, tmp_assign_source_7 );
    tmp_import_globals_4 = ((PyModuleObject *)module_pyasn1_modules$rfc2251)->md_dict;
    frame_module->f_lineno = 10;
    tmp_import_name_from_4 = IMPORT_MODULE( const_str_digest_7c8c58049edd248f8b1cb370445e702c, tmp_import_globals_4, tmp_import_globals_4, const_tuple_8d452a14c86d6dbde022d5740faa1c75_tuple, const_int_0 );
    if ( tmp_import_name_from_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 10;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_8 = IMPORT_NAME( tmp_import_name_from_4, const_str_plain_univ );
    Py_DECREF( tmp_import_name_from_4 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 10;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ, tmp_assign_source_8 );
    tmp_import_globals_5 = ((PyModuleObject *)module_pyasn1_modules$rfc2251)->md_dict;
    frame_module->f_lineno = 10;
    tmp_import_name_from_5 = IMPORT_MODULE( const_str_digest_7c8c58049edd248f8b1cb370445e702c, tmp_import_globals_5, tmp_import_globals_5, const_tuple_8d452a14c86d6dbde022d5740faa1c75_tuple, const_int_0 );
    if ( tmp_import_name_from_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 10;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_9 = IMPORT_NAME( tmp_import_name_from_5, const_str_plain_constraint );
    Py_DECREF( tmp_import_name_from_5 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 10;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_constraint, tmp_assign_source_9 );
    tmp_import_globals_6 = ((PyModuleObject *)module_pyasn1_modules$rfc2251)->md_dict;
    frame_module->f_lineno = 10;
    tmp_import_name_from_6 = IMPORT_MODULE( const_str_digest_7c8c58049edd248f8b1cb370445e702c, tmp_import_globals_6, tmp_import_globals_6, const_tuple_8d452a14c86d6dbde022d5740faa1c75_tuple, const_int_0 );
    if ( tmp_import_name_from_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 10;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_10 = IMPORT_NAME( tmp_import_name_from_6, const_str_plain_char );
    Py_DECREF( tmp_import_name_from_6 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 10;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_char, tmp_assign_source_10 );
    tmp_import_globals_7 = ((PyModuleObject *)module_pyasn1_modules$rfc2251)->md_dict;
    frame_module->f_lineno = 10;
    tmp_import_name_from_7 = IMPORT_MODULE( const_str_digest_7c8c58049edd248f8b1cb370445e702c, tmp_import_globals_7, tmp_import_globals_7, const_tuple_8d452a14c86d6dbde022d5740faa1c75_tuple, const_int_0 );
    if ( tmp_import_name_from_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 10;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_11 = IMPORT_NAME( tmp_import_name_from_7, const_str_plain_useful );
    Py_DECREF( tmp_import_name_from_7 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 10;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_useful, tmp_assign_source_11 );
    tmp_import_globals_8 = ((PyModuleObject *)module_pyasn1_modules$rfc2251)->md_dict;
    frame_module->f_lineno = 11;
    tmp_import_name_from_8 = IMPORT_MODULE( const_str_digest_989622ccef88eb949be48370a129282e, tmp_import_globals_8, tmp_import_globals_8, const_tuple_str_plain_decoder_str_plain_encoder_tuple, const_int_0 );
    if ( tmp_import_name_from_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 11;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_12 = IMPORT_NAME( tmp_import_name_from_8, const_str_plain_decoder );
    Py_DECREF( tmp_import_name_from_8 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 11;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_decoder, tmp_assign_source_12 );
    tmp_import_globals_9 = ((PyModuleObject *)module_pyasn1_modules$rfc2251)->md_dict;
    frame_module->f_lineno = 11;
    tmp_import_name_from_9 = IMPORT_MODULE( const_str_digest_989622ccef88eb949be48370a129282e, tmp_import_globals_9, tmp_import_globals_9, const_tuple_str_plain_decoder_str_plain_encoder_tuple, const_int_0 );
    if ( tmp_import_name_from_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 11;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_13 = IMPORT_NAME( tmp_import_name_from_9, const_str_plain_encoder );
    Py_DECREF( tmp_import_name_from_9 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 11;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_encoder, tmp_assign_source_13 );
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 13;
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_Integer );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 13;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = const_int_pos_2147483647;
    frame_module->f_lineno = 13;
    tmp_assign_source_14 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_name_1 );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 13;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_maxInt, tmp_assign_source_14 );
    // Tried code:
    tmp_assign_source_15 = PyTuple_New( 1 );
    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_2 == NULL )
    {
        Py_DECREF( tmp_assign_source_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 15;
        goto try_except_handler_1;
    }

    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_OctetString );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_15 );

        exception_lineno = 15;
        goto try_except_handler_1;
    }
    PyTuple_SET_ITEM( tmp_assign_source_15, 0, tmp_tuple_element_1 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_1__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_1__bases = tmp_assign_source_15;

    tmp_assign_source_16 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_1__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_1__class_decl_dict = tmp_assign_source_16;

    tmp_compare_left_1 = const_str_plain_metaclass;
    tmp_compare_right_1 = tmp_pyasn1_modules$rfc2251_class_creation_1__class_decl_dict;

    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    if ( tmp_cmp_In_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 15;
        goto try_except_handler_1;
    }
    if ( tmp_cmp_In_1 == 1 )
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_dget_dict_1 = tmp_pyasn1_modules$rfc2251_class_creation_1__class_decl_dict;

    tmp_dget_key_1 = const_str_plain_metaclass;
    tmp_class_meta_1 = DICT_GET_ITEM( tmp_dget_dict_1, tmp_dget_key_1 );
    if ( tmp_class_meta_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 15;
        goto try_except_handler_1;
    }
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_cond_value_1 = tmp_pyasn1_modules$rfc2251_class_creation_1__bases;

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 15;
        goto try_except_handler_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto condexpr_true_2;
    }
    else
    {
        goto condexpr_false_2;
    }
    condexpr_true_2:;
    tmp_subscribed_name_1 = tmp_pyasn1_modules$rfc2251_class_creation_1__bases;

    tmp_subscript_name_1 = const_int_0;
    tmp_type_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_type_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 15;
        goto try_except_handler_1;
    }
    tmp_class_meta_1 = BUILTIN_TYPE1( tmp_type_arg_1 );
    Py_DECREF( tmp_type_arg_1 );
    if ( tmp_class_meta_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 15;
        goto try_except_handler_1;
    }
    goto condexpr_end_2;
    condexpr_false_2:;
    tmp_class_meta_1 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_1 != NULL );
    Py_INCREF( tmp_class_meta_1 );
    condexpr_end_2:;
    condexpr_end_1:;
    tmp_class_bases_1 = tmp_pyasn1_modules$rfc2251_class_creation_1__bases;

    tmp_assign_source_17 = SELECT_METACLASS( tmp_class_meta_1, tmp_class_bases_1 );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_1 );

        exception_lineno = 15;
        goto try_except_handler_1;
    }
    Py_DECREF( tmp_class_meta_1 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_1__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_1__metaclass = tmp_assign_source_17;

    tmp_compare_left_2 = const_str_plain_metaclass;
    tmp_compare_right_2 = tmp_pyasn1_modules$rfc2251_class_creation_1__class_decl_dict;

    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_2, tmp_compare_left_2 );
    if ( tmp_cmp_In_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 15;
        goto try_except_handler_1;
    }
    if ( tmp_cmp_In_2 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_1__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 15;
        goto try_except_handler_1;
    }
    branch_no_1:;
    tmp_hasattr_source_1 = tmp_pyasn1_modules$rfc2251_class_creation_1__metaclass;

    tmp_hasattr_attr_1 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_1, tmp_hasattr_attr_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 15;
        goto try_except_handler_1;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_3;
    }
    else
    {
        goto condexpr_false_3;
    }
    condexpr_true_3:;
    tmp_source_name_3 = tmp_pyasn1_modules$rfc2251_class_creation_1__metaclass;

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain___prepare__ );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 15;
        goto try_except_handler_1;
    }
    tmp_args_name_1 = PyTuple_New( 2 );
    tmp_tuple_element_2 = const_str_plain_LDAPString;
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = tmp_pyasn1_modules$rfc2251_class_creation_1__bases;

    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_2 );
    tmp_kw_name_1 = tmp_pyasn1_modules$rfc2251_class_creation_1__class_decl_dict;

    frame_module->f_lineno = 15;
    tmp_assign_source_18 = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 15;
        goto try_except_handler_1;
    }
    goto condexpr_end_3;
    condexpr_false_3:;
    tmp_assign_source_18 = PyDict_New();
    condexpr_end_3:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_1__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_1__prepared = tmp_assign_source_18;

    tmp_assign_source_19 = impl_class_1_LDAPString_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_1__bases, tmp_pyasn1_modules$rfc2251_class_creation_1__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_1__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_1__prepared );
    if ( tmp_assign_source_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 15;
        goto try_except_handler_1;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPString, tmp_assign_source_19 );
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_1__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_1__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_1__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_1__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_1__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_1__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_1__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_1__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_1__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_1__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_1__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_1__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_1__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_1__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_1__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_1__prepared = NULL;

    // Tried code:
    tmp_assign_source_20 = PyTuple_New( 1 );
    tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_4 == NULL ))
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_4 == NULL )
    {
        Py_DECREF( tmp_assign_source_20 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 16;
        goto try_except_handler_2;
    }

    tmp_tuple_element_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_OctetString );
    if ( tmp_tuple_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_20 );

        exception_lineno = 16;
        goto try_except_handler_2;
    }
    PyTuple_SET_ITEM( tmp_assign_source_20, 0, tmp_tuple_element_3 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_2__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_2__bases = tmp_assign_source_20;

    tmp_assign_source_21 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_2__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_2__class_decl_dict = tmp_assign_source_21;

    tmp_compare_left_3 = const_str_plain_metaclass;
    tmp_compare_right_3 = tmp_pyasn1_modules$rfc2251_class_creation_2__class_decl_dict;

    tmp_cmp_In_3 = PySequence_Contains( tmp_compare_right_3, tmp_compare_left_3 );
    if ( tmp_cmp_In_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 16;
        goto try_except_handler_2;
    }
    if ( tmp_cmp_In_3 == 1 )
    {
        goto condexpr_true_4;
    }
    else
    {
        goto condexpr_false_4;
    }
    condexpr_true_4:;
    tmp_dget_dict_2 = tmp_pyasn1_modules$rfc2251_class_creation_2__class_decl_dict;

    tmp_dget_key_2 = const_str_plain_metaclass;
    tmp_class_meta_2 = DICT_GET_ITEM( tmp_dget_dict_2, tmp_dget_key_2 );
    if ( tmp_class_meta_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 16;
        goto try_except_handler_2;
    }
    goto condexpr_end_4;
    condexpr_false_4:;
    tmp_cond_value_2 = tmp_pyasn1_modules$rfc2251_class_creation_2__bases;

    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 16;
        goto try_except_handler_2;
    }
    if ( tmp_cond_truth_2 == 1 )
    {
        goto condexpr_true_5;
    }
    else
    {
        goto condexpr_false_5;
    }
    condexpr_true_5:;
    tmp_subscribed_name_2 = tmp_pyasn1_modules$rfc2251_class_creation_2__bases;

    tmp_subscript_name_2 = const_int_0;
    tmp_type_arg_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
    if ( tmp_type_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 16;
        goto try_except_handler_2;
    }
    tmp_class_meta_2 = BUILTIN_TYPE1( tmp_type_arg_2 );
    Py_DECREF( tmp_type_arg_2 );
    if ( tmp_class_meta_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 16;
        goto try_except_handler_2;
    }
    goto condexpr_end_5;
    condexpr_false_5:;
    tmp_class_meta_2 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_2 != NULL );
    Py_INCREF( tmp_class_meta_2 );
    condexpr_end_5:;
    condexpr_end_4:;
    tmp_class_bases_2 = tmp_pyasn1_modules$rfc2251_class_creation_2__bases;

    tmp_assign_source_22 = SELECT_METACLASS( tmp_class_meta_2, tmp_class_bases_2 );
    if ( tmp_assign_source_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_2 );

        exception_lineno = 16;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_class_meta_2 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_2__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_2__metaclass = tmp_assign_source_22;

    tmp_compare_left_4 = const_str_plain_metaclass;
    tmp_compare_right_4 = tmp_pyasn1_modules$rfc2251_class_creation_2__class_decl_dict;

    tmp_cmp_In_4 = PySequence_Contains( tmp_compare_right_4, tmp_compare_left_4 );
    if ( tmp_cmp_In_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 16;
        goto try_except_handler_2;
    }
    if ( tmp_cmp_In_4 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_2__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 16;
        goto try_except_handler_2;
    }
    branch_no_2:;
    tmp_hasattr_source_2 = tmp_pyasn1_modules$rfc2251_class_creation_2__metaclass;

    tmp_hasattr_attr_2 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_2, tmp_hasattr_attr_2 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 16;
        goto try_except_handler_2;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_6;
    }
    else
    {
        goto condexpr_false_6;
    }
    condexpr_true_6:;
    tmp_source_name_5 = tmp_pyasn1_modules$rfc2251_class_creation_2__metaclass;

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain___prepare__ );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 16;
        goto try_except_handler_2;
    }
    tmp_args_name_2 = PyTuple_New( 2 );
    tmp_tuple_element_4 = const_str_plain_LDAPOID;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_args_name_2, 0, tmp_tuple_element_4 );
    tmp_tuple_element_4 = tmp_pyasn1_modules$rfc2251_class_creation_2__bases;

    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_args_name_2, 1, tmp_tuple_element_4 );
    tmp_kw_name_2 = tmp_pyasn1_modules$rfc2251_class_creation_2__class_decl_dict;

    frame_module->f_lineno = 16;
    tmp_assign_source_23 = CALL_FUNCTION( tmp_called_name_3, tmp_args_name_2, tmp_kw_name_2 );
    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_name_2 );
    if ( tmp_assign_source_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 16;
        goto try_except_handler_2;
    }
    goto condexpr_end_6;
    condexpr_false_6:;
    tmp_assign_source_23 = PyDict_New();
    condexpr_end_6:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_2__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_2__prepared = tmp_assign_source_23;

    tmp_assign_source_24 = impl_class_2_LDAPOID_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_2__bases, tmp_pyasn1_modules$rfc2251_class_creation_2__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_2__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_2__prepared );
    if ( tmp_assign_source_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 16;
        goto try_except_handler_2;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPOID, tmp_assign_source_24 );
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_2__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_2__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_2__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_2__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_2__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_2__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_2__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_2__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_2__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_2__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_2__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_2__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_2__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_2__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_2__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_2__prepared = NULL;

    // Tried code:
    tmp_assign_source_25 = PyTuple_New( 1 );
    tmp_tuple_element_5 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPString );

    if (unlikely( tmp_tuple_element_5 == NULL ))
    {
        tmp_tuple_element_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPString );
    }

    if ( tmp_tuple_element_5 == NULL )
    {
        Py_DECREF( tmp_assign_source_25 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52505 ], 32, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 18;
        goto try_except_handler_3;
    }

    Py_INCREF( tmp_tuple_element_5 );
    PyTuple_SET_ITEM( tmp_assign_source_25, 0, tmp_tuple_element_5 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_3__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_3__bases = tmp_assign_source_25;

    tmp_assign_source_26 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_3__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_3__class_decl_dict = tmp_assign_source_26;

    tmp_compare_left_5 = const_str_plain_metaclass;
    tmp_compare_right_5 = tmp_pyasn1_modules$rfc2251_class_creation_3__class_decl_dict;

    tmp_cmp_In_5 = PySequence_Contains( tmp_compare_right_5, tmp_compare_left_5 );
    if ( tmp_cmp_In_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 18;
        goto try_except_handler_3;
    }
    if ( tmp_cmp_In_5 == 1 )
    {
        goto condexpr_true_7;
    }
    else
    {
        goto condexpr_false_7;
    }
    condexpr_true_7:;
    tmp_dget_dict_3 = tmp_pyasn1_modules$rfc2251_class_creation_3__class_decl_dict;

    tmp_dget_key_3 = const_str_plain_metaclass;
    tmp_class_meta_3 = DICT_GET_ITEM( tmp_dget_dict_3, tmp_dget_key_3 );
    if ( tmp_class_meta_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 18;
        goto try_except_handler_3;
    }
    goto condexpr_end_7;
    condexpr_false_7:;
    tmp_cond_value_3 = tmp_pyasn1_modules$rfc2251_class_creation_3__bases;

    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 18;
        goto try_except_handler_3;
    }
    if ( tmp_cond_truth_3 == 1 )
    {
        goto condexpr_true_8;
    }
    else
    {
        goto condexpr_false_8;
    }
    condexpr_true_8:;
    tmp_subscribed_name_3 = tmp_pyasn1_modules$rfc2251_class_creation_3__bases;

    tmp_subscript_name_3 = const_int_0;
    tmp_type_arg_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
    if ( tmp_type_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 18;
        goto try_except_handler_3;
    }
    tmp_class_meta_3 = BUILTIN_TYPE1( tmp_type_arg_3 );
    Py_DECREF( tmp_type_arg_3 );
    if ( tmp_class_meta_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 18;
        goto try_except_handler_3;
    }
    goto condexpr_end_8;
    condexpr_false_8:;
    tmp_class_meta_3 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_3 != NULL );
    Py_INCREF( tmp_class_meta_3 );
    condexpr_end_8:;
    condexpr_end_7:;
    tmp_class_bases_3 = tmp_pyasn1_modules$rfc2251_class_creation_3__bases;

    tmp_assign_source_27 = SELECT_METACLASS( tmp_class_meta_3, tmp_class_bases_3 );
    if ( tmp_assign_source_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_3 );

        exception_lineno = 18;
        goto try_except_handler_3;
    }
    Py_DECREF( tmp_class_meta_3 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_3__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_3__metaclass = tmp_assign_source_27;

    tmp_compare_left_6 = const_str_plain_metaclass;
    tmp_compare_right_6 = tmp_pyasn1_modules$rfc2251_class_creation_3__class_decl_dict;

    tmp_cmp_In_6 = PySequence_Contains( tmp_compare_right_6, tmp_compare_left_6 );
    if ( tmp_cmp_In_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 18;
        goto try_except_handler_3;
    }
    if ( tmp_cmp_In_6 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_3__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 18;
        goto try_except_handler_3;
    }
    branch_no_3:;
    tmp_hasattr_source_3 = tmp_pyasn1_modules$rfc2251_class_creation_3__metaclass;

    tmp_hasattr_attr_3 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_3, tmp_hasattr_attr_3 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 18;
        goto try_except_handler_3;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_9;
    }
    else
    {
        goto condexpr_false_9;
    }
    condexpr_true_9:;
    tmp_source_name_6 = tmp_pyasn1_modules$rfc2251_class_creation_3__metaclass;

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain___prepare__ );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 18;
        goto try_except_handler_3;
    }
    tmp_args_name_3 = PyTuple_New( 2 );
    tmp_tuple_element_6 = const_str_plain_LDAPDN;
    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_args_name_3, 0, tmp_tuple_element_6 );
    tmp_tuple_element_6 = tmp_pyasn1_modules$rfc2251_class_creation_3__bases;

    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_args_name_3, 1, tmp_tuple_element_6 );
    tmp_kw_name_3 = tmp_pyasn1_modules$rfc2251_class_creation_3__class_decl_dict;

    frame_module->f_lineno = 18;
    tmp_assign_source_28 = CALL_FUNCTION( tmp_called_name_4, tmp_args_name_3, tmp_kw_name_3 );
    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_args_name_3 );
    if ( tmp_assign_source_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 18;
        goto try_except_handler_3;
    }
    goto condexpr_end_9;
    condexpr_false_9:;
    tmp_assign_source_28 = PyDict_New();
    condexpr_end_9:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_3__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_3__prepared = tmp_assign_source_28;

    tmp_assign_source_29 = impl_class_3_LDAPDN_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_3__bases, tmp_pyasn1_modules$rfc2251_class_creation_3__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_3__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_3__prepared );
    if ( tmp_assign_source_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 18;
        goto try_except_handler_3;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPDN, tmp_assign_source_29 );
    goto try_end_3;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_3__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_3__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_3__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_3__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_3__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_3__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_3__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_3__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_3__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_3__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_3__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_3__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_3__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_3__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_3__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_3__prepared = NULL;

    // Tried code:
    tmp_assign_source_30 = PyTuple_New( 1 );
    tmp_tuple_element_7 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPString );

    if (unlikely( tmp_tuple_element_7 == NULL ))
    {
        tmp_tuple_element_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPString );
    }

    if ( tmp_tuple_element_7 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52505 ], 32, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 19;
        goto try_except_handler_4;
    }

    Py_INCREF( tmp_tuple_element_7 );
    PyTuple_SET_ITEM( tmp_assign_source_30, 0, tmp_tuple_element_7 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_4__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_4__bases = tmp_assign_source_30;

    tmp_assign_source_31 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_4__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_4__class_decl_dict = tmp_assign_source_31;

    tmp_compare_left_7 = const_str_plain_metaclass;
    tmp_compare_right_7 = tmp_pyasn1_modules$rfc2251_class_creation_4__class_decl_dict;

    tmp_cmp_In_7 = PySequence_Contains( tmp_compare_right_7, tmp_compare_left_7 );
    if ( tmp_cmp_In_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 19;
        goto try_except_handler_4;
    }
    if ( tmp_cmp_In_7 == 1 )
    {
        goto condexpr_true_10;
    }
    else
    {
        goto condexpr_false_10;
    }
    condexpr_true_10:;
    tmp_dget_dict_4 = tmp_pyasn1_modules$rfc2251_class_creation_4__class_decl_dict;

    tmp_dget_key_4 = const_str_plain_metaclass;
    tmp_class_meta_4 = DICT_GET_ITEM( tmp_dget_dict_4, tmp_dget_key_4 );
    if ( tmp_class_meta_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 19;
        goto try_except_handler_4;
    }
    goto condexpr_end_10;
    condexpr_false_10:;
    tmp_cond_value_4 = tmp_pyasn1_modules$rfc2251_class_creation_4__bases;

    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 19;
        goto try_except_handler_4;
    }
    if ( tmp_cond_truth_4 == 1 )
    {
        goto condexpr_true_11;
    }
    else
    {
        goto condexpr_false_11;
    }
    condexpr_true_11:;
    tmp_subscribed_name_4 = tmp_pyasn1_modules$rfc2251_class_creation_4__bases;

    tmp_subscript_name_4 = const_int_0;
    tmp_type_arg_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_4 );
    if ( tmp_type_arg_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 19;
        goto try_except_handler_4;
    }
    tmp_class_meta_4 = BUILTIN_TYPE1( tmp_type_arg_4 );
    Py_DECREF( tmp_type_arg_4 );
    if ( tmp_class_meta_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 19;
        goto try_except_handler_4;
    }
    goto condexpr_end_11;
    condexpr_false_11:;
    tmp_class_meta_4 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_4 != NULL );
    Py_INCREF( tmp_class_meta_4 );
    condexpr_end_11:;
    condexpr_end_10:;
    tmp_class_bases_4 = tmp_pyasn1_modules$rfc2251_class_creation_4__bases;

    tmp_assign_source_32 = SELECT_METACLASS( tmp_class_meta_4, tmp_class_bases_4 );
    if ( tmp_assign_source_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_4 );

        exception_lineno = 19;
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_class_meta_4 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_4__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_4__metaclass = tmp_assign_source_32;

    tmp_compare_left_8 = const_str_plain_metaclass;
    tmp_compare_right_8 = tmp_pyasn1_modules$rfc2251_class_creation_4__class_decl_dict;

    tmp_cmp_In_8 = PySequence_Contains( tmp_compare_right_8, tmp_compare_left_8 );
    if ( tmp_cmp_In_8 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 19;
        goto try_except_handler_4;
    }
    if ( tmp_cmp_In_8 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_4__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 19;
        goto try_except_handler_4;
    }
    branch_no_4:;
    tmp_hasattr_source_4 = tmp_pyasn1_modules$rfc2251_class_creation_4__metaclass;

    tmp_hasattr_attr_4 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_4, tmp_hasattr_attr_4 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 19;
        goto try_except_handler_4;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_12;
    }
    else
    {
        goto condexpr_false_12;
    }
    condexpr_true_12:;
    tmp_source_name_7 = tmp_pyasn1_modules$rfc2251_class_creation_4__metaclass;

    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain___prepare__ );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 19;
        goto try_except_handler_4;
    }
    tmp_args_name_4 = PyTuple_New( 2 );
    tmp_tuple_element_8 = const_str_plain_RelativeLDAPDN;
    Py_INCREF( tmp_tuple_element_8 );
    PyTuple_SET_ITEM( tmp_args_name_4, 0, tmp_tuple_element_8 );
    tmp_tuple_element_8 = tmp_pyasn1_modules$rfc2251_class_creation_4__bases;

    Py_INCREF( tmp_tuple_element_8 );
    PyTuple_SET_ITEM( tmp_args_name_4, 1, tmp_tuple_element_8 );
    tmp_kw_name_4 = tmp_pyasn1_modules$rfc2251_class_creation_4__class_decl_dict;

    frame_module->f_lineno = 19;
    tmp_assign_source_33 = CALL_FUNCTION( tmp_called_name_5, tmp_args_name_4, tmp_kw_name_4 );
    Py_DECREF( tmp_called_name_5 );
    Py_DECREF( tmp_args_name_4 );
    if ( tmp_assign_source_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 19;
        goto try_except_handler_4;
    }
    goto condexpr_end_12;
    condexpr_false_12:;
    tmp_assign_source_33 = PyDict_New();
    condexpr_end_12:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_4__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_4__prepared = tmp_assign_source_33;

    tmp_assign_source_34 = impl_class_4_RelativeLDAPDN_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_4__bases, tmp_pyasn1_modules$rfc2251_class_creation_4__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_4__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_4__prepared );
    if ( tmp_assign_source_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 19;
        goto try_except_handler_4;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_RelativeLDAPDN, tmp_assign_source_34 );
    goto try_end_4;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_4__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_4__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_4__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_4__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_4__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_4__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_4__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_4__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_4__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_4__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_4__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_4__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_4__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_4__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_4__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_4__prepared = NULL;

    // Tried code:
    tmp_assign_source_35 = PyTuple_New( 1 );
    tmp_tuple_element_9 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPString );

    if (unlikely( tmp_tuple_element_9 == NULL ))
    {
        tmp_tuple_element_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPString );
    }

    if ( tmp_tuple_element_9 == NULL )
    {
        Py_DECREF( tmp_assign_source_35 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52505 ], 32, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 20;
        goto try_except_handler_5;
    }

    Py_INCREF( tmp_tuple_element_9 );
    PyTuple_SET_ITEM( tmp_assign_source_35, 0, tmp_tuple_element_9 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_5__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_5__bases = tmp_assign_source_35;

    tmp_assign_source_36 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_5__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_5__class_decl_dict = tmp_assign_source_36;

    tmp_compare_left_9 = const_str_plain_metaclass;
    tmp_compare_right_9 = tmp_pyasn1_modules$rfc2251_class_creation_5__class_decl_dict;

    tmp_cmp_In_9 = PySequence_Contains( tmp_compare_right_9, tmp_compare_left_9 );
    if ( tmp_cmp_In_9 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 20;
        goto try_except_handler_5;
    }
    if ( tmp_cmp_In_9 == 1 )
    {
        goto condexpr_true_13;
    }
    else
    {
        goto condexpr_false_13;
    }
    condexpr_true_13:;
    tmp_dget_dict_5 = tmp_pyasn1_modules$rfc2251_class_creation_5__class_decl_dict;

    tmp_dget_key_5 = const_str_plain_metaclass;
    tmp_class_meta_5 = DICT_GET_ITEM( tmp_dget_dict_5, tmp_dget_key_5 );
    if ( tmp_class_meta_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 20;
        goto try_except_handler_5;
    }
    goto condexpr_end_13;
    condexpr_false_13:;
    tmp_cond_value_5 = tmp_pyasn1_modules$rfc2251_class_creation_5__bases;

    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 20;
        goto try_except_handler_5;
    }
    if ( tmp_cond_truth_5 == 1 )
    {
        goto condexpr_true_14;
    }
    else
    {
        goto condexpr_false_14;
    }
    condexpr_true_14:;
    tmp_subscribed_name_5 = tmp_pyasn1_modules$rfc2251_class_creation_5__bases;

    tmp_subscript_name_5 = const_int_0;
    tmp_type_arg_5 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_5, tmp_subscript_name_5 );
    if ( tmp_type_arg_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 20;
        goto try_except_handler_5;
    }
    tmp_class_meta_5 = BUILTIN_TYPE1( tmp_type_arg_5 );
    Py_DECREF( tmp_type_arg_5 );
    if ( tmp_class_meta_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 20;
        goto try_except_handler_5;
    }
    goto condexpr_end_14;
    condexpr_false_14:;
    tmp_class_meta_5 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_5 != NULL );
    Py_INCREF( tmp_class_meta_5 );
    condexpr_end_14:;
    condexpr_end_13:;
    tmp_class_bases_5 = tmp_pyasn1_modules$rfc2251_class_creation_5__bases;

    tmp_assign_source_37 = SELECT_METACLASS( tmp_class_meta_5, tmp_class_bases_5 );
    if ( tmp_assign_source_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_5 );

        exception_lineno = 20;
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_class_meta_5 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_5__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_5__metaclass = tmp_assign_source_37;

    tmp_compare_left_10 = const_str_plain_metaclass;
    tmp_compare_right_10 = tmp_pyasn1_modules$rfc2251_class_creation_5__class_decl_dict;

    tmp_cmp_In_10 = PySequence_Contains( tmp_compare_right_10, tmp_compare_left_10 );
    if ( tmp_cmp_In_10 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 20;
        goto try_except_handler_5;
    }
    if ( tmp_cmp_In_10 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_5__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 20;
        goto try_except_handler_5;
    }
    branch_no_5:;
    tmp_hasattr_source_5 = tmp_pyasn1_modules$rfc2251_class_creation_5__metaclass;

    tmp_hasattr_attr_5 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_5, tmp_hasattr_attr_5 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 20;
        goto try_except_handler_5;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_15;
    }
    else
    {
        goto condexpr_false_15;
    }
    condexpr_true_15:;
    tmp_source_name_8 = tmp_pyasn1_modules$rfc2251_class_creation_5__metaclass;

    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain___prepare__ );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 20;
        goto try_except_handler_5;
    }
    tmp_args_name_5 = PyTuple_New( 2 );
    tmp_tuple_element_10 = const_str_plain_AttributeType;
    Py_INCREF( tmp_tuple_element_10 );
    PyTuple_SET_ITEM( tmp_args_name_5, 0, tmp_tuple_element_10 );
    tmp_tuple_element_10 = tmp_pyasn1_modules$rfc2251_class_creation_5__bases;

    Py_INCREF( tmp_tuple_element_10 );
    PyTuple_SET_ITEM( tmp_args_name_5, 1, tmp_tuple_element_10 );
    tmp_kw_name_5 = tmp_pyasn1_modules$rfc2251_class_creation_5__class_decl_dict;

    frame_module->f_lineno = 20;
    tmp_assign_source_38 = CALL_FUNCTION( tmp_called_name_6, tmp_args_name_5, tmp_kw_name_5 );
    Py_DECREF( tmp_called_name_6 );
    Py_DECREF( tmp_args_name_5 );
    if ( tmp_assign_source_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 20;
        goto try_except_handler_5;
    }
    goto condexpr_end_15;
    condexpr_false_15:;
    tmp_assign_source_38 = PyDict_New();
    condexpr_end_15:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_5__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_5__prepared = tmp_assign_source_38;

    tmp_assign_source_39 = impl_class_5_AttributeType_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_5__bases, tmp_pyasn1_modules$rfc2251_class_creation_5__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_5__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_5__prepared );
    if ( tmp_assign_source_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 20;
        goto try_except_handler_5;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeType, tmp_assign_source_39 );
    goto try_end_5;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_5__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_5__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_5__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_5__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_5__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_5__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_5__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_5__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_5__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_5__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_5__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_5__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_5__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_5__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_5__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_5__prepared = NULL;

    // Tried code:
    tmp_assign_source_40 = PyTuple_New( 1 );
    tmp_tuple_element_11 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPString );

    if (unlikely( tmp_tuple_element_11 == NULL ))
    {
        tmp_tuple_element_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPString );
    }

    if ( tmp_tuple_element_11 == NULL )
    {
        Py_DECREF( tmp_assign_source_40 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52505 ], 32, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 21;
        goto try_except_handler_6;
    }

    Py_INCREF( tmp_tuple_element_11 );
    PyTuple_SET_ITEM( tmp_assign_source_40, 0, tmp_tuple_element_11 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_6__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_6__bases = tmp_assign_source_40;

    tmp_assign_source_41 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_6__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_6__class_decl_dict = tmp_assign_source_41;

    tmp_compare_left_11 = const_str_plain_metaclass;
    tmp_compare_right_11 = tmp_pyasn1_modules$rfc2251_class_creation_6__class_decl_dict;

    tmp_cmp_In_11 = PySequence_Contains( tmp_compare_right_11, tmp_compare_left_11 );
    if ( tmp_cmp_In_11 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 21;
        goto try_except_handler_6;
    }
    if ( tmp_cmp_In_11 == 1 )
    {
        goto condexpr_true_16;
    }
    else
    {
        goto condexpr_false_16;
    }
    condexpr_true_16:;
    tmp_dget_dict_6 = tmp_pyasn1_modules$rfc2251_class_creation_6__class_decl_dict;

    tmp_dget_key_6 = const_str_plain_metaclass;
    tmp_class_meta_6 = DICT_GET_ITEM( tmp_dget_dict_6, tmp_dget_key_6 );
    if ( tmp_class_meta_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 21;
        goto try_except_handler_6;
    }
    goto condexpr_end_16;
    condexpr_false_16:;
    tmp_cond_value_6 = tmp_pyasn1_modules$rfc2251_class_creation_6__bases;

    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 21;
        goto try_except_handler_6;
    }
    if ( tmp_cond_truth_6 == 1 )
    {
        goto condexpr_true_17;
    }
    else
    {
        goto condexpr_false_17;
    }
    condexpr_true_17:;
    tmp_subscribed_name_6 = tmp_pyasn1_modules$rfc2251_class_creation_6__bases;

    tmp_subscript_name_6 = const_int_0;
    tmp_type_arg_6 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_6, tmp_subscript_name_6 );
    if ( tmp_type_arg_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 21;
        goto try_except_handler_6;
    }
    tmp_class_meta_6 = BUILTIN_TYPE1( tmp_type_arg_6 );
    Py_DECREF( tmp_type_arg_6 );
    if ( tmp_class_meta_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 21;
        goto try_except_handler_6;
    }
    goto condexpr_end_17;
    condexpr_false_17:;
    tmp_class_meta_6 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_6 != NULL );
    Py_INCREF( tmp_class_meta_6 );
    condexpr_end_17:;
    condexpr_end_16:;
    tmp_class_bases_6 = tmp_pyasn1_modules$rfc2251_class_creation_6__bases;

    tmp_assign_source_42 = SELECT_METACLASS( tmp_class_meta_6, tmp_class_bases_6 );
    if ( tmp_assign_source_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_6 );

        exception_lineno = 21;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_class_meta_6 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_6__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_6__metaclass = tmp_assign_source_42;

    tmp_compare_left_12 = const_str_plain_metaclass;
    tmp_compare_right_12 = tmp_pyasn1_modules$rfc2251_class_creation_6__class_decl_dict;

    tmp_cmp_In_12 = PySequence_Contains( tmp_compare_right_12, tmp_compare_left_12 );
    if ( tmp_cmp_In_12 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 21;
        goto try_except_handler_6;
    }
    if ( tmp_cmp_In_12 == 1 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_6__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 21;
        goto try_except_handler_6;
    }
    branch_no_6:;
    tmp_hasattr_source_6 = tmp_pyasn1_modules$rfc2251_class_creation_6__metaclass;

    tmp_hasattr_attr_6 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_6, tmp_hasattr_attr_6 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 21;
        goto try_except_handler_6;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_18;
    }
    else
    {
        goto condexpr_false_18;
    }
    condexpr_true_18:;
    tmp_source_name_9 = tmp_pyasn1_modules$rfc2251_class_creation_6__metaclass;

    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain___prepare__ );
    if ( tmp_called_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 21;
        goto try_except_handler_6;
    }
    tmp_args_name_6 = PyTuple_New( 2 );
    tmp_tuple_element_12 = const_str_plain_AttributeDescription;
    Py_INCREF( tmp_tuple_element_12 );
    PyTuple_SET_ITEM( tmp_args_name_6, 0, tmp_tuple_element_12 );
    tmp_tuple_element_12 = tmp_pyasn1_modules$rfc2251_class_creation_6__bases;

    Py_INCREF( tmp_tuple_element_12 );
    PyTuple_SET_ITEM( tmp_args_name_6, 1, tmp_tuple_element_12 );
    tmp_kw_name_6 = tmp_pyasn1_modules$rfc2251_class_creation_6__class_decl_dict;

    frame_module->f_lineno = 21;
    tmp_assign_source_43 = CALL_FUNCTION( tmp_called_name_7, tmp_args_name_6, tmp_kw_name_6 );
    Py_DECREF( tmp_called_name_7 );
    Py_DECREF( tmp_args_name_6 );
    if ( tmp_assign_source_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 21;
        goto try_except_handler_6;
    }
    goto condexpr_end_18;
    condexpr_false_18:;
    tmp_assign_source_43 = PyDict_New();
    condexpr_end_18:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_6__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_6__prepared = tmp_assign_source_43;

    tmp_assign_source_44 = impl_class_6_AttributeDescription_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_6__bases, tmp_pyasn1_modules$rfc2251_class_creation_6__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_6__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_6__prepared );
    if ( tmp_assign_source_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 21;
        goto try_except_handler_6;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeDescription, tmp_assign_source_44 );
    goto try_end_6;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_6__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_6__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_6__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_6__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_6__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_6__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_6__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_6__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_6__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_6__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_6__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_6__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_6__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_6__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_6__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_6__prepared = NULL;

    // Tried code:
    tmp_assign_source_45 = PyTuple_New( 1 );
    tmp_source_name_10 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_10 == NULL ))
    {
        tmp_source_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_10 == NULL )
    {
        Py_DECREF( tmp_assign_source_45 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 23;
        goto try_except_handler_7;
    }

    tmp_tuple_element_13 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_SequenceOf );
    if ( tmp_tuple_element_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_45 );

        exception_lineno = 23;
        goto try_except_handler_7;
    }
    PyTuple_SET_ITEM( tmp_assign_source_45, 0, tmp_tuple_element_13 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_7__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_7__bases = tmp_assign_source_45;

    tmp_assign_source_46 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_7__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_7__class_decl_dict = tmp_assign_source_46;

    tmp_compare_left_13 = const_str_plain_metaclass;
    tmp_compare_right_13 = tmp_pyasn1_modules$rfc2251_class_creation_7__class_decl_dict;

    tmp_cmp_In_13 = PySequence_Contains( tmp_compare_right_13, tmp_compare_left_13 );
    if ( tmp_cmp_In_13 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 23;
        goto try_except_handler_7;
    }
    if ( tmp_cmp_In_13 == 1 )
    {
        goto condexpr_true_19;
    }
    else
    {
        goto condexpr_false_19;
    }
    condexpr_true_19:;
    tmp_dget_dict_7 = tmp_pyasn1_modules$rfc2251_class_creation_7__class_decl_dict;

    tmp_dget_key_7 = const_str_plain_metaclass;
    tmp_class_meta_7 = DICT_GET_ITEM( tmp_dget_dict_7, tmp_dget_key_7 );
    if ( tmp_class_meta_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 23;
        goto try_except_handler_7;
    }
    goto condexpr_end_19;
    condexpr_false_19:;
    tmp_cond_value_7 = tmp_pyasn1_modules$rfc2251_class_creation_7__bases;

    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 23;
        goto try_except_handler_7;
    }
    if ( tmp_cond_truth_7 == 1 )
    {
        goto condexpr_true_20;
    }
    else
    {
        goto condexpr_false_20;
    }
    condexpr_true_20:;
    tmp_subscribed_name_7 = tmp_pyasn1_modules$rfc2251_class_creation_7__bases;

    tmp_subscript_name_7 = const_int_0;
    tmp_type_arg_7 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_7, tmp_subscript_name_7 );
    if ( tmp_type_arg_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 23;
        goto try_except_handler_7;
    }
    tmp_class_meta_7 = BUILTIN_TYPE1( tmp_type_arg_7 );
    Py_DECREF( tmp_type_arg_7 );
    if ( tmp_class_meta_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 23;
        goto try_except_handler_7;
    }
    goto condexpr_end_20;
    condexpr_false_20:;
    tmp_class_meta_7 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_7 != NULL );
    Py_INCREF( tmp_class_meta_7 );
    condexpr_end_20:;
    condexpr_end_19:;
    tmp_class_bases_7 = tmp_pyasn1_modules$rfc2251_class_creation_7__bases;

    tmp_assign_source_47 = SELECT_METACLASS( tmp_class_meta_7, tmp_class_bases_7 );
    if ( tmp_assign_source_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_7 );

        exception_lineno = 23;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_class_meta_7 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_7__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_7__metaclass = tmp_assign_source_47;

    tmp_compare_left_14 = const_str_plain_metaclass;
    tmp_compare_right_14 = tmp_pyasn1_modules$rfc2251_class_creation_7__class_decl_dict;

    tmp_cmp_In_14 = PySequence_Contains( tmp_compare_right_14, tmp_compare_left_14 );
    if ( tmp_cmp_In_14 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 23;
        goto try_except_handler_7;
    }
    if ( tmp_cmp_In_14 == 1 )
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_7__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 23;
        goto try_except_handler_7;
    }
    branch_no_7:;
    tmp_hasattr_source_7 = tmp_pyasn1_modules$rfc2251_class_creation_7__metaclass;

    tmp_hasattr_attr_7 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_7, tmp_hasattr_attr_7 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 23;
        goto try_except_handler_7;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_21;
    }
    else
    {
        goto condexpr_false_21;
    }
    condexpr_true_21:;
    tmp_source_name_11 = tmp_pyasn1_modules$rfc2251_class_creation_7__metaclass;

    tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain___prepare__ );
    if ( tmp_called_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 23;
        goto try_except_handler_7;
    }
    tmp_args_name_7 = PyTuple_New( 2 );
    tmp_tuple_element_14 = const_str_plain_AttributeDescriptionList;
    Py_INCREF( tmp_tuple_element_14 );
    PyTuple_SET_ITEM( tmp_args_name_7, 0, tmp_tuple_element_14 );
    tmp_tuple_element_14 = tmp_pyasn1_modules$rfc2251_class_creation_7__bases;

    Py_INCREF( tmp_tuple_element_14 );
    PyTuple_SET_ITEM( tmp_args_name_7, 1, tmp_tuple_element_14 );
    tmp_kw_name_7 = tmp_pyasn1_modules$rfc2251_class_creation_7__class_decl_dict;

    frame_module->f_lineno = 23;
    tmp_assign_source_48 = CALL_FUNCTION( tmp_called_name_8, tmp_args_name_7, tmp_kw_name_7 );
    Py_DECREF( tmp_called_name_8 );
    Py_DECREF( tmp_args_name_7 );
    if ( tmp_assign_source_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 23;
        goto try_except_handler_7;
    }
    goto condexpr_end_21;
    condexpr_false_21:;
    tmp_assign_source_48 = PyDict_New();
    condexpr_end_21:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_7__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_7__prepared = tmp_assign_source_48;

    tmp_assign_source_49 = impl_class_7_AttributeDescriptionList_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_7__bases, tmp_pyasn1_modules$rfc2251_class_creation_7__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_7__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_7__prepared );
    if ( tmp_assign_source_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 23;
        goto try_except_handler_7;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeDescriptionList, tmp_assign_source_49 );
    goto try_end_7;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_7__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_7__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_7__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_7__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_7__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_7__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_7__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_7__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_7__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_7__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_7__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_7__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_7__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_7__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_7__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_7__prepared = NULL;

    // Tried code:
    tmp_assign_source_50 = PyTuple_New( 1 );
    tmp_source_name_12 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_12 == NULL ))
    {
        tmp_source_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_12 == NULL )
    {
        Py_DECREF( tmp_assign_source_50 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 26;
        goto try_except_handler_8;
    }

    tmp_tuple_element_15 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_OctetString );
    if ( tmp_tuple_element_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_50 );

        exception_lineno = 26;
        goto try_except_handler_8;
    }
    PyTuple_SET_ITEM( tmp_assign_source_50, 0, tmp_tuple_element_15 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_8__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_8__bases = tmp_assign_source_50;

    tmp_assign_source_51 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_8__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_8__class_decl_dict = tmp_assign_source_51;

    tmp_compare_left_15 = const_str_plain_metaclass;
    tmp_compare_right_15 = tmp_pyasn1_modules$rfc2251_class_creation_8__class_decl_dict;

    tmp_cmp_In_15 = PySequence_Contains( tmp_compare_right_15, tmp_compare_left_15 );
    if ( tmp_cmp_In_15 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 26;
        goto try_except_handler_8;
    }
    if ( tmp_cmp_In_15 == 1 )
    {
        goto condexpr_true_22;
    }
    else
    {
        goto condexpr_false_22;
    }
    condexpr_true_22:;
    tmp_dget_dict_8 = tmp_pyasn1_modules$rfc2251_class_creation_8__class_decl_dict;

    tmp_dget_key_8 = const_str_plain_metaclass;
    tmp_class_meta_8 = DICT_GET_ITEM( tmp_dget_dict_8, tmp_dget_key_8 );
    if ( tmp_class_meta_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 26;
        goto try_except_handler_8;
    }
    goto condexpr_end_22;
    condexpr_false_22:;
    tmp_cond_value_8 = tmp_pyasn1_modules$rfc2251_class_creation_8__bases;

    tmp_cond_truth_8 = CHECK_IF_TRUE( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 26;
        goto try_except_handler_8;
    }
    if ( tmp_cond_truth_8 == 1 )
    {
        goto condexpr_true_23;
    }
    else
    {
        goto condexpr_false_23;
    }
    condexpr_true_23:;
    tmp_subscribed_name_8 = tmp_pyasn1_modules$rfc2251_class_creation_8__bases;

    tmp_subscript_name_8 = const_int_0;
    tmp_type_arg_8 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_8, tmp_subscript_name_8 );
    if ( tmp_type_arg_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 26;
        goto try_except_handler_8;
    }
    tmp_class_meta_8 = BUILTIN_TYPE1( tmp_type_arg_8 );
    Py_DECREF( tmp_type_arg_8 );
    if ( tmp_class_meta_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 26;
        goto try_except_handler_8;
    }
    goto condexpr_end_23;
    condexpr_false_23:;
    tmp_class_meta_8 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_8 != NULL );
    Py_INCREF( tmp_class_meta_8 );
    condexpr_end_23:;
    condexpr_end_22:;
    tmp_class_bases_8 = tmp_pyasn1_modules$rfc2251_class_creation_8__bases;

    tmp_assign_source_52 = SELECT_METACLASS( tmp_class_meta_8, tmp_class_bases_8 );
    if ( tmp_assign_source_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_8 );

        exception_lineno = 26;
        goto try_except_handler_8;
    }
    Py_DECREF( tmp_class_meta_8 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_8__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_8__metaclass = tmp_assign_source_52;

    tmp_compare_left_16 = const_str_plain_metaclass;
    tmp_compare_right_16 = tmp_pyasn1_modules$rfc2251_class_creation_8__class_decl_dict;

    tmp_cmp_In_16 = PySequence_Contains( tmp_compare_right_16, tmp_compare_left_16 );
    if ( tmp_cmp_In_16 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 26;
        goto try_except_handler_8;
    }
    if ( tmp_cmp_In_16 == 1 )
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_8__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 26;
        goto try_except_handler_8;
    }
    branch_no_8:;
    tmp_hasattr_source_8 = tmp_pyasn1_modules$rfc2251_class_creation_8__metaclass;

    tmp_hasattr_attr_8 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_8, tmp_hasattr_attr_8 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 26;
        goto try_except_handler_8;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_24;
    }
    else
    {
        goto condexpr_false_24;
    }
    condexpr_true_24:;
    tmp_source_name_13 = tmp_pyasn1_modules$rfc2251_class_creation_8__metaclass;

    tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain___prepare__ );
    if ( tmp_called_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 26;
        goto try_except_handler_8;
    }
    tmp_args_name_8 = PyTuple_New( 2 );
    tmp_tuple_element_16 = const_str_plain_AttributeValue;
    Py_INCREF( tmp_tuple_element_16 );
    PyTuple_SET_ITEM( tmp_args_name_8, 0, tmp_tuple_element_16 );
    tmp_tuple_element_16 = tmp_pyasn1_modules$rfc2251_class_creation_8__bases;

    Py_INCREF( tmp_tuple_element_16 );
    PyTuple_SET_ITEM( tmp_args_name_8, 1, tmp_tuple_element_16 );
    tmp_kw_name_8 = tmp_pyasn1_modules$rfc2251_class_creation_8__class_decl_dict;

    frame_module->f_lineno = 26;
    tmp_assign_source_53 = CALL_FUNCTION( tmp_called_name_9, tmp_args_name_8, tmp_kw_name_8 );
    Py_DECREF( tmp_called_name_9 );
    Py_DECREF( tmp_args_name_8 );
    if ( tmp_assign_source_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 26;
        goto try_except_handler_8;
    }
    goto condexpr_end_24;
    condexpr_false_24:;
    tmp_assign_source_53 = PyDict_New();
    condexpr_end_24:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_8__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_8__prepared = tmp_assign_source_53;

    tmp_assign_source_54 = impl_class_8_AttributeValue_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_8__bases, tmp_pyasn1_modules$rfc2251_class_creation_8__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_8__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_8__prepared );
    if ( tmp_assign_source_54 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 26;
        goto try_except_handler_8;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeValue, tmp_assign_source_54 );
    goto try_end_8;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_8__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_8__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_8__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_8__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_8__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_8__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_8__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_8__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto frame_exception_exit_1;
    // End of try:
    try_end_8:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_8__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_8__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_8__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_8__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_8__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_8__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_8__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_8__prepared = NULL;

    // Tried code:
    tmp_assign_source_55 = PyTuple_New( 1 );
    tmp_source_name_14 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_14 == NULL ))
    {
        tmp_source_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_14 == NULL )
    {
        Py_DECREF( tmp_assign_source_55 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 28;
        goto try_except_handler_9;
    }

    tmp_tuple_element_17 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_OctetString );
    if ( tmp_tuple_element_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_55 );

        exception_lineno = 28;
        goto try_except_handler_9;
    }
    PyTuple_SET_ITEM( tmp_assign_source_55, 0, tmp_tuple_element_17 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_9__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_9__bases = tmp_assign_source_55;

    tmp_assign_source_56 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_9__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_9__class_decl_dict = tmp_assign_source_56;

    tmp_compare_left_17 = const_str_plain_metaclass;
    tmp_compare_right_17 = tmp_pyasn1_modules$rfc2251_class_creation_9__class_decl_dict;

    tmp_cmp_In_17 = PySequence_Contains( tmp_compare_right_17, tmp_compare_left_17 );
    if ( tmp_cmp_In_17 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 28;
        goto try_except_handler_9;
    }
    if ( tmp_cmp_In_17 == 1 )
    {
        goto condexpr_true_25;
    }
    else
    {
        goto condexpr_false_25;
    }
    condexpr_true_25:;
    tmp_dget_dict_9 = tmp_pyasn1_modules$rfc2251_class_creation_9__class_decl_dict;

    tmp_dget_key_9 = const_str_plain_metaclass;
    tmp_class_meta_9 = DICT_GET_ITEM( tmp_dget_dict_9, tmp_dget_key_9 );
    if ( tmp_class_meta_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 28;
        goto try_except_handler_9;
    }
    goto condexpr_end_25;
    condexpr_false_25:;
    tmp_cond_value_9 = tmp_pyasn1_modules$rfc2251_class_creation_9__bases;

    tmp_cond_truth_9 = CHECK_IF_TRUE( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 28;
        goto try_except_handler_9;
    }
    if ( tmp_cond_truth_9 == 1 )
    {
        goto condexpr_true_26;
    }
    else
    {
        goto condexpr_false_26;
    }
    condexpr_true_26:;
    tmp_subscribed_name_9 = tmp_pyasn1_modules$rfc2251_class_creation_9__bases;

    tmp_subscript_name_9 = const_int_0;
    tmp_type_arg_9 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_9, tmp_subscript_name_9 );
    if ( tmp_type_arg_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 28;
        goto try_except_handler_9;
    }
    tmp_class_meta_9 = BUILTIN_TYPE1( tmp_type_arg_9 );
    Py_DECREF( tmp_type_arg_9 );
    if ( tmp_class_meta_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 28;
        goto try_except_handler_9;
    }
    goto condexpr_end_26;
    condexpr_false_26:;
    tmp_class_meta_9 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_9 != NULL );
    Py_INCREF( tmp_class_meta_9 );
    condexpr_end_26:;
    condexpr_end_25:;
    tmp_class_bases_9 = tmp_pyasn1_modules$rfc2251_class_creation_9__bases;

    tmp_assign_source_57 = SELECT_METACLASS( tmp_class_meta_9, tmp_class_bases_9 );
    if ( tmp_assign_source_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_9 );

        exception_lineno = 28;
        goto try_except_handler_9;
    }
    Py_DECREF( tmp_class_meta_9 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_9__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_9__metaclass = tmp_assign_source_57;

    tmp_compare_left_18 = const_str_plain_metaclass;
    tmp_compare_right_18 = tmp_pyasn1_modules$rfc2251_class_creation_9__class_decl_dict;

    tmp_cmp_In_18 = PySequence_Contains( tmp_compare_right_18, tmp_compare_left_18 );
    if ( tmp_cmp_In_18 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 28;
        goto try_except_handler_9;
    }
    if ( tmp_cmp_In_18 == 1 )
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_9__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 28;
        goto try_except_handler_9;
    }
    branch_no_9:;
    tmp_hasattr_source_9 = tmp_pyasn1_modules$rfc2251_class_creation_9__metaclass;

    tmp_hasattr_attr_9 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_9, tmp_hasattr_attr_9 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 28;
        goto try_except_handler_9;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_27;
    }
    else
    {
        goto condexpr_false_27;
    }
    condexpr_true_27:;
    tmp_source_name_15 = tmp_pyasn1_modules$rfc2251_class_creation_9__metaclass;

    tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain___prepare__ );
    if ( tmp_called_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 28;
        goto try_except_handler_9;
    }
    tmp_args_name_9 = PyTuple_New( 2 );
    tmp_tuple_element_18 = const_str_plain_AssertionValue;
    Py_INCREF( tmp_tuple_element_18 );
    PyTuple_SET_ITEM( tmp_args_name_9, 0, tmp_tuple_element_18 );
    tmp_tuple_element_18 = tmp_pyasn1_modules$rfc2251_class_creation_9__bases;

    Py_INCREF( tmp_tuple_element_18 );
    PyTuple_SET_ITEM( tmp_args_name_9, 1, tmp_tuple_element_18 );
    tmp_kw_name_9 = tmp_pyasn1_modules$rfc2251_class_creation_9__class_decl_dict;

    frame_module->f_lineno = 28;
    tmp_assign_source_58 = CALL_FUNCTION( tmp_called_name_10, tmp_args_name_9, tmp_kw_name_9 );
    Py_DECREF( tmp_called_name_10 );
    Py_DECREF( tmp_args_name_9 );
    if ( tmp_assign_source_58 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 28;
        goto try_except_handler_9;
    }
    goto condexpr_end_27;
    condexpr_false_27:;
    tmp_assign_source_58 = PyDict_New();
    condexpr_end_27:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_9__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_9__prepared = tmp_assign_source_58;

    tmp_assign_source_59 = impl_class_9_AssertionValue_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_9__bases, tmp_pyasn1_modules$rfc2251_class_creation_9__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_9__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_9__prepared );
    if ( tmp_assign_source_59 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 28;
        goto try_except_handler_9;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AssertionValue, tmp_assign_source_59 );
    goto try_end_9;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_9__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_9__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_9__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_9__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_9__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_9__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_9__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_9__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto frame_exception_exit_1;
    // End of try:
    try_end_9:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_9__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_9__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_9__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_9__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_9__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_9__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_9__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_9__prepared = NULL;

    // Tried code:
    tmp_assign_source_60 = PyTuple_New( 1 );
    tmp_source_name_16 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_16 == NULL ))
    {
        tmp_source_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_16 == NULL )
    {
        Py_DECREF( tmp_assign_source_60 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 30;
        goto try_except_handler_10;
    }

    tmp_tuple_element_19 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_Sequence );
    if ( tmp_tuple_element_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_60 );

        exception_lineno = 30;
        goto try_except_handler_10;
    }
    PyTuple_SET_ITEM( tmp_assign_source_60, 0, tmp_tuple_element_19 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_10__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_10__bases = tmp_assign_source_60;

    tmp_assign_source_61 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_10__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_10__class_decl_dict = tmp_assign_source_61;

    tmp_compare_left_19 = const_str_plain_metaclass;
    tmp_compare_right_19 = tmp_pyasn1_modules$rfc2251_class_creation_10__class_decl_dict;

    tmp_cmp_In_19 = PySequence_Contains( tmp_compare_right_19, tmp_compare_left_19 );
    if ( tmp_cmp_In_19 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 30;
        goto try_except_handler_10;
    }
    if ( tmp_cmp_In_19 == 1 )
    {
        goto condexpr_true_28;
    }
    else
    {
        goto condexpr_false_28;
    }
    condexpr_true_28:;
    tmp_dget_dict_10 = tmp_pyasn1_modules$rfc2251_class_creation_10__class_decl_dict;

    tmp_dget_key_10 = const_str_plain_metaclass;
    tmp_class_meta_10 = DICT_GET_ITEM( tmp_dget_dict_10, tmp_dget_key_10 );
    if ( tmp_class_meta_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 30;
        goto try_except_handler_10;
    }
    goto condexpr_end_28;
    condexpr_false_28:;
    tmp_cond_value_10 = tmp_pyasn1_modules$rfc2251_class_creation_10__bases;

    tmp_cond_truth_10 = CHECK_IF_TRUE( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 30;
        goto try_except_handler_10;
    }
    if ( tmp_cond_truth_10 == 1 )
    {
        goto condexpr_true_29;
    }
    else
    {
        goto condexpr_false_29;
    }
    condexpr_true_29:;
    tmp_subscribed_name_10 = tmp_pyasn1_modules$rfc2251_class_creation_10__bases;

    tmp_subscript_name_10 = const_int_0;
    tmp_type_arg_10 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_10, tmp_subscript_name_10 );
    if ( tmp_type_arg_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 30;
        goto try_except_handler_10;
    }
    tmp_class_meta_10 = BUILTIN_TYPE1( tmp_type_arg_10 );
    Py_DECREF( tmp_type_arg_10 );
    if ( tmp_class_meta_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 30;
        goto try_except_handler_10;
    }
    goto condexpr_end_29;
    condexpr_false_29:;
    tmp_class_meta_10 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_10 != NULL );
    Py_INCREF( tmp_class_meta_10 );
    condexpr_end_29:;
    condexpr_end_28:;
    tmp_class_bases_10 = tmp_pyasn1_modules$rfc2251_class_creation_10__bases;

    tmp_assign_source_62 = SELECT_METACLASS( tmp_class_meta_10, tmp_class_bases_10 );
    if ( tmp_assign_source_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_10 );

        exception_lineno = 30;
        goto try_except_handler_10;
    }
    Py_DECREF( tmp_class_meta_10 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_10__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_10__metaclass = tmp_assign_source_62;

    tmp_compare_left_20 = const_str_plain_metaclass;
    tmp_compare_right_20 = tmp_pyasn1_modules$rfc2251_class_creation_10__class_decl_dict;

    tmp_cmp_In_20 = PySequence_Contains( tmp_compare_right_20, tmp_compare_left_20 );
    if ( tmp_cmp_In_20 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 30;
        goto try_except_handler_10;
    }
    if ( tmp_cmp_In_20 == 1 )
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_10__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 30;
        goto try_except_handler_10;
    }
    branch_no_10:;
    tmp_hasattr_source_10 = tmp_pyasn1_modules$rfc2251_class_creation_10__metaclass;

    tmp_hasattr_attr_10 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_10, tmp_hasattr_attr_10 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 30;
        goto try_except_handler_10;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_30;
    }
    else
    {
        goto condexpr_false_30;
    }
    condexpr_true_30:;
    tmp_source_name_17 = tmp_pyasn1_modules$rfc2251_class_creation_10__metaclass;

    tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain___prepare__ );
    if ( tmp_called_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 30;
        goto try_except_handler_10;
    }
    tmp_args_name_10 = PyTuple_New( 2 );
    tmp_tuple_element_20 = const_str_plain_AttributeValueAssertion;
    Py_INCREF( tmp_tuple_element_20 );
    PyTuple_SET_ITEM( tmp_args_name_10, 0, tmp_tuple_element_20 );
    tmp_tuple_element_20 = tmp_pyasn1_modules$rfc2251_class_creation_10__bases;

    Py_INCREF( tmp_tuple_element_20 );
    PyTuple_SET_ITEM( tmp_args_name_10, 1, tmp_tuple_element_20 );
    tmp_kw_name_10 = tmp_pyasn1_modules$rfc2251_class_creation_10__class_decl_dict;

    frame_module->f_lineno = 30;
    tmp_assign_source_63 = CALL_FUNCTION( tmp_called_name_11, tmp_args_name_10, tmp_kw_name_10 );
    Py_DECREF( tmp_called_name_11 );
    Py_DECREF( tmp_args_name_10 );
    if ( tmp_assign_source_63 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 30;
        goto try_except_handler_10;
    }
    goto condexpr_end_30;
    condexpr_false_30:;
    tmp_assign_source_63 = PyDict_New();
    condexpr_end_30:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_10__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_10__prepared = tmp_assign_source_63;

    tmp_assign_source_64 = impl_class_10_AttributeValueAssertion_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_10__bases, tmp_pyasn1_modules$rfc2251_class_creation_10__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_10__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_10__prepared );
    if ( tmp_assign_source_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 30;
        goto try_except_handler_10;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeValueAssertion, tmp_assign_source_64 );
    goto try_end_10;
    // Exception handler code:
    try_except_handler_10:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_10__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_10__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_10__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_10__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_10__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_10__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_10__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_10__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto frame_exception_exit_1;
    // End of try:
    try_end_10:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_10__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_10__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_10__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_10__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_10__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_10__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_10__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_10__prepared = NULL;

    // Tried code:
    tmp_assign_source_65 = PyTuple_New( 1 );
    tmp_source_name_18 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_18 == NULL ))
    {
        tmp_source_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_18 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 36;
        goto try_except_handler_11;
    }

    tmp_tuple_element_21 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_Sequence );
    if ( tmp_tuple_element_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        exception_lineno = 36;
        goto try_except_handler_11;
    }
    PyTuple_SET_ITEM( tmp_assign_source_65, 0, tmp_tuple_element_21 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_11__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_11__bases = tmp_assign_source_65;

    tmp_assign_source_66 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_11__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_11__class_decl_dict = tmp_assign_source_66;

    tmp_compare_left_21 = const_str_plain_metaclass;
    tmp_compare_right_21 = tmp_pyasn1_modules$rfc2251_class_creation_11__class_decl_dict;

    tmp_cmp_In_21 = PySequence_Contains( tmp_compare_right_21, tmp_compare_left_21 );
    if ( tmp_cmp_In_21 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 36;
        goto try_except_handler_11;
    }
    if ( tmp_cmp_In_21 == 1 )
    {
        goto condexpr_true_31;
    }
    else
    {
        goto condexpr_false_31;
    }
    condexpr_true_31:;
    tmp_dget_dict_11 = tmp_pyasn1_modules$rfc2251_class_creation_11__class_decl_dict;

    tmp_dget_key_11 = const_str_plain_metaclass;
    tmp_class_meta_11 = DICT_GET_ITEM( tmp_dget_dict_11, tmp_dget_key_11 );
    if ( tmp_class_meta_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 36;
        goto try_except_handler_11;
    }
    goto condexpr_end_31;
    condexpr_false_31:;
    tmp_cond_value_11 = tmp_pyasn1_modules$rfc2251_class_creation_11__bases;

    tmp_cond_truth_11 = CHECK_IF_TRUE( tmp_cond_value_11 );
    if ( tmp_cond_truth_11 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 36;
        goto try_except_handler_11;
    }
    if ( tmp_cond_truth_11 == 1 )
    {
        goto condexpr_true_32;
    }
    else
    {
        goto condexpr_false_32;
    }
    condexpr_true_32:;
    tmp_subscribed_name_11 = tmp_pyasn1_modules$rfc2251_class_creation_11__bases;

    tmp_subscript_name_11 = const_int_0;
    tmp_type_arg_11 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_11, tmp_subscript_name_11 );
    if ( tmp_type_arg_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 36;
        goto try_except_handler_11;
    }
    tmp_class_meta_11 = BUILTIN_TYPE1( tmp_type_arg_11 );
    Py_DECREF( tmp_type_arg_11 );
    if ( tmp_class_meta_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 36;
        goto try_except_handler_11;
    }
    goto condexpr_end_32;
    condexpr_false_32:;
    tmp_class_meta_11 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_11 != NULL );
    Py_INCREF( tmp_class_meta_11 );
    condexpr_end_32:;
    condexpr_end_31:;
    tmp_class_bases_11 = tmp_pyasn1_modules$rfc2251_class_creation_11__bases;

    tmp_assign_source_67 = SELECT_METACLASS( tmp_class_meta_11, tmp_class_bases_11 );
    if ( tmp_assign_source_67 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_11 );

        exception_lineno = 36;
        goto try_except_handler_11;
    }
    Py_DECREF( tmp_class_meta_11 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_11__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_11__metaclass = tmp_assign_source_67;

    tmp_compare_left_22 = const_str_plain_metaclass;
    tmp_compare_right_22 = tmp_pyasn1_modules$rfc2251_class_creation_11__class_decl_dict;

    tmp_cmp_In_22 = PySequence_Contains( tmp_compare_right_22, tmp_compare_left_22 );
    if ( tmp_cmp_In_22 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 36;
        goto try_except_handler_11;
    }
    if ( tmp_cmp_In_22 == 1 )
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_11__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 36;
        goto try_except_handler_11;
    }
    branch_no_11:;
    tmp_hasattr_source_11 = tmp_pyasn1_modules$rfc2251_class_creation_11__metaclass;

    tmp_hasattr_attr_11 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_11, tmp_hasattr_attr_11 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 36;
        goto try_except_handler_11;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_33;
    }
    else
    {
        goto condexpr_false_33;
    }
    condexpr_true_33:;
    tmp_source_name_19 = tmp_pyasn1_modules$rfc2251_class_creation_11__metaclass;

    tmp_called_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain___prepare__ );
    if ( tmp_called_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 36;
        goto try_except_handler_11;
    }
    tmp_args_name_11 = PyTuple_New( 2 );
    tmp_tuple_element_22 = const_str_plain_Attribute;
    Py_INCREF( tmp_tuple_element_22 );
    PyTuple_SET_ITEM( tmp_args_name_11, 0, tmp_tuple_element_22 );
    tmp_tuple_element_22 = tmp_pyasn1_modules$rfc2251_class_creation_11__bases;

    Py_INCREF( tmp_tuple_element_22 );
    PyTuple_SET_ITEM( tmp_args_name_11, 1, tmp_tuple_element_22 );
    tmp_kw_name_11 = tmp_pyasn1_modules$rfc2251_class_creation_11__class_decl_dict;

    frame_module->f_lineno = 36;
    tmp_assign_source_68 = CALL_FUNCTION( tmp_called_name_12, tmp_args_name_11, tmp_kw_name_11 );
    Py_DECREF( tmp_called_name_12 );
    Py_DECREF( tmp_args_name_11 );
    if ( tmp_assign_source_68 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 36;
        goto try_except_handler_11;
    }
    goto condexpr_end_33;
    condexpr_false_33:;
    tmp_assign_source_68 = PyDict_New();
    condexpr_end_33:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_11__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_11__prepared = tmp_assign_source_68;

    tmp_assign_source_69 = impl_class_11_Attribute_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_11__bases, tmp_pyasn1_modules$rfc2251_class_creation_11__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_11__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_11__prepared );
    if ( tmp_assign_source_69 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 36;
        goto try_except_handler_11;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_Attribute, tmp_assign_source_69 );
    goto try_end_11;
    // Exception handler code:
    try_except_handler_11:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_keeper_lineno_11 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_11__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_11__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_11__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_11__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_11__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_11__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_11__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_11__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_11;
    exception_value = exception_keeper_value_11;
    exception_tb = exception_keeper_tb_11;
    exception_lineno = exception_keeper_lineno_11;

    goto frame_exception_exit_1;
    // End of try:
    try_end_11:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_11__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_11__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_11__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_11__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_11__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_11__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_11__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_11__prepared = NULL;

    // Tried code:
    tmp_assign_source_70 = PyTuple_New( 1 );
    tmp_tuple_element_23 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPString );

    if (unlikely( tmp_tuple_element_23 == NULL ))
    {
        tmp_tuple_element_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPString );
    }

    if ( tmp_tuple_element_23 == NULL )
    {
        Py_DECREF( tmp_assign_source_70 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52505 ], 32, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 42;
        goto try_except_handler_12;
    }

    Py_INCREF( tmp_tuple_element_23 );
    PyTuple_SET_ITEM( tmp_assign_source_70, 0, tmp_tuple_element_23 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_12__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_12__bases = tmp_assign_source_70;

    tmp_assign_source_71 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_12__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_12__class_decl_dict = tmp_assign_source_71;

    tmp_compare_left_23 = const_str_plain_metaclass;
    tmp_compare_right_23 = tmp_pyasn1_modules$rfc2251_class_creation_12__class_decl_dict;

    tmp_cmp_In_23 = PySequence_Contains( tmp_compare_right_23, tmp_compare_left_23 );
    if ( tmp_cmp_In_23 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 42;
        goto try_except_handler_12;
    }
    if ( tmp_cmp_In_23 == 1 )
    {
        goto condexpr_true_34;
    }
    else
    {
        goto condexpr_false_34;
    }
    condexpr_true_34:;
    tmp_dget_dict_12 = tmp_pyasn1_modules$rfc2251_class_creation_12__class_decl_dict;

    tmp_dget_key_12 = const_str_plain_metaclass;
    tmp_class_meta_12 = DICT_GET_ITEM( tmp_dget_dict_12, tmp_dget_key_12 );
    if ( tmp_class_meta_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 42;
        goto try_except_handler_12;
    }
    goto condexpr_end_34;
    condexpr_false_34:;
    tmp_cond_value_12 = tmp_pyasn1_modules$rfc2251_class_creation_12__bases;

    tmp_cond_truth_12 = CHECK_IF_TRUE( tmp_cond_value_12 );
    if ( tmp_cond_truth_12 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 42;
        goto try_except_handler_12;
    }
    if ( tmp_cond_truth_12 == 1 )
    {
        goto condexpr_true_35;
    }
    else
    {
        goto condexpr_false_35;
    }
    condexpr_true_35:;
    tmp_subscribed_name_12 = tmp_pyasn1_modules$rfc2251_class_creation_12__bases;

    tmp_subscript_name_12 = const_int_0;
    tmp_type_arg_12 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_12, tmp_subscript_name_12 );
    if ( tmp_type_arg_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 42;
        goto try_except_handler_12;
    }
    tmp_class_meta_12 = BUILTIN_TYPE1( tmp_type_arg_12 );
    Py_DECREF( tmp_type_arg_12 );
    if ( tmp_class_meta_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 42;
        goto try_except_handler_12;
    }
    goto condexpr_end_35;
    condexpr_false_35:;
    tmp_class_meta_12 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_12 != NULL );
    Py_INCREF( tmp_class_meta_12 );
    condexpr_end_35:;
    condexpr_end_34:;
    tmp_class_bases_12 = tmp_pyasn1_modules$rfc2251_class_creation_12__bases;

    tmp_assign_source_72 = SELECT_METACLASS( tmp_class_meta_12, tmp_class_bases_12 );
    if ( tmp_assign_source_72 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_12 );

        exception_lineno = 42;
        goto try_except_handler_12;
    }
    Py_DECREF( tmp_class_meta_12 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_12__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_12__metaclass = tmp_assign_source_72;

    tmp_compare_left_24 = const_str_plain_metaclass;
    tmp_compare_right_24 = tmp_pyasn1_modules$rfc2251_class_creation_12__class_decl_dict;

    tmp_cmp_In_24 = PySequence_Contains( tmp_compare_right_24, tmp_compare_left_24 );
    if ( tmp_cmp_In_24 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 42;
        goto try_except_handler_12;
    }
    if ( tmp_cmp_In_24 == 1 )
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_12__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 42;
        goto try_except_handler_12;
    }
    branch_no_12:;
    tmp_hasattr_source_12 = tmp_pyasn1_modules$rfc2251_class_creation_12__metaclass;

    tmp_hasattr_attr_12 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_12, tmp_hasattr_attr_12 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 42;
        goto try_except_handler_12;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_36;
    }
    else
    {
        goto condexpr_false_36;
    }
    condexpr_true_36:;
    tmp_source_name_20 = tmp_pyasn1_modules$rfc2251_class_creation_12__metaclass;

    tmp_called_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain___prepare__ );
    if ( tmp_called_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 42;
        goto try_except_handler_12;
    }
    tmp_args_name_12 = PyTuple_New( 2 );
    tmp_tuple_element_24 = const_str_plain_MatchingRuleId;
    Py_INCREF( tmp_tuple_element_24 );
    PyTuple_SET_ITEM( tmp_args_name_12, 0, tmp_tuple_element_24 );
    tmp_tuple_element_24 = tmp_pyasn1_modules$rfc2251_class_creation_12__bases;

    Py_INCREF( tmp_tuple_element_24 );
    PyTuple_SET_ITEM( tmp_args_name_12, 1, tmp_tuple_element_24 );
    tmp_kw_name_12 = tmp_pyasn1_modules$rfc2251_class_creation_12__class_decl_dict;

    frame_module->f_lineno = 42;
    tmp_assign_source_73 = CALL_FUNCTION( tmp_called_name_13, tmp_args_name_12, tmp_kw_name_12 );
    Py_DECREF( tmp_called_name_13 );
    Py_DECREF( tmp_args_name_12 );
    if ( tmp_assign_source_73 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 42;
        goto try_except_handler_12;
    }
    goto condexpr_end_36;
    condexpr_false_36:;
    tmp_assign_source_73 = PyDict_New();
    condexpr_end_36:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_12__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_12__prepared = tmp_assign_source_73;

    tmp_assign_source_74 = impl_class_12_MatchingRuleId_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_12__bases, tmp_pyasn1_modules$rfc2251_class_creation_12__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_12__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_12__prepared );
    if ( tmp_assign_source_74 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 42;
        goto try_except_handler_12;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_MatchingRuleId, tmp_assign_source_74 );
    goto try_end_12;
    // Exception handler code:
    try_except_handler_12:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_keeper_lineno_12 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_12__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_12__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_12__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_12__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_12__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_12__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_12__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_12__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_12;
    exception_value = exception_keeper_value_12;
    exception_tb = exception_keeper_tb_12;
    exception_lineno = exception_keeper_lineno_12;

    goto frame_exception_exit_1;
    // End of try:
    try_end_12:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_12__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_12__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_12__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_12__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_12__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_12__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_12__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_12__prepared = NULL;

    // Tried code:
    tmp_assign_source_75 = PyTuple_New( 1 );
    tmp_source_name_21 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_21 == NULL ))
    {
        tmp_source_name_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_21 == NULL )
    {
        Py_DECREF( tmp_assign_source_75 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 44;
        goto try_except_handler_13;
    }

    tmp_tuple_element_25 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_Sequence );
    if ( tmp_tuple_element_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_75 );

        exception_lineno = 44;
        goto try_except_handler_13;
    }
    PyTuple_SET_ITEM( tmp_assign_source_75, 0, tmp_tuple_element_25 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_13__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_13__bases = tmp_assign_source_75;

    tmp_assign_source_76 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_13__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_13__class_decl_dict = tmp_assign_source_76;

    tmp_compare_left_25 = const_str_plain_metaclass;
    tmp_compare_right_25 = tmp_pyasn1_modules$rfc2251_class_creation_13__class_decl_dict;

    tmp_cmp_In_25 = PySequence_Contains( tmp_compare_right_25, tmp_compare_left_25 );
    if ( tmp_cmp_In_25 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 44;
        goto try_except_handler_13;
    }
    if ( tmp_cmp_In_25 == 1 )
    {
        goto condexpr_true_37;
    }
    else
    {
        goto condexpr_false_37;
    }
    condexpr_true_37:;
    tmp_dget_dict_13 = tmp_pyasn1_modules$rfc2251_class_creation_13__class_decl_dict;

    tmp_dget_key_13 = const_str_plain_metaclass;
    tmp_class_meta_13 = DICT_GET_ITEM( tmp_dget_dict_13, tmp_dget_key_13 );
    if ( tmp_class_meta_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 44;
        goto try_except_handler_13;
    }
    goto condexpr_end_37;
    condexpr_false_37:;
    tmp_cond_value_13 = tmp_pyasn1_modules$rfc2251_class_creation_13__bases;

    tmp_cond_truth_13 = CHECK_IF_TRUE( tmp_cond_value_13 );
    if ( tmp_cond_truth_13 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 44;
        goto try_except_handler_13;
    }
    if ( tmp_cond_truth_13 == 1 )
    {
        goto condexpr_true_38;
    }
    else
    {
        goto condexpr_false_38;
    }
    condexpr_true_38:;
    tmp_subscribed_name_13 = tmp_pyasn1_modules$rfc2251_class_creation_13__bases;

    tmp_subscript_name_13 = const_int_0;
    tmp_type_arg_13 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_13, tmp_subscript_name_13 );
    if ( tmp_type_arg_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 44;
        goto try_except_handler_13;
    }
    tmp_class_meta_13 = BUILTIN_TYPE1( tmp_type_arg_13 );
    Py_DECREF( tmp_type_arg_13 );
    if ( tmp_class_meta_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 44;
        goto try_except_handler_13;
    }
    goto condexpr_end_38;
    condexpr_false_38:;
    tmp_class_meta_13 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_13 != NULL );
    Py_INCREF( tmp_class_meta_13 );
    condexpr_end_38:;
    condexpr_end_37:;
    tmp_class_bases_13 = tmp_pyasn1_modules$rfc2251_class_creation_13__bases;

    tmp_assign_source_77 = SELECT_METACLASS( tmp_class_meta_13, tmp_class_bases_13 );
    if ( tmp_assign_source_77 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_13 );

        exception_lineno = 44;
        goto try_except_handler_13;
    }
    Py_DECREF( tmp_class_meta_13 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_13__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_13__metaclass = tmp_assign_source_77;

    tmp_compare_left_26 = const_str_plain_metaclass;
    tmp_compare_right_26 = tmp_pyasn1_modules$rfc2251_class_creation_13__class_decl_dict;

    tmp_cmp_In_26 = PySequence_Contains( tmp_compare_right_26, tmp_compare_left_26 );
    if ( tmp_cmp_In_26 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 44;
        goto try_except_handler_13;
    }
    if ( tmp_cmp_In_26 == 1 )
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_13__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 44;
        goto try_except_handler_13;
    }
    branch_no_13:;
    tmp_hasattr_source_13 = tmp_pyasn1_modules$rfc2251_class_creation_13__metaclass;

    tmp_hasattr_attr_13 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_13, tmp_hasattr_attr_13 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 44;
        goto try_except_handler_13;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_39;
    }
    else
    {
        goto condexpr_false_39;
    }
    condexpr_true_39:;
    tmp_source_name_22 = tmp_pyasn1_modules$rfc2251_class_creation_13__metaclass;

    tmp_called_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain___prepare__ );
    if ( tmp_called_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 44;
        goto try_except_handler_13;
    }
    tmp_args_name_13 = PyTuple_New( 2 );
    tmp_tuple_element_26 = const_str_plain_Control;
    Py_INCREF( tmp_tuple_element_26 );
    PyTuple_SET_ITEM( tmp_args_name_13, 0, tmp_tuple_element_26 );
    tmp_tuple_element_26 = tmp_pyasn1_modules$rfc2251_class_creation_13__bases;

    Py_INCREF( tmp_tuple_element_26 );
    PyTuple_SET_ITEM( tmp_args_name_13, 1, tmp_tuple_element_26 );
    tmp_kw_name_13 = tmp_pyasn1_modules$rfc2251_class_creation_13__class_decl_dict;

    frame_module->f_lineno = 44;
    tmp_assign_source_78 = CALL_FUNCTION( tmp_called_name_14, tmp_args_name_13, tmp_kw_name_13 );
    Py_DECREF( tmp_called_name_14 );
    Py_DECREF( tmp_args_name_13 );
    if ( tmp_assign_source_78 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 44;
        goto try_except_handler_13;
    }
    goto condexpr_end_39;
    condexpr_false_39:;
    tmp_assign_source_78 = PyDict_New();
    condexpr_end_39:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_13__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_13__prepared = tmp_assign_source_78;

    tmp_assign_source_79 = impl_class_13_Control_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_13__bases, tmp_pyasn1_modules$rfc2251_class_creation_13__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_13__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_13__prepared );
    if ( tmp_assign_source_79 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 44;
        goto try_except_handler_13;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_Control, tmp_assign_source_79 );
    goto try_end_13;
    // Exception handler code:
    try_except_handler_13:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_keeper_lineno_13 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_13__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_13__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_13__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_13__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_13__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_13__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_13__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_13__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_13;
    exception_value = exception_keeper_value_13;
    exception_tb = exception_keeper_tb_13;
    exception_lineno = exception_keeper_lineno_13;

    goto frame_exception_exit_1;
    // End of try:
    try_end_13:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_13__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_13__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_13__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_13__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_13__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_13__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_13__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_13__prepared = NULL;

    // Tried code:
    tmp_assign_source_80 = PyTuple_New( 1 );
    tmp_source_name_23 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_23 == NULL ))
    {
        tmp_source_name_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_23 == NULL )
    {
        Py_DECREF( tmp_assign_source_80 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 51;
        goto try_except_handler_14;
    }

    tmp_tuple_element_27 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain_SequenceOf );
    if ( tmp_tuple_element_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_80 );

        exception_lineno = 51;
        goto try_except_handler_14;
    }
    PyTuple_SET_ITEM( tmp_assign_source_80, 0, tmp_tuple_element_27 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_14__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_14__bases = tmp_assign_source_80;

    tmp_assign_source_81 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_14__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_14__class_decl_dict = tmp_assign_source_81;

    tmp_compare_left_27 = const_str_plain_metaclass;
    tmp_compare_right_27 = tmp_pyasn1_modules$rfc2251_class_creation_14__class_decl_dict;

    tmp_cmp_In_27 = PySequence_Contains( tmp_compare_right_27, tmp_compare_left_27 );
    if ( tmp_cmp_In_27 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 51;
        goto try_except_handler_14;
    }
    if ( tmp_cmp_In_27 == 1 )
    {
        goto condexpr_true_40;
    }
    else
    {
        goto condexpr_false_40;
    }
    condexpr_true_40:;
    tmp_dget_dict_14 = tmp_pyasn1_modules$rfc2251_class_creation_14__class_decl_dict;

    tmp_dget_key_14 = const_str_plain_metaclass;
    tmp_class_meta_14 = DICT_GET_ITEM( tmp_dget_dict_14, tmp_dget_key_14 );
    if ( tmp_class_meta_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 51;
        goto try_except_handler_14;
    }
    goto condexpr_end_40;
    condexpr_false_40:;
    tmp_cond_value_14 = tmp_pyasn1_modules$rfc2251_class_creation_14__bases;

    tmp_cond_truth_14 = CHECK_IF_TRUE( tmp_cond_value_14 );
    if ( tmp_cond_truth_14 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 51;
        goto try_except_handler_14;
    }
    if ( tmp_cond_truth_14 == 1 )
    {
        goto condexpr_true_41;
    }
    else
    {
        goto condexpr_false_41;
    }
    condexpr_true_41:;
    tmp_subscribed_name_14 = tmp_pyasn1_modules$rfc2251_class_creation_14__bases;

    tmp_subscript_name_14 = const_int_0;
    tmp_type_arg_14 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_14, tmp_subscript_name_14 );
    if ( tmp_type_arg_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 51;
        goto try_except_handler_14;
    }
    tmp_class_meta_14 = BUILTIN_TYPE1( tmp_type_arg_14 );
    Py_DECREF( tmp_type_arg_14 );
    if ( tmp_class_meta_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 51;
        goto try_except_handler_14;
    }
    goto condexpr_end_41;
    condexpr_false_41:;
    tmp_class_meta_14 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_14 != NULL );
    Py_INCREF( tmp_class_meta_14 );
    condexpr_end_41:;
    condexpr_end_40:;
    tmp_class_bases_14 = tmp_pyasn1_modules$rfc2251_class_creation_14__bases;

    tmp_assign_source_82 = SELECT_METACLASS( tmp_class_meta_14, tmp_class_bases_14 );
    if ( tmp_assign_source_82 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_14 );

        exception_lineno = 51;
        goto try_except_handler_14;
    }
    Py_DECREF( tmp_class_meta_14 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_14__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_14__metaclass = tmp_assign_source_82;

    tmp_compare_left_28 = const_str_plain_metaclass;
    tmp_compare_right_28 = tmp_pyasn1_modules$rfc2251_class_creation_14__class_decl_dict;

    tmp_cmp_In_28 = PySequence_Contains( tmp_compare_right_28, tmp_compare_left_28 );
    if ( tmp_cmp_In_28 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 51;
        goto try_except_handler_14;
    }
    if ( tmp_cmp_In_28 == 1 )
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_14__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 51;
        goto try_except_handler_14;
    }
    branch_no_14:;
    tmp_hasattr_source_14 = tmp_pyasn1_modules$rfc2251_class_creation_14__metaclass;

    tmp_hasattr_attr_14 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_14, tmp_hasattr_attr_14 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 51;
        goto try_except_handler_14;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_42;
    }
    else
    {
        goto condexpr_false_42;
    }
    condexpr_true_42:;
    tmp_source_name_24 = tmp_pyasn1_modules$rfc2251_class_creation_14__metaclass;

    tmp_called_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain___prepare__ );
    if ( tmp_called_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 51;
        goto try_except_handler_14;
    }
    tmp_args_name_14 = PyTuple_New( 2 );
    tmp_tuple_element_28 = const_str_plain_Controls;
    Py_INCREF( tmp_tuple_element_28 );
    PyTuple_SET_ITEM( tmp_args_name_14, 0, tmp_tuple_element_28 );
    tmp_tuple_element_28 = tmp_pyasn1_modules$rfc2251_class_creation_14__bases;

    Py_INCREF( tmp_tuple_element_28 );
    PyTuple_SET_ITEM( tmp_args_name_14, 1, tmp_tuple_element_28 );
    tmp_kw_name_14 = tmp_pyasn1_modules$rfc2251_class_creation_14__class_decl_dict;

    frame_module->f_lineno = 51;
    tmp_assign_source_83 = CALL_FUNCTION( tmp_called_name_15, tmp_args_name_14, tmp_kw_name_14 );
    Py_DECREF( tmp_called_name_15 );
    Py_DECREF( tmp_args_name_14 );
    if ( tmp_assign_source_83 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 51;
        goto try_except_handler_14;
    }
    goto condexpr_end_42;
    condexpr_false_42:;
    tmp_assign_source_83 = PyDict_New();
    condexpr_end_42:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_14__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_14__prepared = tmp_assign_source_83;

    tmp_assign_source_84 = impl_class_14_Controls_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_14__bases, tmp_pyasn1_modules$rfc2251_class_creation_14__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_14__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_14__prepared );
    if ( tmp_assign_source_84 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 51;
        goto try_except_handler_14;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_Controls, tmp_assign_source_84 );
    goto try_end_14;
    // Exception handler code:
    try_except_handler_14:;
    exception_keeper_type_14 = exception_type;
    exception_keeper_value_14 = exception_value;
    exception_keeper_tb_14 = exception_tb;
    exception_keeper_lineno_14 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_14__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_14__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_14__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_14__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_14__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_14__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_14__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_14__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_14;
    exception_value = exception_keeper_value_14;
    exception_tb = exception_keeper_tb_14;
    exception_lineno = exception_keeper_lineno_14;

    goto frame_exception_exit_1;
    // End of try:
    try_end_14:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_14__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_14__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_14__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_14__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_14__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_14__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_14__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_14__prepared = NULL;

    // Tried code:
    tmp_assign_source_85 = PyTuple_New( 1 );
    tmp_tuple_element_29 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPString );

    if (unlikely( tmp_tuple_element_29 == NULL ))
    {
        tmp_tuple_element_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPString );
    }

    if ( tmp_tuple_element_29 == NULL )
    {
        Py_DECREF( tmp_assign_source_85 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52505 ], 32, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 54;
        goto try_except_handler_15;
    }

    Py_INCREF( tmp_tuple_element_29 );
    PyTuple_SET_ITEM( tmp_assign_source_85, 0, tmp_tuple_element_29 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_15__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_15__bases = tmp_assign_source_85;

    tmp_assign_source_86 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_15__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_15__class_decl_dict = tmp_assign_source_86;

    tmp_compare_left_29 = const_str_plain_metaclass;
    tmp_compare_right_29 = tmp_pyasn1_modules$rfc2251_class_creation_15__class_decl_dict;

    tmp_cmp_In_29 = PySequence_Contains( tmp_compare_right_29, tmp_compare_left_29 );
    if ( tmp_cmp_In_29 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 54;
        goto try_except_handler_15;
    }
    if ( tmp_cmp_In_29 == 1 )
    {
        goto condexpr_true_43;
    }
    else
    {
        goto condexpr_false_43;
    }
    condexpr_true_43:;
    tmp_dget_dict_15 = tmp_pyasn1_modules$rfc2251_class_creation_15__class_decl_dict;

    tmp_dget_key_15 = const_str_plain_metaclass;
    tmp_class_meta_15 = DICT_GET_ITEM( tmp_dget_dict_15, tmp_dget_key_15 );
    if ( tmp_class_meta_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 54;
        goto try_except_handler_15;
    }
    goto condexpr_end_43;
    condexpr_false_43:;
    tmp_cond_value_15 = tmp_pyasn1_modules$rfc2251_class_creation_15__bases;

    tmp_cond_truth_15 = CHECK_IF_TRUE( tmp_cond_value_15 );
    if ( tmp_cond_truth_15 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 54;
        goto try_except_handler_15;
    }
    if ( tmp_cond_truth_15 == 1 )
    {
        goto condexpr_true_44;
    }
    else
    {
        goto condexpr_false_44;
    }
    condexpr_true_44:;
    tmp_subscribed_name_15 = tmp_pyasn1_modules$rfc2251_class_creation_15__bases;

    tmp_subscript_name_15 = const_int_0;
    tmp_type_arg_15 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_15, tmp_subscript_name_15 );
    if ( tmp_type_arg_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 54;
        goto try_except_handler_15;
    }
    tmp_class_meta_15 = BUILTIN_TYPE1( tmp_type_arg_15 );
    Py_DECREF( tmp_type_arg_15 );
    if ( tmp_class_meta_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 54;
        goto try_except_handler_15;
    }
    goto condexpr_end_44;
    condexpr_false_44:;
    tmp_class_meta_15 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_15 != NULL );
    Py_INCREF( tmp_class_meta_15 );
    condexpr_end_44:;
    condexpr_end_43:;
    tmp_class_bases_15 = tmp_pyasn1_modules$rfc2251_class_creation_15__bases;

    tmp_assign_source_87 = SELECT_METACLASS( tmp_class_meta_15, tmp_class_bases_15 );
    if ( tmp_assign_source_87 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_15 );

        exception_lineno = 54;
        goto try_except_handler_15;
    }
    Py_DECREF( tmp_class_meta_15 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_15__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_15__metaclass = tmp_assign_source_87;

    tmp_compare_left_30 = const_str_plain_metaclass;
    tmp_compare_right_30 = tmp_pyasn1_modules$rfc2251_class_creation_15__class_decl_dict;

    tmp_cmp_In_30 = PySequence_Contains( tmp_compare_right_30, tmp_compare_left_30 );
    if ( tmp_cmp_In_30 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 54;
        goto try_except_handler_15;
    }
    if ( tmp_cmp_In_30 == 1 )
    {
        goto branch_yes_15;
    }
    else
    {
        goto branch_no_15;
    }
    branch_yes_15:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_15__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 54;
        goto try_except_handler_15;
    }
    branch_no_15:;
    tmp_hasattr_source_15 = tmp_pyasn1_modules$rfc2251_class_creation_15__metaclass;

    tmp_hasattr_attr_15 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_15, tmp_hasattr_attr_15 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 54;
        goto try_except_handler_15;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_45;
    }
    else
    {
        goto condexpr_false_45;
    }
    condexpr_true_45:;
    tmp_source_name_25 = tmp_pyasn1_modules$rfc2251_class_creation_15__metaclass;

    tmp_called_name_16 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain___prepare__ );
    if ( tmp_called_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 54;
        goto try_except_handler_15;
    }
    tmp_args_name_15 = PyTuple_New( 2 );
    tmp_tuple_element_30 = const_str_plain_LDAPURL;
    Py_INCREF( tmp_tuple_element_30 );
    PyTuple_SET_ITEM( tmp_args_name_15, 0, tmp_tuple_element_30 );
    tmp_tuple_element_30 = tmp_pyasn1_modules$rfc2251_class_creation_15__bases;

    Py_INCREF( tmp_tuple_element_30 );
    PyTuple_SET_ITEM( tmp_args_name_15, 1, tmp_tuple_element_30 );
    tmp_kw_name_15 = tmp_pyasn1_modules$rfc2251_class_creation_15__class_decl_dict;

    frame_module->f_lineno = 54;
    tmp_assign_source_88 = CALL_FUNCTION( tmp_called_name_16, tmp_args_name_15, tmp_kw_name_15 );
    Py_DECREF( tmp_called_name_16 );
    Py_DECREF( tmp_args_name_15 );
    if ( tmp_assign_source_88 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 54;
        goto try_except_handler_15;
    }
    goto condexpr_end_45;
    condexpr_false_45:;
    tmp_assign_source_88 = PyDict_New();
    condexpr_end_45:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_15__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_15__prepared = tmp_assign_source_88;

    tmp_assign_source_89 = impl_class_15_LDAPURL_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_15__bases, tmp_pyasn1_modules$rfc2251_class_creation_15__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_15__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_15__prepared );
    if ( tmp_assign_source_89 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 54;
        goto try_except_handler_15;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPURL, tmp_assign_source_89 );
    goto try_end_15;
    // Exception handler code:
    try_except_handler_15:;
    exception_keeper_type_15 = exception_type;
    exception_keeper_value_15 = exception_value;
    exception_keeper_tb_15 = exception_tb;
    exception_keeper_lineno_15 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_15__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_15__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_15__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_15__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_15__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_15__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_15__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_15__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_15;
    exception_value = exception_keeper_value_15;
    exception_tb = exception_keeper_tb_15;
    exception_lineno = exception_keeper_lineno_15;

    goto frame_exception_exit_1;
    // End of try:
    try_end_15:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_15__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_15__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_15__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_15__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_15__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_15__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_15__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_15__prepared = NULL;

    // Tried code:
    tmp_assign_source_90 = PyTuple_New( 1 );
    tmp_source_name_26 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_26 == NULL ))
    {
        tmp_source_name_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_26 == NULL )
    {
        Py_DECREF( tmp_assign_source_90 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 56;
        goto try_except_handler_16;
    }

    tmp_tuple_element_31 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain_SequenceOf );
    if ( tmp_tuple_element_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_90 );

        exception_lineno = 56;
        goto try_except_handler_16;
    }
    PyTuple_SET_ITEM( tmp_assign_source_90, 0, tmp_tuple_element_31 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_16__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_16__bases = tmp_assign_source_90;

    tmp_assign_source_91 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_16__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_16__class_decl_dict = tmp_assign_source_91;

    tmp_compare_left_31 = const_str_plain_metaclass;
    tmp_compare_right_31 = tmp_pyasn1_modules$rfc2251_class_creation_16__class_decl_dict;

    tmp_cmp_In_31 = PySequence_Contains( tmp_compare_right_31, tmp_compare_left_31 );
    if ( tmp_cmp_In_31 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 56;
        goto try_except_handler_16;
    }
    if ( tmp_cmp_In_31 == 1 )
    {
        goto condexpr_true_46;
    }
    else
    {
        goto condexpr_false_46;
    }
    condexpr_true_46:;
    tmp_dget_dict_16 = tmp_pyasn1_modules$rfc2251_class_creation_16__class_decl_dict;

    tmp_dget_key_16 = const_str_plain_metaclass;
    tmp_class_meta_16 = DICT_GET_ITEM( tmp_dget_dict_16, tmp_dget_key_16 );
    if ( tmp_class_meta_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 56;
        goto try_except_handler_16;
    }
    goto condexpr_end_46;
    condexpr_false_46:;
    tmp_cond_value_16 = tmp_pyasn1_modules$rfc2251_class_creation_16__bases;

    tmp_cond_truth_16 = CHECK_IF_TRUE( tmp_cond_value_16 );
    if ( tmp_cond_truth_16 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 56;
        goto try_except_handler_16;
    }
    if ( tmp_cond_truth_16 == 1 )
    {
        goto condexpr_true_47;
    }
    else
    {
        goto condexpr_false_47;
    }
    condexpr_true_47:;
    tmp_subscribed_name_16 = tmp_pyasn1_modules$rfc2251_class_creation_16__bases;

    tmp_subscript_name_16 = const_int_0;
    tmp_type_arg_16 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_16, tmp_subscript_name_16 );
    if ( tmp_type_arg_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 56;
        goto try_except_handler_16;
    }
    tmp_class_meta_16 = BUILTIN_TYPE1( tmp_type_arg_16 );
    Py_DECREF( tmp_type_arg_16 );
    if ( tmp_class_meta_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 56;
        goto try_except_handler_16;
    }
    goto condexpr_end_47;
    condexpr_false_47:;
    tmp_class_meta_16 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_16 != NULL );
    Py_INCREF( tmp_class_meta_16 );
    condexpr_end_47:;
    condexpr_end_46:;
    tmp_class_bases_16 = tmp_pyasn1_modules$rfc2251_class_creation_16__bases;

    tmp_assign_source_92 = SELECT_METACLASS( tmp_class_meta_16, tmp_class_bases_16 );
    if ( tmp_assign_source_92 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_16 );

        exception_lineno = 56;
        goto try_except_handler_16;
    }
    Py_DECREF( tmp_class_meta_16 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_16__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_16__metaclass = tmp_assign_source_92;

    tmp_compare_left_32 = const_str_plain_metaclass;
    tmp_compare_right_32 = tmp_pyasn1_modules$rfc2251_class_creation_16__class_decl_dict;

    tmp_cmp_In_32 = PySequence_Contains( tmp_compare_right_32, tmp_compare_left_32 );
    if ( tmp_cmp_In_32 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 56;
        goto try_except_handler_16;
    }
    if ( tmp_cmp_In_32 == 1 )
    {
        goto branch_yes_16;
    }
    else
    {
        goto branch_no_16;
    }
    branch_yes_16:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_16__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 56;
        goto try_except_handler_16;
    }
    branch_no_16:;
    tmp_hasattr_source_16 = tmp_pyasn1_modules$rfc2251_class_creation_16__metaclass;

    tmp_hasattr_attr_16 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_16, tmp_hasattr_attr_16 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 56;
        goto try_except_handler_16;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_48;
    }
    else
    {
        goto condexpr_false_48;
    }
    condexpr_true_48:;
    tmp_source_name_27 = tmp_pyasn1_modules$rfc2251_class_creation_16__metaclass;

    tmp_called_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain___prepare__ );
    if ( tmp_called_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 56;
        goto try_except_handler_16;
    }
    tmp_args_name_16 = PyTuple_New( 2 );
    tmp_tuple_element_32 = const_str_plain_Referral;
    Py_INCREF( tmp_tuple_element_32 );
    PyTuple_SET_ITEM( tmp_args_name_16, 0, tmp_tuple_element_32 );
    tmp_tuple_element_32 = tmp_pyasn1_modules$rfc2251_class_creation_16__bases;

    Py_INCREF( tmp_tuple_element_32 );
    PyTuple_SET_ITEM( tmp_args_name_16, 1, tmp_tuple_element_32 );
    tmp_kw_name_16 = tmp_pyasn1_modules$rfc2251_class_creation_16__class_decl_dict;

    frame_module->f_lineno = 56;
    tmp_assign_source_93 = CALL_FUNCTION( tmp_called_name_17, tmp_args_name_16, tmp_kw_name_16 );
    Py_DECREF( tmp_called_name_17 );
    Py_DECREF( tmp_args_name_16 );
    if ( tmp_assign_source_93 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 56;
        goto try_except_handler_16;
    }
    goto condexpr_end_48;
    condexpr_false_48:;
    tmp_assign_source_93 = PyDict_New();
    condexpr_end_48:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_16__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_16__prepared = tmp_assign_source_93;

    tmp_assign_source_94 = impl_class_16_Referral_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_16__bases, tmp_pyasn1_modules$rfc2251_class_creation_16__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_16__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_16__prepared );
    if ( tmp_assign_source_94 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 56;
        goto try_except_handler_16;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_Referral, tmp_assign_source_94 );
    goto try_end_16;
    // Exception handler code:
    try_except_handler_16:;
    exception_keeper_type_16 = exception_type;
    exception_keeper_value_16 = exception_value;
    exception_keeper_tb_16 = exception_tb;
    exception_keeper_lineno_16 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_16__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_16__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_16__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_16__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_16__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_16__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_16__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_16__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_16;
    exception_value = exception_keeper_value_16;
    exception_tb = exception_keeper_tb_16;
    exception_lineno = exception_keeper_lineno_16;

    goto frame_exception_exit_1;
    // End of try:
    try_end_16:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_16__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_16__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_16__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_16__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_16__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_16__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_16__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_16__prepared = NULL;

    // Tried code:
    tmp_assign_source_95 = PyTuple_New( 1 );
    tmp_source_name_28 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_28 == NULL ))
    {
        tmp_source_name_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_28 == NULL )
    {
        Py_DECREF( tmp_assign_source_95 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 59;
        goto try_except_handler_17;
    }

    tmp_tuple_element_33 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain_Sequence );
    if ( tmp_tuple_element_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_95 );

        exception_lineno = 59;
        goto try_except_handler_17;
    }
    PyTuple_SET_ITEM( tmp_assign_source_95, 0, tmp_tuple_element_33 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_17__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_17__bases = tmp_assign_source_95;

    tmp_assign_source_96 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_17__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_17__class_decl_dict = tmp_assign_source_96;

    tmp_compare_left_33 = const_str_plain_metaclass;
    tmp_compare_right_33 = tmp_pyasn1_modules$rfc2251_class_creation_17__class_decl_dict;

    tmp_cmp_In_33 = PySequence_Contains( tmp_compare_right_33, tmp_compare_left_33 );
    if ( tmp_cmp_In_33 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 59;
        goto try_except_handler_17;
    }
    if ( tmp_cmp_In_33 == 1 )
    {
        goto condexpr_true_49;
    }
    else
    {
        goto condexpr_false_49;
    }
    condexpr_true_49:;
    tmp_dget_dict_17 = tmp_pyasn1_modules$rfc2251_class_creation_17__class_decl_dict;

    tmp_dget_key_17 = const_str_plain_metaclass;
    tmp_class_meta_17 = DICT_GET_ITEM( tmp_dget_dict_17, tmp_dget_key_17 );
    if ( tmp_class_meta_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 59;
        goto try_except_handler_17;
    }
    goto condexpr_end_49;
    condexpr_false_49:;
    tmp_cond_value_17 = tmp_pyasn1_modules$rfc2251_class_creation_17__bases;

    tmp_cond_truth_17 = CHECK_IF_TRUE( tmp_cond_value_17 );
    if ( tmp_cond_truth_17 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 59;
        goto try_except_handler_17;
    }
    if ( tmp_cond_truth_17 == 1 )
    {
        goto condexpr_true_50;
    }
    else
    {
        goto condexpr_false_50;
    }
    condexpr_true_50:;
    tmp_subscribed_name_17 = tmp_pyasn1_modules$rfc2251_class_creation_17__bases;

    tmp_subscript_name_17 = const_int_0;
    tmp_type_arg_17 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_17, tmp_subscript_name_17 );
    if ( tmp_type_arg_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 59;
        goto try_except_handler_17;
    }
    tmp_class_meta_17 = BUILTIN_TYPE1( tmp_type_arg_17 );
    Py_DECREF( tmp_type_arg_17 );
    if ( tmp_class_meta_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 59;
        goto try_except_handler_17;
    }
    goto condexpr_end_50;
    condexpr_false_50:;
    tmp_class_meta_17 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_17 != NULL );
    Py_INCREF( tmp_class_meta_17 );
    condexpr_end_50:;
    condexpr_end_49:;
    tmp_class_bases_17 = tmp_pyasn1_modules$rfc2251_class_creation_17__bases;

    tmp_assign_source_97 = SELECT_METACLASS( tmp_class_meta_17, tmp_class_bases_17 );
    if ( tmp_assign_source_97 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_17 );

        exception_lineno = 59;
        goto try_except_handler_17;
    }
    Py_DECREF( tmp_class_meta_17 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_17__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_17__metaclass = tmp_assign_source_97;

    tmp_compare_left_34 = const_str_plain_metaclass;
    tmp_compare_right_34 = tmp_pyasn1_modules$rfc2251_class_creation_17__class_decl_dict;

    tmp_cmp_In_34 = PySequence_Contains( tmp_compare_right_34, tmp_compare_left_34 );
    if ( tmp_cmp_In_34 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 59;
        goto try_except_handler_17;
    }
    if ( tmp_cmp_In_34 == 1 )
    {
        goto branch_yes_17;
    }
    else
    {
        goto branch_no_17;
    }
    branch_yes_17:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_17__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 59;
        goto try_except_handler_17;
    }
    branch_no_17:;
    tmp_hasattr_source_17 = tmp_pyasn1_modules$rfc2251_class_creation_17__metaclass;

    tmp_hasattr_attr_17 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_17, tmp_hasattr_attr_17 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 59;
        goto try_except_handler_17;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_51;
    }
    else
    {
        goto condexpr_false_51;
    }
    condexpr_true_51:;
    tmp_source_name_29 = tmp_pyasn1_modules$rfc2251_class_creation_17__metaclass;

    tmp_called_name_18 = LOOKUP_ATTRIBUTE( tmp_source_name_29, const_str_plain___prepare__ );
    if ( tmp_called_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 59;
        goto try_except_handler_17;
    }
    tmp_args_name_17 = PyTuple_New( 2 );
    tmp_tuple_element_34 = const_str_plain_SaslCredentials;
    Py_INCREF( tmp_tuple_element_34 );
    PyTuple_SET_ITEM( tmp_args_name_17, 0, tmp_tuple_element_34 );
    tmp_tuple_element_34 = tmp_pyasn1_modules$rfc2251_class_creation_17__bases;

    Py_INCREF( tmp_tuple_element_34 );
    PyTuple_SET_ITEM( tmp_args_name_17, 1, tmp_tuple_element_34 );
    tmp_kw_name_17 = tmp_pyasn1_modules$rfc2251_class_creation_17__class_decl_dict;

    frame_module->f_lineno = 59;
    tmp_assign_source_98 = CALL_FUNCTION( tmp_called_name_18, tmp_args_name_17, tmp_kw_name_17 );
    Py_DECREF( tmp_called_name_18 );
    Py_DECREF( tmp_args_name_17 );
    if ( tmp_assign_source_98 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 59;
        goto try_except_handler_17;
    }
    goto condexpr_end_51;
    condexpr_false_51:;
    tmp_assign_source_98 = PyDict_New();
    condexpr_end_51:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_17__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_17__prepared = tmp_assign_source_98;

    tmp_assign_source_99 = impl_class_17_SaslCredentials_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_17__bases, tmp_pyasn1_modules$rfc2251_class_creation_17__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_17__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_17__prepared );
    if ( tmp_assign_source_99 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 59;
        goto try_except_handler_17;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_SaslCredentials, tmp_assign_source_99 );
    goto try_end_17;
    // Exception handler code:
    try_except_handler_17:;
    exception_keeper_type_17 = exception_type;
    exception_keeper_value_17 = exception_value;
    exception_keeper_tb_17 = exception_tb;
    exception_keeper_lineno_17 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_17__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_17__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_17__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_17__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_17__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_17__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_17__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_17__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_17;
    exception_value = exception_keeper_value_17;
    exception_tb = exception_keeper_tb_17;
    exception_lineno = exception_keeper_lineno_17;

    goto frame_exception_exit_1;
    // End of try:
    try_end_17:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_17__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_17__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_17__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_17__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_17__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_17__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_17__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_17__prepared = NULL;

    // Tried code:
    tmp_assign_source_100 = PyTuple_New( 1 );
    tmp_source_name_30 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_30 == NULL ))
    {
        tmp_source_name_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_30 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 65;
        goto try_except_handler_18;
    }

    tmp_tuple_element_35 = LOOKUP_ATTRIBUTE( tmp_source_name_30, const_str_plain_Choice );
    if ( tmp_tuple_element_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 65;
        goto try_except_handler_18;
    }
    PyTuple_SET_ITEM( tmp_assign_source_100, 0, tmp_tuple_element_35 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_18__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_18__bases = tmp_assign_source_100;

    tmp_assign_source_101 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_18__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_18__class_decl_dict = tmp_assign_source_101;

    tmp_compare_left_35 = const_str_plain_metaclass;
    tmp_compare_right_35 = tmp_pyasn1_modules$rfc2251_class_creation_18__class_decl_dict;

    tmp_cmp_In_35 = PySequence_Contains( tmp_compare_right_35, tmp_compare_left_35 );
    if ( tmp_cmp_In_35 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 65;
        goto try_except_handler_18;
    }
    if ( tmp_cmp_In_35 == 1 )
    {
        goto condexpr_true_52;
    }
    else
    {
        goto condexpr_false_52;
    }
    condexpr_true_52:;
    tmp_dget_dict_18 = tmp_pyasn1_modules$rfc2251_class_creation_18__class_decl_dict;

    tmp_dget_key_18 = const_str_plain_metaclass;
    tmp_class_meta_18 = DICT_GET_ITEM( tmp_dget_dict_18, tmp_dget_key_18 );
    if ( tmp_class_meta_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 65;
        goto try_except_handler_18;
    }
    goto condexpr_end_52;
    condexpr_false_52:;
    tmp_cond_value_18 = tmp_pyasn1_modules$rfc2251_class_creation_18__bases;

    tmp_cond_truth_18 = CHECK_IF_TRUE( tmp_cond_value_18 );
    if ( tmp_cond_truth_18 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 65;
        goto try_except_handler_18;
    }
    if ( tmp_cond_truth_18 == 1 )
    {
        goto condexpr_true_53;
    }
    else
    {
        goto condexpr_false_53;
    }
    condexpr_true_53:;
    tmp_subscribed_name_18 = tmp_pyasn1_modules$rfc2251_class_creation_18__bases;

    tmp_subscript_name_18 = const_int_0;
    tmp_type_arg_18 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_18, tmp_subscript_name_18 );
    if ( tmp_type_arg_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 65;
        goto try_except_handler_18;
    }
    tmp_class_meta_18 = BUILTIN_TYPE1( tmp_type_arg_18 );
    Py_DECREF( tmp_type_arg_18 );
    if ( tmp_class_meta_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 65;
        goto try_except_handler_18;
    }
    goto condexpr_end_53;
    condexpr_false_53:;
    tmp_class_meta_18 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_18 != NULL );
    Py_INCREF( tmp_class_meta_18 );
    condexpr_end_53:;
    condexpr_end_52:;
    tmp_class_bases_18 = tmp_pyasn1_modules$rfc2251_class_creation_18__bases;

    tmp_assign_source_102 = SELECT_METACLASS( tmp_class_meta_18, tmp_class_bases_18 );
    if ( tmp_assign_source_102 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_18 );

        exception_lineno = 65;
        goto try_except_handler_18;
    }
    Py_DECREF( tmp_class_meta_18 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_18__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_18__metaclass = tmp_assign_source_102;

    tmp_compare_left_36 = const_str_plain_metaclass;
    tmp_compare_right_36 = tmp_pyasn1_modules$rfc2251_class_creation_18__class_decl_dict;

    tmp_cmp_In_36 = PySequence_Contains( tmp_compare_right_36, tmp_compare_left_36 );
    if ( tmp_cmp_In_36 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 65;
        goto try_except_handler_18;
    }
    if ( tmp_cmp_In_36 == 1 )
    {
        goto branch_yes_18;
    }
    else
    {
        goto branch_no_18;
    }
    branch_yes_18:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_18__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 65;
        goto try_except_handler_18;
    }
    branch_no_18:;
    tmp_hasattr_source_18 = tmp_pyasn1_modules$rfc2251_class_creation_18__metaclass;

    tmp_hasattr_attr_18 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_18, tmp_hasattr_attr_18 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 65;
        goto try_except_handler_18;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_54;
    }
    else
    {
        goto condexpr_false_54;
    }
    condexpr_true_54:;
    tmp_source_name_31 = tmp_pyasn1_modules$rfc2251_class_creation_18__metaclass;

    tmp_called_name_19 = LOOKUP_ATTRIBUTE( tmp_source_name_31, const_str_plain___prepare__ );
    if ( tmp_called_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 65;
        goto try_except_handler_18;
    }
    tmp_args_name_18 = PyTuple_New( 2 );
    tmp_tuple_element_36 = const_str_plain_AuthenticationChoice;
    Py_INCREF( tmp_tuple_element_36 );
    PyTuple_SET_ITEM( tmp_args_name_18, 0, tmp_tuple_element_36 );
    tmp_tuple_element_36 = tmp_pyasn1_modules$rfc2251_class_creation_18__bases;

    Py_INCREF( tmp_tuple_element_36 );
    PyTuple_SET_ITEM( tmp_args_name_18, 1, tmp_tuple_element_36 );
    tmp_kw_name_18 = tmp_pyasn1_modules$rfc2251_class_creation_18__class_decl_dict;

    frame_module->f_lineno = 65;
    tmp_assign_source_103 = CALL_FUNCTION( tmp_called_name_19, tmp_args_name_18, tmp_kw_name_18 );
    Py_DECREF( tmp_called_name_19 );
    Py_DECREF( tmp_args_name_18 );
    if ( tmp_assign_source_103 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 65;
        goto try_except_handler_18;
    }
    goto condexpr_end_54;
    condexpr_false_54:;
    tmp_assign_source_103 = PyDict_New();
    condexpr_end_54:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_18__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_18__prepared = tmp_assign_source_103;

    tmp_assign_source_104 = impl_class_18_AuthenticationChoice_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_18__bases, tmp_pyasn1_modules$rfc2251_class_creation_18__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_18__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_18__prepared );
    if ( tmp_assign_source_104 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 65;
        goto try_except_handler_18;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AuthenticationChoice, tmp_assign_source_104 );
    goto try_end_18;
    // Exception handler code:
    try_except_handler_18:;
    exception_keeper_type_18 = exception_type;
    exception_keeper_value_18 = exception_value;
    exception_keeper_tb_18 = exception_tb;
    exception_keeper_lineno_18 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_18__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_18__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_18__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_18__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_18__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_18__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_18__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_18__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_18;
    exception_value = exception_keeper_value_18;
    exception_tb = exception_keeper_tb_18;
    exception_lineno = exception_keeper_lineno_18;

    goto frame_exception_exit_1;
    // End of try:
    try_end_18:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_18__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_18__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_18__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_18__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_18__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_18__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_18__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_18__prepared = NULL;

    // Tried code:
    tmp_assign_source_105 = PyTuple_New( 1 );
    tmp_source_name_32 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_32 == NULL ))
    {
        tmp_source_name_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_32 == NULL )
    {
        Py_DECREF( tmp_assign_source_105 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 73;
        goto try_except_handler_19;
    }

    tmp_tuple_element_37 = LOOKUP_ATTRIBUTE( tmp_source_name_32, const_str_plain_Sequence );
    if ( tmp_tuple_element_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_105 );

        exception_lineno = 73;
        goto try_except_handler_19;
    }
    PyTuple_SET_ITEM( tmp_assign_source_105, 0, tmp_tuple_element_37 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_19__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_19__bases = tmp_assign_source_105;

    tmp_assign_source_106 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_19__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_19__class_decl_dict = tmp_assign_source_106;

    tmp_compare_left_37 = const_str_plain_metaclass;
    tmp_compare_right_37 = tmp_pyasn1_modules$rfc2251_class_creation_19__class_decl_dict;

    tmp_cmp_In_37 = PySequence_Contains( tmp_compare_right_37, tmp_compare_left_37 );
    if ( tmp_cmp_In_37 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 73;
        goto try_except_handler_19;
    }
    if ( tmp_cmp_In_37 == 1 )
    {
        goto condexpr_true_55;
    }
    else
    {
        goto condexpr_false_55;
    }
    condexpr_true_55:;
    tmp_dget_dict_19 = tmp_pyasn1_modules$rfc2251_class_creation_19__class_decl_dict;

    tmp_dget_key_19 = const_str_plain_metaclass;
    tmp_class_meta_19 = DICT_GET_ITEM( tmp_dget_dict_19, tmp_dget_key_19 );
    if ( tmp_class_meta_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 73;
        goto try_except_handler_19;
    }
    goto condexpr_end_55;
    condexpr_false_55:;
    tmp_cond_value_19 = tmp_pyasn1_modules$rfc2251_class_creation_19__bases;

    tmp_cond_truth_19 = CHECK_IF_TRUE( tmp_cond_value_19 );
    if ( tmp_cond_truth_19 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 73;
        goto try_except_handler_19;
    }
    if ( tmp_cond_truth_19 == 1 )
    {
        goto condexpr_true_56;
    }
    else
    {
        goto condexpr_false_56;
    }
    condexpr_true_56:;
    tmp_subscribed_name_19 = tmp_pyasn1_modules$rfc2251_class_creation_19__bases;

    tmp_subscript_name_19 = const_int_0;
    tmp_type_arg_19 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_19, tmp_subscript_name_19 );
    if ( tmp_type_arg_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 73;
        goto try_except_handler_19;
    }
    tmp_class_meta_19 = BUILTIN_TYPE1( tmp_type_arg_19 );
    Py_DECREF( tmp_type_arg_19 );
    if ( tmp_class_meta_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 73;
        goto try_except_handler_19;
    }
    goto condexpr_end_56;
    condexpr_false_56:;
    tmp_class_meta_19 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_19 != NULL );
    Py_INCREF( tmp_class_meta_19 );
    condexpr_end_56:;
    condexpr_end_55:;
    tmp_class_bases_19 = tmp_pyasn1_modules$rfc2251_class_creation_19__bases;

    tmp_assign_source_107 = SELECT_METACLASS( tmp_class_meta_19, tmp_class_bases_19 );
    if ( tmp_assign_source_107 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_19 );

        exception_lineno = 73;
        goto try_except_handler_19;
    }
    Py_DECREF( tmp_class_meta_19 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_19__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_19__metaclass = tmp_assign_source_107;

    tmp_compare_left_38 = const_str_plain_metaclass;
    tmp_compare_right_38 = tmp_pyasn1_modules$rfc2251_class_creation_19__class_decl_dict;

    tmp_cmp_In_38 = PySequence_Contains( tmp_compare_right_38, tmp_compare_left_38 );
    if ( tmp_cmp_In_38 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 73;
        goto try_except_handler_19;
    }
    if ( tmp_cmp_In_38 == 1 )
    {
        goto branch_yes_19;
    }
    else
    {
        goto branch_no_19;
    }
    branch_yes_19:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_19__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 73;
        goto try_except_handler_19;
    }
    branch_no_19:;
    tmp_hasattr_source_19 = tmp_pyasn1_modules$rfc2251_class_creation_19__metaclass;

    tmp_hasattr_attr_19 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_19, tmp_hasattr_attr_19 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 73;
        goto try_except_handler_19;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_57;
    }
    else
    {
        goto condexpr_false_57;
    }
    condexpr_true_57:;
    tmp_source_name_33 = tmp_pyasn1_modules$rfc2251_class_creation_19__metaclass;

    tmp_called_name_20 = LOOKUP_ATTRIBUTE( tmp_source_name_33, const_str_plain___prepare__ );
    if ( tmp_called_name_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 73;
        goto try_except_handler_19;
    }
    tmp_args_name_19 = PyTuple_New( 2 );
    tmp_tuple_element_38 = const_str_plain_BindRequest;
    Py_INCREF( tmp_tuple_element_38 );
    PyTuple_SET_ITEM( tmp_args_name_19, 0, tmp_tuple_element_38 );
    tmp_tuple_element_38 = tmp_pyasn1_modules$rfc2251_class_creation_19__bases;

    Py_INCREF( tmp_tuple_element_38 );
    PyTuple_SET_ITEM( tmp_args_name_19, 1, tmp_tuple_element_38 );
    tmp_kw_name_19 = tmp_pyasn1_modules$rfc2251_class_creation_19__class_decl_dict;

    frame_module->f_lineno = 73;
    tmp_assign_source_108 = CALL_FUNCTION( tmp_called_name_20, tmp_args_name_19, tmp_kw_name_19 );
    Py_DECREF( tmp_called_name_20 );
    Py_DECREF( tmp_args_name_19 );
    if ( tmp_assign_source_108 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 73;
        goto try_except_handler_19;
    }
    goto condexpr_end_57;
    condexpr_false_57:;
    tmp_assign_source_108 = PyDict_New();
    condexpr_end_57:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_19__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_19__prepared = tmp_assign_source_108;

    tmp_assign_source_109 = impl_class_19_BindRequest_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_19__bases, tmp_pyasn1_modules$rfc2251_class_creation_19__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_19__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_19__prepared );
    if ( tmp_assign_source_109 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 73;
        goto try_except_handler_19;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_BindRequest, tmp_assign_source_109 );
    goto try_end_19;
    // Exception handler code:
    try_except_handler_19:;
    exception_keeper_type_19 = exception_type;
    exception_keeper_value_19 = exception_value;
    exception_keeper_tb_19 = exception_tb;
    exception_keeper_lineno_19 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_19__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_19__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_19__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_19__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_19__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_19__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_19__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_19__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_19;
    exception_value = exception_keeper_value_19;
    exception_tb = exception_keeper_tb_19;
    exception_lineno = exception_keeper_lineno_19;

    goto frame_exception_exit_1;
    // End of try:
    try_end_19:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_19__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_19__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_19__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_19__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_19__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_19__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_19__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_19__prepared = NULL;

    // Tried code:
    tmp_assign_source_110 = PyTuple_New( 1 );
    tmp_source_name_34 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_34 == NULL ))
    {
        tmp_source_name_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_34 == NULL )
    {
        Py_DECREF( tmp_assign_source_110 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 83;
        goto try_except_handler_20;
    }

    tmp_tuple_element_39 = LOOKUP_ATTRIBUTE( tmp_source_name_34, const_str_plain_SequenceOf );
    if ( tmp_tuple_element_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_110 );

        exception_lineno = 83;
        goto try_except_handler_20;
    }
    PyTuple_SET_ITEM( tmp_assign_source_110, 0, tmp_tuple_element_39 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_20__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_20__bases = tmp_assign_source_110;

    tmp_assign_source_111 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_20__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_20__class_decl_dict = tmp_assign_source_111;

    tmp_compare_left_39 = const_str_plain_metaclass;
    tmp_compare_right_39 = tmp_pyasn1_modules$rfc2251_class_creation_20__class_decl_dict;

    tmp_cmp_In_39 = PySequence_Contains( tmp_compare_right_39, tmp_compare_left_39 );
    if ( tmp_cmp_In_39 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 83;
        goto try_except_handler_20;
    }
    if ( tmp_cmp_In_39 == 1 )
    {
        goto condexpr_true_58;
    }
    else
    {
        goto condexpr_false_58;
    }
    condexpr_true_58:;
    tmp_dget_dict_20 = tmp_pyasn1_modules$rfc2251_class_creation_20__class_decl_dict;

    tmp_dget_key_20 = const_str_plain_metaclass;
    tmp_class_meta_20 = DICT_GET_ITEM( tmp_dget_dict_20, tmp_dget_key_20 );
    if ( tmp_class_meta_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 83;
        goto try_except_handler_20;
    }
    goto condexpr_end_58;
    condexpr_false_58:;
    tmp_cond_value_20 = tmp_pyasn1_modules$rfc2251_class_creation_20__bases;

    tmp_cond_truth_20 = CHECK_IF_TRUE( tmp_cond_value_20 );
    if ( tmp_cond_truth_20 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 83;
        goto try_except_handler_20;
    }
    if ( tmp_cond_truth_20 == 1 )
    {
        goto condexpr_true_59;
    }
    else
    {
        goto condexpr_false_59;
    }
    condexpr_true_59:;
    tmp_subscribed_name_20 = tmp_pyasn1_modules$rfc2251_class_creation_20__bases;

    tmp_subscript_name_20 = const_int_0;
    tmp_type_arg_20 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_20, tmp_subscript_name_20 );
    if ( tmp_type_arg_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 83;
        goto try_except_handler_20;
    }
    tmp_class_meta_20 = BUILTIN_TYPE1( tmp_type_arg_20 );
    Py_DECREF( tmp_type_arg_20 );
    if ( tmp_class_meta_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 83;
        goto try_except_handler_20;
    }
    goto condexpr_end_59;
    condexpr_false_59:;
    tmp_class_meta_20 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_20 != NULL );
    Py_INCREF( tmp_class_meta_20 );
    condexpr_end_59:;
    condexpr_end_58:;
    tmp_class_bases_20 = tmp_pyasn1_modules$rfc2251_class_creation_20__bases;

    tmp_assign_source_112 = SELECT_METACLASS( tmp_class_meta_20, tmp_class_bases_20 );
    if ( tmp_assign_source_112 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_20 );

        exception_lineno = 83;
        goto try_except_handler_20;
    }
    Py_DECREF( tmp_class_meta_20 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_20__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_20__metaclass = tmp_assign_source_112;

    tmp_compare_left_40 = const_str_plain_metaclass;
    tmp_compare_right_40 = tmp_pyasn1_modules$rfc2251_class_creation_20__class_decl_dict;

    tmp_cmp_In_40 = PySequence_Contains( tmp_compare_right_40, tmp_compare_left_40 );
    if ( tmp_cmp_In_40 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 83;
        goto try_except_handler_20;
    }
    if ( tmp_cmp_In_40 == 1 )
    {
        goto branch_yes_20;
    }
    else
    {
        goto branch_no_20;
    }
    branch_yes_20:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_20__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 83;
        goto try_except_handler_20;
    }
    branch_no_20:;
    tmp_hasattr_source_20 = tmp_pyasn1_modules$rfc2251_class_creation_20__metaclass;

    tmp_hasattr_attr_20 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_20, tmp_hasattr_attr_20 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 83;
        goto try_except_handler_20;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_60;
    }
    else
    {
        goto condexpr_false_60;
    }
    condexpr_true_60:;
    tmp_source_name_35 = tmp_pyasn1_modules$rfc2251_class_creation_20__metaclass;

    tmp_called_name_21 = LOOKUP_ATTRIBUTE( tmp_source_name_35, const_str_plain___prepare__ );
    if ( tmp_called_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 83;
        goto try_except_handler_20;
    }
    tmp_args_name_20 = PyTuple_New( 2 );
    tmp_tuple_element_40 = const_str_plain_PartialAttributeList;
    Py_INCREF( tmp_tuple_element_40 );
    PyTuple_SET_ITEM( tmp_args_name_20, 0, tmp_tuple_element_40 );
    tmp_tuple_element_40 = tmp_pyasn1_modules$rfc2251_class_creation_20__bases;

    Py_INCREF( tmp_tuple_element_40 );
    PyTuple_SET_ITEM( tmp_args_name_20, 1, tmp_tuple_element_40 );
    tmp_kw_name_20 = tmp_pyasn1_modules$rfc2251_class_creation_20__class_decl_dict;

    frame_module->f_lineno = 83;
    tmp_assign_source_113 = CALL_FUNCTION( tmp_called_name_21, tmp_args_name_20, tmp_kw_name_20 );
    Py_DECREF( tmp_called_name_21 );
    Py_DECREF( tmp_args_name_20 );
    if ( tmp_assign_source_113 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 83;
        goto try_except_handler_20;
    }
    goto condexpr_end_60;
    condexpr_false_60:;
    tmp_assign_source_113 = PyDict_New();
    condexpr_end_60:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_20__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_20__prepared = tmp_assign_source_113;

    tmp_assign_source_114 = impl_class_20_PartialAttributeList_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_20__bases, tmp_pyasn1_modules$rfc2251_class_creation_20__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_20__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_20__prepared );
    if ( tmp_assign_source_114 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 83;
        goto try_except_handler_20;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_PartialAttributeList, tmp_assign_source_114 );
    goto try_end_20;
    // Exception handler code:
    try_except_handler_20:;
    exception_keeper_type_20 = exception_type;
    exception_keeper_value_20 = exception_value;
    exception_keeper_tb_20 = exception_tb;
    exception_keeper_lineno_20 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_20__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_20__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_20__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_20__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_20__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_20__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_20__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_20__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_20;
    exception_value = exception_keeper_value_20;
    exception_tb = exception_keeper_tb_20;
    exception_lineno = exception_keeper_lineno_20;

    goto frame_exception_exit_1;
    // End of try:
    try_end_20:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_20__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_20__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_20__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_20__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_20__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_20__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_20__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_20__prepared = NULL;

    // Tried code:
    tmp_assign_source_115 = PyTuple_New( 1 );
    tmp_source_name_36 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_36 == NULL ))
    {
        tmp_source_name_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_36 == NULL )
    {
        Py_DECREF( tmp_assign_source_115 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 86;
        goto try_except_handler_21;
    }

    tmp_tuple_element_41 = LOOKUP_ATTRIBUTE( tmp_source_name_36, const_str_plain_Sequence );
    if ( tmp_tuple_element_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_115 );

        exception_lineno = 86;
        goto try_except_handler_21;
    }
    PyTuple_SET_ITEM( tmp_assign_source_115, 0, tmp_tuple_element_41 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_21__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_21__bases = tmp_assign_source_115;

    tmp_assign_source_116 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_21__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_21__class_decl_dict = tmp_assign_source_116;

    tmp_compare_left_41 = const_str_plain_metaclass;
    tmp_compare_right_41 = tmp_pyasn1_modules$rfc2251_class_creation_21__class_decl_dict;

    tmp_cmp_In_41 = PySequence_Contains( tmp_compare_right_41, tmp_compare_left_41 );
    if ( tmp_cmp_In_41 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 86;
        goto try_except_handler_21;
    }
    if ( tmp_cmp_In_41 == 1 )
    {
        goto condexpr_true_61;
    }
    else
    {
        goto condexpr_false_61;
    }
    condexpr_true_61:;
    tmp_dget_dict_21 = tmp_pyasn1_modules$rfc2251_class_creation_21__class_decl_dict;

    tmp_dget_key_21 = const_str_plain_metaclass;
    tmp_class_meta_21 = DICT_GET_ITEM( tmp_dget_dict_21, tmp_dget_key_21 );
    if ( tmp_class_meta_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 86;
        goto try_except_handler_21;
    }
    goto condexpr_end_61;
    condexpr_false_61:;
    tmp_cond_value_21 = tmp_pyasn1_modules$rfc2251_class_creation_21__bases;

    tmp_cond_truth_21 = CHECK_IF_TRUE( tmp_cond_value_21 );
    if ( tmp_cond_truth_21 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 86;
        goto try_except_handler_21;
    }
    if ( tmp_cond_truth_21 == 1 )
    {
        goto condexpr_true_62;
    }
    else
    {
        goto condexpr_false_62;
    }
    condexpr_true_62:;
    tmp_subscribed_name_21 = tmp_pyasn1_modules$rfc2251_class_creation_21__bases;

    tmp_subscript_name_21 = const_int_0;
    tmp_type_arg_21 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_21, tmp_subscript_name_21 );
    if ( tmp_type_arg_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 86;
        goto try_except_handler_21;
    }
    tmp_class_meta_21 = BUILTIN_TYPE1( tmp_type_arg_21 );
    Py_DECREF( tmp_type_arg_21 );
    if ( tmp_class_meta_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 86;
        goto try_except_handler_21;
    }
    goto condexpr_end_62;
    condexpr_false_62:;
    tmp_class_meta_21 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_21 != NULL );
    Py_INCREF( tmp_class_meta_21 );
    condexpr_end_62:;
    condexpr_end_61:;
    tmp_class_bases_21 = tmp_pyasn1_modules$rfc2251_class_creation_21__bases;

    tmp_assign_source_117 = SELECT_METACLASS( tmp_class_meta_21, tmp_class_bases_21 );
    if ( tmp_assign_source_117 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_21 );

        exception_lineno = 86;
        goto try_except_handler_21;
    }
    Py_DECREF( tmp_class_meta_21 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_21__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_21__metaclass = tmp_assign_source_117;

    tmp_compare_left_42 = const_str_plain_metaclass;
    tmp_compare_right_42 = tmp_pyasn1_modules$rfc2251_class_creation_21__class_decl_dict;

    tmp_cmp_In_42 = PySequence_Contains( tmp_compare_right_42, tmp_compare_left_42 );
    if ( tmp_cmp_In_42 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 86;
        goto try_except_handler_21;
    }
    if ( tmp_cmp_In_42 == 1 )
    {
        goto branch_yes_21;
    }
    else
    {
        goto branch_no_21;
    }
    branch_yes_21:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_21__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 86;
        goto try_except_handler_21;
    }
    branch_no_21:;
    tmp_hasattr_source_21 = tmp_pyasn1_modules$rfc2251_class_creation_21__metaclass;

    tmp_hasattr_attr_21 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_21, tmp_hasattr_attr_21 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 86;
        goto try_except_handler_21;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_63;
    }
    else
    {
        goto condexpr_false_63;
    }
    condexpr_true_63:;
    tmp_source_name_37 = tmp_pyasn1_modules$rfc2251_class_creation_21__metaclass;

    tmp_called_name_22 = LOOKUP_ATTRIBUTE( tmp_source_name_37, const_str_plain___prepare__ );
    if ( tmp_called_name_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 86;
        goto try_except_handler_21;
    }
    tmp_args_name_21 = PyTuple_New( 2 );
    tmp_tuple_element_42 = const_str_plain_SearchResultEntry;
    Py_INCREF( tmp_tuple_element_42 );
    PyTuple_SET_ITEM( tmp_args_name_21, 0, tmp_tuple_element_42 );
    tmp_tuple_element_42 = tmp_pyasn1_modules$rfc2251_class_creation_21__bases;

    Py_INCREF( tmp_tuple_element_42 );
    PyTuple_SET_ITEM( tmp_args_name_21, 1, tmp_tuple_element_42 );
    tmp_kw_name_21 = tmp_pyasn1_modules$rfc2251_class_creation_21__class_decl_dict;

    frame_module->f_lineno = 86;
    tmp_assign_source_118 = CALL_FUNCTION( tmp_called_name_22, tmp_args_name_21, tmp_kw_name_21 );
    Py_DECREF( tmp_called_name_22 );
    Py_DECREF( tmp_args_name_21 );
    if ( tmp_assign_source_118 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 86;
        goto try_except_handler_21;
    }
    goto condexpr_end_63;
    condexpr_false_63:;
    tmp_assign_source_118 = PyDict_New();
    condexpr_end_63:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_21__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_21__prepared = tmp_assign_source_118;

    tmp_assign_source_119 = impl_class_21_SearchResultEntry_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_21__bases, tmp_pyasn1_modules$rfc2251_class_creation_21__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_21__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_21__prepared );
    if ( tmp_assign_source_119 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 86;
        goto try_except_handler_21;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_SearchResultEntry, tmp_assign_source_119 );
    goto try_end_21;
    // Exception handler code:
    try_except_handler_21:;
    exception_keeper_type_21 = exception_type;
    exception_keeper_value_21 = exception_value;
    exception_keeper_tb_21 = exception_tb;
    exception_keeper_lineno_21 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_21__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_21__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_21__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_21__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_21__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_21__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_21__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_21__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_21;
    exception_value = exception_keeper_value_21;
    exception_tb = exception_keeper_tb_21;
    exception_lineno = exception_keeper_lineno_21;

    goto frame_exception_exit_1;
    // End of try:
    try_end_21:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_21__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_21__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_21__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_21__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_21__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_21__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_21__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_21__prepared = NULL;

    // Tried code:
    tmp_assign_source_120 = PyTuple_New( 1 );
    tmp_source_name_38 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_38 == NULL ))
    {
        tmp_source_name_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_38 == NULL )
    {
        Py_DECREF( tmp_assign_source_120 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 95;
        goto try_except_handler_22;
    }

    tmp_tuple_element_43 = LOOKUP_ATTRIBUTE( tmp_source_name_38, const_str_plain_Sequence );
    if ( tmp_tuple_element_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_120 );

        exception_lineno = 95;
        goto try_except_handler_22;
    }
    PyTuple_SET_ITEM( tmp_assign_source_120, 0, tmp_tuple_element_43 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_22__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_22__bases = tmp_assign_source_120;

    tmp_assign_source_121 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_22__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_22__class_decl_dict = tmp_assign_source_121;

    tmp_compare_left_43 = const_str_plain_metaclass;
    tmp_compare_right_43 = tmp_pyasn1_modules$rfc2251_class_creation_22__class_decl_dict;

    tmp_cmp_In_43 = PySequence_Contains( tmp_compare_right_43, tmp_compare_left_43 );
    if ( tmp_cmp_In_43 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 95;
        goto try_except_handler_22;
    }
    if ( tmp_cmp_In_43 == 1 )
    {
        goto condexpr_true_64;
    }
    else
    {
        goto condexpr_false_64;
    }
    condexpr_true_64:;
    tmp_dget_dict_22 = tmp_pyasn1_modules$rfc2251_class_creation_22__class_decl_dict;

    tmp_dget_key_22 = const_str_plain_metaclass;
    tmp_class_meta_22 = DICT_GET_ITEM( tmp_dget_dict_22, tmp_dget_key_22 );
    if ( tmp_class_meta_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 95;
        goto try_except_handler_22;
    }
    goto condexpr_end_64;
    condexpr_false_64:;
    tmp_cond_value_22 = tmp_pyasn1_modules$rfc2251_class_creation_22__bases;

    tmp_cond_truth_22 = CHECK_IF_TRUE( tmp_cond_value_22 );
    if ( tmp_cond_truth_22 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 95;
        goto try_except_handler_22;
    }
    if ( tmp_cond_truth_22 == 1 )
    {
        goto condexpr_true_65;
    }
    else
    {
        goto condexpr_false_65;
    }
    condexpr_true_65:;
    tmp_subscribed_name_22 = tmp_pyasn1_modules$rfc2251_class_creation_22__bases;

    tmp_subscript_name_22 = const_int_0;
    tmp_type_arg_22 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_22, tmp_subscript_name_22 );
    if ( tmp_type_arg_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 95;
        goto try_except_handler_22;
    }
    tmp_class_meta_22 = BUILTIN_TYPE1( tmp_type_arg_22 );
    Py_DECREF( tmp_type_arg_22 );
    if ( tmp_class_meta_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 95;
        goto try_except_handler_22;
    }
    goto condexpr_end_65;
    condexpr_false_65:;
    tmp_class_meta_22 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_22 != NULL );
    Py_INCREF( tmp_class_meta_22 );
    condexpr_end_65:;
    condexpr_end_64:;
    tmp_class_bases_22 = tmp_pyasn1_modules$rfc2251_class_creation_22__bases;

    tmp_assign_source_122 = SELECT_METACLASS( tmp_class_meta_22, tmp_class_bases_22 );
    if ( tmp_assign_source_122 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_22 );

        exception_lineno = 95;
        goto try_except_handler_22;
    }
    Py_DECREF( tmp_class_meta_22 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_22__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_22__metaclass = tmp_assign_source_122;

    tmp_compare_left_44 = const_str_plain_metaclass;
    tmp_compare_right_44 = tmp_pyasn1_modules$rfc2251_class_creation_22__class_decl_dict;

    tmp_cmp_In_44 = PySequence_Contains( tmp_compare_right_44, tmp_compare_left_44 );
    if ( tmp_cmp_In_44 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 95;
        goto try_except_handler_22;
    }
    if ( tmp_cmp_In_44 == 1 )
    {
        goto branch_yes_22;
    }
    else
    {
        goto branch_no_22;
    }
    branch_yes_22:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_22__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 95;
        goto try_except_handler_22;
    }
    branch_no_22:;
    tmp_hasattr_source_22 = tmp_pyasn1_modules$rfc2251_class_creation_22__metaclass;

    tmp_hasattr_attr_22 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_22, tmp_hasattr_attr_22 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 95;
        goto try_except_handler_22;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_66;
    }
    else
    {
        goto condexpr_false_66;
    }
    condexpr_true_66:;
    tmp_source_name_39 = tmp_pyasn1_modules$rfc2251_class_creation_22__metaclass;

    tmp_called_name_23 = LOOKUP_ATTRIBUTE( tmp_source_name_39, const_str_plain___prepare__ );
    if ( tmp_called_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 95;
        goto try_except_handler_22;
    }
    tmp_args_name_22 = PyTuple_New( 2 );
    tmp_tuple_element_44 = const_str_plain_MatchingRuleAssertion;
    Py_INCREF( tmp_tuple_element_44 );
    PyTuple_SET_ITEM( tmp_args_name_22, 0, tmp_tuple_element_44 );
    tmp_tuple_element_44 = tmp_pyasn1_modules$rfc2251_class_creation_22__bases;

    Py_INCREF( tmp_tuple_element_44 );
    PyTuple_SET_ITEM( tmp_args_name_22, 1, tmp_tuple_element_44 );
    tmp_kw_name_22 = tmp_pyasn1_modules$rfc2251_class_creation_22__class_decl_dict;

    frame_module->f_lineno = 95;
    tmp_assign_source_123 = CALL_FUNCTION( tmp_called_name_23, tmp_args_name_22, tmp_kw_name_22 );
    Py_DECREF( tmp_called_name_23 );
    Py_DECREF( tmp_args_name_22 );
    if ( tmp_assign_source_123 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 95;
        goto try_except_handler_22;
    }
    goto condexpr_end_66;
    condexpr_false_66:;
    tmp_assign_source_123 = PyDict_New();
    condexpr_end_66:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_22__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_22__prepared = tmp_assign_source_123;

    tmp_assign_source_124 = impl_class_22_MatchingRuleAssertion_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_22__bases, tmp_pyasn1_modules$rfc2251_class_creation_22__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_22__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_22__prepared );
    if ( tmp_assign_source_124 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 95;
        goto try_except_handler_22;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_MatchingRuleAssertion, tmp_assign_source_124 );
    goto try_end_22;
    // Exception handler code:
    try_except_handler_22:;
    exception_keeper_type_22 = exception_type;
    exception_keeper_value_22 = exception_value;
    exception_keeper_tb_22 = exception_tb;
    exception_keeper_lineno_22 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_22__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_22__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_22__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_22__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_22__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_22__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_22__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_22__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_22;
    exception_value = exception_keeper_value_22;
    exception_tb = exception_keeper_tb_22;
    exception_lineno = exception_keeper_lineno_22;

    goto frame_exception_exit_1;
    // End of try:
    try_end_22:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_22__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_22__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_22__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_22__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_22__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_22__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_22__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_22__prepared = NULL;

    // Tried code:
    tmp_assign_source_125 = PyTuple_New( 1 );
    tmp_source_name_40 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_40 == NULL ))
    {
        tmp_source_name_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_40 == NULL )
    {
        Py_DECREF( tmp_assign_source_125 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 103;
        goto try_except_handler_23;
    }

    tmp_tuple_element_45 = LOOKUP_ATTRIBUTE( tmp_source_name_40, const_str_plain_Sequence );
    if ( tmp_tuple_element_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_125 );

        exception_lineno = 103;
        goto try_except_handler_23;
    }
    PyTuple_SET_ITEM( tmp_assign_source_125, 0, tmp_tuple_element_45 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_23__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_23__bases = tmp_assign_source_125;

    tmp_assign_source_126 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_23__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_23__class_decl_dict = tmp_assign_source_126;

    tmp_compare_left_45 = const_str_plain_metaclass;
    tmp_compare_right_45 = tmp_pyasn1_modules$rfc2251_class_creation_23__class_decl_dict;

    tmp_cmp_In_45 = PySequence_Contains( tmp_compare_right_45, tmp_compare_left_45 );
    if ( tmp_cmp_In_45 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 103;
        goto try_except_handler_23;
    }
    if ( tmp_cmp_In_45 == 1 )
    {
        goto condexpr_true_67;
    }
    else
    {
        goto condexpr_false_67;
    }
    condexpr_true_67:;
    tmp_dget_dict_23 = tmp_pyasn1_modules$rfc2251_class_creation_23__class_decl_dict;

    tmp_dget_key_23 = const_str_plain_metaclass;
    tmp_class_meta_23 = DICT_GET_ITEM( tmp_dget_dict_23, tmp_dget_key_23 );
    if ( tmp_class_meta_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 103;
        goto try_except_handler_23;
    }
    goto condexpr_end_67;
    condexpr_false_67:;
    tmp_cond_value_23 = tmp_pyasn1_modules$rfc2251_class_creation_23__bases;

    tmp_cond_truth_23 = CHECK_IF_TRUE( tmp_cond_value_23 );
    if ( tmp_cond_truth_23 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 103;
        goto try_except_handler_23;
    }
    if ( tmp_cond_truth_23 == 1 )
    {
        goto condexpr_true_68;
    }
    else
    {
        goto condexpr_false_68;
    }
    condexpr_true_68:;
    tmp_subscribed_name_23 = tmp_pyasn1_modules$rfc2251_class_creation_23__bases;

    tmp_subscript_name_23 = const_int_0;
    tmp_type_arg_23 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_23, tmp_subscript_name_23 );
    if ( tmp_type_arg_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 103;
        goto try_except_handler_23;
    }
    tmp_class_meta_23 = BUILTIN_TYPE1( tmp_type_arg_23 );
    Py_DECREF( tmp_type_arg_23 );
    if ( tmp_class_meta_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 103;
        goto try_except_handler_23;
    }
    goto condexpr_end_68;
    condexpr_false_68:;
    tmp_class_meta_23 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_23 != NULL );
    Py_INCREF( tmp_class_meta_23 );
    condexpr_end_68:;
    condexpr_end_67:;
    tmp_class_bases_23 = tmp_pyasn1_modules$rfc2251_class_creation_23__bases;

    tmp_assign_source_127 = SELECT_METACLASS( tmp_class_meta_23, tmp_class_bases_23 );
    if ( tmp_assign_source_127 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_23 );

        exception_lineno = 103;
        goto try_except_handler_23;
    }
    Py_DECREF( tmp_class_meta_23 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_23__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_23__metaclass = tmp_assign_source_127;

    tmp_compare_left_46 = const_str_plain_metaclass;
    tmp_compare_right_46 = tmp_pyasn1_modules$rfc2251_class_creation_23__class_decl_dict;

    tmp_cmp_In_46 = PySequence_Contains( tmp_compare_right_46, tmp_compare_left_46 );
    if ( tmp_cmp_In_46 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 103;
        goto try_except_handler_23;
    }
    if ( tmp_cmp_In_46 == 1 )
    {
        goto branch_yes_23;
    }
    else
    {
        goto branch_no_23;
    }
    branch_yes_23:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_23__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 103;
        goto try_except_handler_23;
    }
    branch_no_23:;
    tmp_hasattr_source_23 = tmp_pyasn1_modules$rfc2251_class_creation_23__metaclass;

    tmp_hasattr_attr_23 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_23, tmp_hasattr_attr_23 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 103;
        goto try_except_handler_23;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_69;
    }
    else
    {
        goto condexpr_false_69;
    }
    condexpr_true_69:;
    tmp_source_name_41 = tmp_pyasn1_modules$rfc2251_class_creation_23__metaclass;

    tmp_called_name_24 = LOOKUP_ATTRIBUTE( tmp_source_name_41, const_str_plain___prepare__ );
    if ( tmp_called_name_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 103;
        goto try_except_handler_23;
    }
    tmp_args_name_23 = PyTuple_New( 2 );
    tmp_tuple_element_46 = const_str_plain_SubstringFilter;
    Py_INCREF( tmp_tuple_element_46 );
    PyTuple_SET_ITEM( tmp_args_name_23, 0, tmp_tuple_element_46 );
    tmp_tuple_element_46 = tmp_pyasn1_modules$rfc2251_class_creation_23__bases;

    Py_INCREF( tmp_tuple_element_46 );
    PyTuple_SET_ITEM( tmp_args_name_23, 1, tmp_tuple_element_46 );
    tmp_kw_name_23 = tmp_pyasn1_modules$rfc2251_class_creation_23__class_decl_dict;

    frame_module->f_lineno = 103;
    tmp_assign_source_128 = CALL_FUNCTION( tmp_called_name_24, tmp_args_name_23, tmp_kw_name_23 );
    Py_DECREF( tmp_called_name_24 );
    Py_DECREF( tmp_args_name_23 );
    if ( tmp_assign_source_128 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 103;
        goto try_except_handler_23;
    }
    goto condexpr_end_69;
    condexpr_false_69:;
    tmp_assign_source_128 = PyDict_New();
    condexpr_end_69:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_23__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_23__prepared = tmp_assign_source_128;

    tmp_assign_source_129 = impl_class_23_SubstringFilter_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_23__bases, tmp_pyasn1_modules$rfc2251_class_creation_23__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_23__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_23__prepared );
    if ( tmp_assign_source_129 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 103;
        goto try_except_handler_23;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_SubstringFilter, tmp_assign_source_129 );
    goto try_end_23;
    // Exception handler code:
    try_except_handler_23:;
    exception_keeper_type_23 = exception_type;
    exception_keeper_value_23 = exception_value;
    exception_keeper_tb_23 = exception_tb;
    exception_keeper_lineno_23 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_23__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_23__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_23__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_23__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_23__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_23__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_23__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_23__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_23;
    exception_value = exception_keeper_value_23;
    exception_tb = exception_keeper_tb_23;
    exception_lineno = exception_keeper_lineno_23;

    goto frame_exception_exit_1;
    // End of try:
    try_end_23:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_23__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_23__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_23__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_23__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_23__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_23__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_23__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_23__prepared = NULL;

    // Tried code:
    tmp_assign_source_130 = PyTuple_New( 1 );
    tmp_source_name_42 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_42 == NULL ))
    {
        tmp_source_name_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_42 == NULL )
    {
        Py_DECREF( tmp_assign_source_130 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 111;
        goto try_except_handler_24;
    }

    tmp_tuple_element_47 = LOOKUP_ATTRIBUTE( tmp_source_name_42, const_str_plain_Choice );
    if ( tmp_tuple_element_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_130 );

        exception_lineno = 111;
        goto try_except_handler_24;
    }
    PyTuple_SET_ITEM( tmp_assign_source_130, 0, tmp_tuple_element_47 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_24__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_24__bases = tmp_assign_source_130;

    tmp_assign_source_131 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_24__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_24__class_decl_dict = tmp_assign_source_131;

    tmp_compare_left_47 = const_str_plain_metaclass;
    tmp_compare_right_47 = tmp_pyasn1_modules$rfc2251_class_creation_24__class_decl_dict;

    tmp_cmp_In_47 = PySequence_Contains( tmp_compare_right_47, tmp_compare_left_47 );
    if ( tmp_cmp_In_47 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 111;
        goto try_except_handler_24;
    }
    if ( tmp_cmp_In_47 == 1 )
    {
        goto condexpr_true_70;
    }
    else
    {
        goto condexpr_false_70;
    }
    condexpr_true_70:;
    tmp_dget_dict_24 = tmp_pyasn1_modules$rfc2251_class_creation_24__class_decl_dict;

    tmp_dget_key_24 = const_str_plain_metaclass;
    tmp_class_meta_24 = DICT_GET_ITEM( tmp_dget_dict_24, tmp_dget_key_24 );
    if ( tmp_class_meta_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 111;
        goto try_except_handler_24;
    }
    goto condexpr_end_70;
    condexpr_false_70:;
    tmp_cond_value_24 = tmp_pyasn1_modules$rfc2251_class_creation_24__bases;

    tmp_cond_truth_24 = CHECK_IF_TRUE( tmp_cond_value_24 );
    if ( tmp_cond_truth_24 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 111;
        goto try_except_handler_24;
    }
    if ( tmp_cond_truth_24 == 1 )
    {
        goto condexpr_true_71;
    }
    else
    {
        goto condexpr_false_71;
    }
    condexpr_true_71:;
    tmp_subscribed_name_24 = tmp_pyasn1_modules$rfc2251_class_creation_24__bases;

    tmp_subscript_name_24 = const_int_0;
    tmp_type_arg_24 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_24, tmp_subscript_name_24 );
    if ( tmp_type_arg_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 111;
        goto try_except_handler_24;
    }
    tmp_class_meta_24 = BUILTIN_TYPE1( tmp_type_arg_24 );
    Py_DECREF( tmp_type_arg_24 );
    if ( tmp_class_meta_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 111;
        goto try_except_handler_24;
    }
    goto condexpr_end_71;
    condexpr_false_71:;
    tmp_class_meta_24 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_24 != NULL );
    Py_INCREF( tmp_class_meta_24 );
    condexpr_end_71:;
    condexpr_end_70:;
    tmp_class_bases_24 = tmp_pyasn1_modules$rfc2251_class_creation_24__bases;

    tmp_assign_source_132 = SELECT_METACLASS( tmp_class_meta_24, tmp_class_bases_24 );
    if ( tmp_assign_source_132 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_24 );

        exception_lineno = 111;
        goto try_except_handler_24;
    }
    Py_DECREF( tmp_class_meta_24 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_24__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_24__metaclass = tmp_assign_source_132;

    tmp_compare_left_48 = const_str_plain_metaclass;
    tmp_compare_right_48 = tmp_pyasn1_modules$rfc2251_class_creation_24__class_decl_dict;

    tmp_cmp_In_48 = PySequence_Contains( tmp_compare_right_48, tmp_compare_left_48 );
    if ( tmp_cmp_In_48 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 111;
        goto try_except_handler_24;
    }
    if ( tmp_cmp_In_48 == 1 )
    {
        goto branch_yes_24;
    }
    else
    {
        goto branch_no_24;
    }
    branch_yes_24:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_24__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 111;
        goto try_except_handler_24;
    }
    branch_no_24:;
    tmp_hasattr_source_24 = tmp_pyasn1_modules$rfc2251_class_creation_24__metaclass;

    tmp_hasattr_attr_24 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_24, tmp_hasattr_attr_24 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 111;
        goto try_except_handler_24;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_72;
    }
    else
    {
        goto condexpr_false_72;
    }
    condexpr_true_72:;
    tmp_source_name_43 = tmp_pyasn1_modules$rfc2251_class_creation_24__metaclass;

    tmp_called_name_25 = LOOKUP_ATTRIBUTE( tmp_source_name_43, const_str_plain___prepare__ );
    if ( tmp_called_name_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 111;
        goto try_except_handler_24;
    }
    tmp_args_name_24 = PyTuple_New( 2 );
    tmp_tuple_element_48 = const_str_plain_Filter3;
    Py_INCREF( tmp_tuple_element_48 );
    PyTuple_SET_ITEM( tmp_args_name_24, 0, tmp_tuple_element_48 );
    tmp_tuple_element_48 = tmp_pyasn1_modules$rfc2251_class_creation_24__bases;

    Py_INCREF( tmp_tuple_element_48 );
    PyTuple_SET_ITEM( tmp_args_name_24, 1, tmp_tuple_element_48 );
    tmp_kw_name_24 = tmp_pyasn1_modules$rfc2251_class_creation_24__class_decl_dict;

    frame_module->f_lineno = 111;
    tmp_assign_source_133 = CALL_FUNCTION( tmp_called_name_25, tmp_args_name_24, tmp_kw_name_24 );
    Py_DECREF( tmp_called_name_25 );
    Py_DECREF( tmp_args_name_24 );
    if ( tmp_assign_source_133 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 111;
        goto try_except_handler_24;
    }
    goto condexpr_end_72;
    condexpr_false_72:;
    tmp_assign_source_133 = PyDict_New();
    condexpr_end_72:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_24__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_24__prepared = tmp_assign_source_133;

    tmp_assign_source_134 = impl_class_24_Filter3_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_24__bases, tmp_pyasn1_modules$rfc2251_class_creation_24__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_24__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_24__prepared );
    if ( tmp_assign_source_134 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 111;
        goto try_except_handler_24;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_Filter3, tmp_assign_source_134 );
    goto try_end_24;
    // Exception handler code:
    try_except_handler_24:;
    exception_keeper_type_24 = exception_type;
    exception_keeper_value_24 = exception_value;
    exception_keeper_tb_24 = exception_tb;
    exception_keeper_lineno_24 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_24__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_24__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_24__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_24__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_24__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_24__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_24__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_24__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_24;
    exception_value = exception_keeper_value_24;
    exception_tb = exception_keeper_tb_24;
    exception_lineno = exception_keeper_lineno_24;

    goto frame_exception_exit_1;
    // End of try:
    try_end_24:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_24__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_24__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_24__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_24__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_24__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_24__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_24__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_24__prepared = NULL;

    // Tried code:
    tmp_assign_source_135 = PyTuple_New( 1 );
    tmp_source_name_44 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_44 == NULL ))
    {
        tmp_source_name_44 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_44 == NULL )
    {
        Py_DECREF( tmp_assign_source_135 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 122;
        goto try_except_handler_25;
    }

    tmp_tuple_element_49 = LOOKUP_ATTRIBUTE( tmp_source_name_44, const_str_plain_Choice );
    if ( tmp_tuple_element_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_135 );

        exception_lineno = 122;
        goto try_except_handler_25;
    }
    PyTuple_SET_ITEM( tmp_assign_source_135, 0, tmp_tuple_element_49 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_25__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_25__bases = tmp_assign_source_135;

    tmp_assign_source_136 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_25__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_25__class_decl_dict = tmp_assign_source_136;

    tmp_compare_left_49 = const_str_plain_metaclass;
    tmp_compare_right_49 = tmp_pyasn1_modules$rfc2251_class_creation_25__class_decl_dict;

    tmp_cmp_In_49 = PySequence_Contains( tmp_compare_right_49, tmp_compare_left_49 );
    if ( tmp_cmp_In_49 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 122;
        goto try_except_handler_25;
    }
    if ( tmp_cmp_In_49 == 1 )
    {
        goto condexpr_true_73;
    }
    else
    {
        goto condexpr_false_73;
    }
    condexpr_true_73:;
    tmp_dget_dict_25 = tmp_pyasn1_modules$rfc2251_class_creation_25__class_decl_dict;

    tmp_dget_key_25 = const_str_plain_metaclass;
    tmp_class_meta_25 = DICT_GET_ITEM( tmp_dget_dict_25, tmp_dget_key_25 );
    if ( tmp_class_meta_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 122;
        goto try_except_handler_25;
    }
    goto condexpr_end_73;
    condexpr_false_73:;
    tmp_cond_value_25 = tmp_pyasn1_modules$rfc2251_class_creation_25__bases;

    tmp_cond_truth_25 = CHECK_IF_TRUE( tmp_cond_value_25 );
    if ( tmp_cond_truth_25 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 122;
        goto try_except_handler_25;
    }
    if ( tmp_cond_truth_25 == 1 )
    {
        goto condexpr_true_74;
    }
    else
    {
        goto condexpr_false_74;
    }
    condexpr_true_74:;
    tmp_subscribed_name_25 = tmp_pyasn1_modules$rfc2251_class_creation_25__bases;

    tmp_subscript_name_25 = const_int_0;
    tmp_type_arg_25 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_25, tmp_subscript_name_25 );
    if ( tmp_type_arg_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 122;
        goto try_except_handler_25;
    }
    tmp_class_meta_25 = BUILTIN_TYPE1( tmp_type_arg_25 );
    Py_DECREF( tmp_type_arg_25 );
    if ( tmp_class_meta_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 122;
        goto try_except_handler_25;
    }
    goto condexpr_end_74;
    condexpr_false_74:;
    tmp_class_meta_25 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_25 != NULL );
    Py_INCREF( tmp_class_meta_25 );
    condexpr_end_74:;
    condexpr_end_73:;
    tmp_class_bases_25 = tmp_pyasn1_modules$rfc2251_class_creation_25__bases;

    tmp_assign_source_137 = SELECT_METACLASS( tmp_class_meta_25, tmp_class_bases_25 );
    if ( tmp_assign_source_137 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_25 );

        exception_lineno = 122;
        goto try_except_handler_25;
    }
    Py_DECREF( tmp_class_meta_25 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_25__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_25__metaclass = tmp_assign_source_137;

    tmp_compare_left_50 = const_str_plain_metaclass;
    tmp_compare_right_50 = tmp_pyasn1_modules$rfc2251_class_creation_25__class_decl_dict;

    tmp_cmp_In_50 = PySequence_Contains( tmp_compare_right_50, tmp_compare_left_50 );
    if ( tmp_cmp_In_50 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 122;
        goto try_except_handler_25;
    }
    if ( tmp_cmp_In_50 == 1 )
    {
        goto branch_yes_25;
    }
    else
    {
        goto branch_no_25;
    }
    branch_yes_25:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_25__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 122;
        goto try_except_handler_25;
    }
    branch_no_25:;
    tmp_hasattr_source_25 = tmp_pyasn1_modules$rfc2251_class_creation_25__metaclass;

    tmp_hasattr_attr_25 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_25, tmp_hasattr_attr_25 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 122;
        goto try_except_handler_25;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_75;
    }
    else
    {
        goto condexpr_false_75;
    }
    condexpr_true_75:;
    tmp_source_name_45 = tmp_pyasn1_modules$rfc2251_class_creation_25__metaclass;

    tmp_called_name_26 = LOOKUP_ATTRIBUTE( tmp_source_name_45, const_str_plain___prepare__ );
    if ( tmp_called_name_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 122;
        goto try_except_handler_25;
    }
    tmp_args_name_25 = PyTuple_New( 2 );
    tmp_tuple_element_50 = const_str_plain_Filter2;
    Py_INCREF( tmp_tuple_element_50 );
    PyTuple_SET_ITEM( tmp_args_name_25, 0, tmp_tuple_element_50 );
    tmp_tuple_element_50 = tmp_pyasn1_modules$rfc2251_class_creation_25__bases;

    Py_INCREF( tmp_tuple_element_50 );
    PyTuple_SET_ITEM( tmp_args_name_25, 1, tmp_tuple_element_50 );
    tmp_kw_name_25 = tmp_pyasn1_modules$rfc2251_class_creation_25__class_decl_dict;

    frame_module->f_lineno = 122;
    tmp_assign_source_138 = CALL_FUNCTION( tmp_called_name_26, tmp_args_name_25, tmp_kw_name_25 );
    Py_DECREF( tmp_called_name_26 );
    Py_DECREF( tmp_args_name_25 );
    if ( tmp_assign_source_138 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 122;
        goto try_except_handler_25;
    }
    goto condexpr_end_75;
    condexpr_false_75:;
    tmp_assign_source_138 = PyDict_New();
    condexpr_end_75:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_25__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_25__prepared = tmp_assign_source_138;

    tmp_assign_source_139 = impl_class_25_Filter2_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_25__bases, tmp_pyasn1_modules$rfc2251_class_creation_25__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_25__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_25__prepared );
    if ( tmp_assign_source_139 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 122;
        goto try_except_handler_25;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_Filter2, tmp_assign_source_139 );
    goto try_end_25;
    // Exception handler code:
    try_except_handler_25:;
    exception_keeper_type_25 = exception_type;
    exception_keeper_value_25 = exception_value;
    exception_keeper_tb_25 = exception_tb;
    exception_keeper_lineno_25 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_25__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_25__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_25__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_25__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_25__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_25__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_25__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_25__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_25;
    exception_value = exception_keeper_value_25;
    exception_tb = exception_keeper_tb_25;
    exception_lineno = exception_keeper_lineno_25;

    goto frame_exception_exit_1;
    // End of try:
    try_end_25:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_25__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_25__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_25__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_25__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_25__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_25__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_25__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_25__prepared = NULL;

    // Tried code:
    tmp_assign_source_140 = PyTuple_New( 1 );
    tmp_source_name_46 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_46 == NULL ))
    {
        tmp_source_name_46 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_46 == NULL )
    {
        Py_DECREF( tmp_assign_source_140 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 136;
        goto try_except_handler_26;
    }

    tmp_tuple_element_51 = LOOKUP_ATTRIBUTE( tmp_source_name_46, const_str_plain_Choice );
    if ( tmp_tuple_element_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_140 );

        exception_lineno = 136;
        goto try_except_handler_26;
    }
    PyTuple_SET_ITEM( tmp_assign_source_140, 0, tmp_tuple_element_51 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_26__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_26__bases = tmp_assign_source_140;

    tmp_assign_source_141 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_26__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_26__class_decl_dict = tmp_assign_source_141;

    tmp_compare_left_51 = const_str_plain_metaclass;
    tmp_compare_right_51 = tmp_pyasn1_modules$rfc2251_class_creation_26__class_decl_dict;

    tmp_cmp_In_51 = PySequence_Contains( tmp_compare_right_51, tmp_compare_left_51 );
    if ( tmp_cmp_In_51 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 136;
        goto try_except_handler_26;
    }
    if ( tmp_cmp_In_51 == 1 )
    {
        goto condexpr_true_76;
    }
    else
    {
        goto condexpr_false_76;
    }
    condexpr_true_76:;
    tmp_dget_dict_26 = tmp_pyasn1_modules$rfc2251_class_creation_26__class_decl_dict;

    tmp_dget_key_26 = const_str_plain_metaclass;
    tmp_class_meta_26 = DICT_GET_ITEM( tmp_dget_dict_26, tmp_dget_key_26 );
    if ( tmp_class_meta_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 136;
        goto try_except_handler_26;
    }
    goto condexpr_end_76;
    condexpr_false_76:;
    tmp_cond_value_26 = tmp_pyasn1_modules$rfc2251_class_creation_26__bases;

    tmp_cond_truth_26 = CHECK_IF_TRUE( tmp_cond_value_26 );
    if ( tmp_cond_truth_26 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 136;
        goto try_except_handler_26;
    }
    if ( tmp_cond_truth_26 == 1 )
    {
        goto condexpr_true_77;
    }
    else
    {
        goto condexpr_false_77;
    }
    condexpr_true_77:;
    tmp_subscribed_name_26 = tmp_pyasn1_modules$rfc2251_class_creation_26__bases;

    tmp_subscript_name_26 = const_int_0;
    tmp_type_arg_26 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_26, tmp_subscript_name_26 );
    if ( tmp_type_arg_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 136;
        goto try_except_handler_26;
    }
    tmp_class_meta_26 = BUILTIN_TYPE1( tmp_type_arg_26 );
    Py_DECREF( tmp_type_arg_26 );
    if ( tmp_class_meta_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 136;
        goto try_except_handler_26;
    }
    goto condexpr_end_77;
    condexpr_false_77:;
    tmp_class_meta_26 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_26 != NULL );
    Py_INCREF( tmp_class_meta_26 );
    condexpr_end_77:;
    condexpr_end_76:;
    tmp_class_bases_26 = tmp_pyasn1_modules$rfc2251_class_creation_26__bases;

    tmp_assign_source_142 = SELECT_METACLASS( tmp_class_meta_26, tmp_class_bases_26 );
    if ( tmp_assign_source_142 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_26 );

        exception_lineno = 136;
        goto try_except_handler_26;
    }
    Py_DECREF( tmp_class_meta_26 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_26__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_26__metaclass = tmp_assign_source_142;

    tmp_compare_left_52 = const_str_plain_metaclass;
    tmp_compare_right_52 = tmp_pyasn1_modules$rfc2251_class_creation_26__class_decl_dict;

    tmp_cmp_In_52 = PySequence_Contains( tmp_compare_right_52, tmp_compare_left_52 );
    if ( tmp_cmp_In_52 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 136;
        goto try_except_handler_26;
    }
    if ( tmp_cmp_In_52 == 1 )
    {
        goto branch_yes_26;
    }
    else
    {
        goto branch_no_26;
    }
    branch_yes_26:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_26__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 136;
        goto try_except_handler_26;
    }
    branch_no_26:;
    tmp_hasattr_source_26 = tmp_pyasn1_modules$rfc2251_class_creation_26__metaclass;

    tmp_hasattr_attr_26 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_26, tmp_hasattr_attr_26 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 136;
        goto try_except_handler_26;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_78;
    }
    else
    {
        goto condexpr_false_78;
    }
    condexpr_true_78:;
    tmp_source_name_47 = tmp_pyasn1_modules$rfc2251_class_creation_26__metaclass;

    tmp_called_name_27 = LOOKUP_ATTRIBUTE( tmp_source_name_47, const_str_plain___prepare__ );
    if ( tmp_called_name_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 136;
        goto try_except_handler_26;
    }
    tmp_args_name_26 = PyTuple_New( 2 );
    tmp_tuple_element_52 = const_str_plain_Filter;
    Py_INCREF( tmp_tuple_element_52 );
    PyTuple_SET_ITEM( tmp_args_name_26, 0, tmp_tuple_element_52 );
    tmp_tuple_element_52 = tmp_pyasn1_modules$rfc2251_class_creation_26__bases;

    Py_INCREF( tmp_tuple_element_52 );
    PyTuple_SET_ITEM( tmp_args_name_26, 1, tmp_tuple_element_52 );
    tmp_kw_name_26 = tmp_pyasn1_modules$rfc2251_class_creation_26__class_decl_dict;

    frame_module->f_lineno = 136;
    tmp_assign_source_143 = CALL_FUNCTION( tmp_called_name_27, tmp_args_name_26, tmp_kw_name_26 );
    Py_DECREF( tmp_called_name_27 );
    Py_DECREF( tmp_args_name_26 );
    if ( tmp_assign_source_143 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 136;
        goto try_except_handler_26;
    }
    goto condexpr_end_78;
    condexpr_false_78:;
    tmp_assign_source_143 = PyDict_New();
    condexpr_end_78:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_26__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_26__prepared = tmp_assign_source_143;

    tmp_assign_source_144 = impl_class_26_Filter_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_26__bases, tmp_pyasn1_modules$rfc2251_class_creation_26__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_26__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_26__prepared );
    if ( tmp_assign_source_144 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 136;
        goto try_except_handler_26;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_Filter, tmp_assign_source_144 );
    goto try_end_26;
    // Exception handler code:
    try_except_handler_26:;
    exception_keeper_type_26 = exception_type;
    exception_keeper_value_26 = exception_value;
    exception_keeper_tb_26 = exception_tb;
    exception_keeper_lineno_26 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_26__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_26__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_26__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_26__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_26__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_26__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_26__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_26__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_26;
    exception_value = exception_keeper_value_26;
    exception_tb = exception_keeper_tb_26;
    exception_lineno = exception_keeper_lineno_26;

    goto frame_exception_exit_1;
    // End of try:
    try_end_26:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_26__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_26__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_26__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_26__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_26__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_26__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_26__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_26__prepared = NULL;

    // Tried code:
    tmp_assign_source_145 = PyTuple_New( 1 );
    tmp_source_name_48 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_48 == NULL ))
    {
        tmp_source_name_48 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_48 == NULL )
    {
        Py_DECREF( tmp_assign_source_145 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 152;
        goto try_except_handler_27;
    }

    tmp_tuple_element_53 = LOOKUP_ATTRIBUTE( tmp_source_name_48, const_str_plain_Sequence );
    if ( tmp_tuple_element_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_145 );

        exception_lineno = 152;
        goto try_except_handler_27;
    }
    PyTuple_SET_ITEM( tmp_assign_source_145, 0, tmp_tuple_element_53 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_27__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_27__bases = tmp_assign_source_145;

    tmp_assign_source_146 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_27__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_27__class_decl_dict = tmp_assign_source_146;

    tmp_compare_left_53 = const_str_plain_metaclass;
    tmp_compare_right_53 = tmp_pyasn1_modules$rfc2251_class_creation_27__class_decl_dict;

    tmp_cmp_In_53 = PySequence_Contains( tmp_compare_right_53, tmp_compare_left_53 );
    if ( tmp_cmp_In_53 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 152;
        goto try_except_handler_27;
    }
    if ( tmp_cmp_In_53 == 1 )
    {
        goto condexpr_true_79;
    }
    else
    {
        goto condexpr_false_79;
    }
    condexpr_true_79:;
    tmp_dget_dict_27 = tmp_pyasn1_modules$rfc2251_class_creation_27__class_decl_dict;

    tmp_dget_key_27 = const_str_plain_metaclass;
    tmp_class_meta_27 = DICT_GET_ITEM( tmp_dget_dict_27, tmp_dget_key_27 );
    if ( tmp_class_meta_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 152;
        goto try_except_handler_27;
    }
    goto condexpr_end_79;
    condexpr_false_79:;
    tmp_cond_value_27 = tmp_pyasn1_modules$rfc2251_class_creation_27__bases;

    tmp_cond_truth_27 = CHECK_IF_TRUE( tmp_cond_value_27 );
    if ( tmp_cond_truth_27 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 152;
        goto try_except_handler_27;
    }
    if ( tmp_cond_truth_27 == 1 )
    {
        goto condexpr_true_80;
    }
    else
    {
        goto condexpr_false_80;
    }
    condexpr_true_80:;
    tmp_subscribed_name_27 = tmp_pyasn1_modules$rfc2251_class_creation_27__bases;

    tmp_subscript_name_27 = const_int_0;
    tmp_type_arg_27 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_27, tmp_subscript_name_27 );
    if ( tmp_type_arg_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 152;
        goto try_except_handler_27;
    }
    tmp_class_meta_27 = BUILTIN_TYPE1( tmp_type_arg_27 );
    Py_DECREF( tmp_type_arg_27 );
    if ( tmp_class_meta_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 152;
        goto try_except_handler_27;
    }
    goto condexpr_end_80;
    condexpr_false_80:;
    tmp_class_meta_27 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_27 != NULL );
    Py_INCREF( tmp_class_meta_27 );
    condexpr_end_80:;
    condexpr_end_79:;
    tmp_class_bases_27 = tmp_pyasn1_modules$rfc2251_class_creation_27__bases;

    tmp_assign_source_147 = SELECT_METACLASS( tmp_class_meta_27, tmp_class_bases_27 );
    if ( tmp_assign_source_147 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_27 );

        exception_lineno = 152;
        goto try_except_handler_27;
    }
    Py_DECREF( tmp_class_meta_27 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_27__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_27__metaclass = tmp_assign_source_147;

    tmp_compare_left_54 = const_str_plain_metaclass;
    tmp_compare_right_54 = tmp_pyasn1_modules$rfc2251_class_creation_27__class_decl_dict;

    tmp_cmp_In_54 = PySequence_Contains( tmp_compare_right_54, tmp_compare_left_54 );
    if ( tmp_cmp_In_54 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 152;
        goto try_except_handler_27;
    }
    if ( tmp_cmp_In_54 == 1 )
    {
        goto branch_yes_27;
    }
    else
    {
        goto branch_no_27;
    }
    branch_yes_27:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_27__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 152;
        goto try_except_handler_27;
    }
    branch_no_27:;
    tmp_hasattr_source_27 = tmp_pyasn1_modules$rfc2251_class_creation_27__metaclass;

    tmp_hasattr_attr_27 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_27, tmp_hasattr_attr_27 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 152;
        goto try_except_handler_27;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_81;
    }
    else
    {
        goto condexpr_false_81;
    }
    condexpr_true_81:;
    tmp_source_name_49 = tmp_pyasn1_modules$rfc2251_class_creation_27__metaclass;

    tmp_called_name_28 = LOOKUP_ATTRIBUTE( tmp_source_name_49, const_str_plain___prepare__ );
    if ( tmp_called_name_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 152;
        goto try_except_handler_27;
    }
    tmp_args_name_27 = PyTuple_New( 2 );
    tmp_tuple_element_54 = const_str_plain_SearchRequest;
    Py_INCREF( tmp_tuple_element_54 );
    PyTuple_SET_ITEM( tmp_args_name_27, 0, tmp_tuple_element_54 );
    tmp_tuple_element_54 = tmp_pyasn1_modules$rfc2251_class_creation_27__bases;

    Py_INCREF( tmp_tuple_element_54 );
    PyTuple_SET_ITEM( tmp_args_name_27, 1, tmp_tuple_element_54 );
    tmp_kw_name_27 = tmp_pyasn1_modules$rfc2251_class_creation_27__class_decl_dict;

    frame_module->f_lineno = 152;
    tmp_assign_source_148 = CALL_FUNCTION( tmp_called_name_28, tmp_args_name_27, tmp_kw_name_27 );
    Py_DECREF( tmp_called_name_28 );
    Py_DECREF( tmp_args_name_27 );
    if ( tmp_assign_source_148 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 152;
        goto try_except_handler_27;
    }
    goto condexpr_end_81;
    condexpr_false_81:;
    tmp_assign_source_148 = PyDict_New();
    condexpr_end_81:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_27__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_27__prepared = tmp_assign_source_148;

    tmp_assign_source_149 = impl_class_27_SearchRequest_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_27__bases, tmp_pyasn1_modules$rfc2251_class_creation_27__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_27__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_27__prepared );
    if ( tmp_assign_source_149 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 152;
        goto try_except_handler_27;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_SearchRequest, tmp_assign_source_149 );
    goto try_end_27;
    // Exception handler code:
    try_except_handler_27:;
    exception_keeper_type_27 = exception_type;
    exception_keeper_value_27 = exception_value;
    exception_keeper_tb_27 = exception_tb;
    exception_keeper_lineno_27 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_27__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_27__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_27__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_27__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_27__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_27__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_27__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_27__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_27;
    exception_value = exception_keeper_value_27;
    exception_tb = exception_keeper_tb_27;
    exception_lineno = exception_keeper_lineno_27;

    goto frame_exception_exit_1;
    // End of try:
    try_end_27:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_27__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_27__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_27__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_27__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_27__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_27__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_27__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_27__prepared = NULL;

    // Tried code:
    tmp_assign_source_150 = PyTuple_New( 1 );
    tmp_source_name_50 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_50 == NULL ))
    {
        tmp_source_name_50 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_50 == NULL )
    {
        Py_DECREF( tmp_assign_source_150 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 167;
        goto try_except_handler_28;
    }

    tmp_tuple_element_55 = LOOKUP_ATTRIBUTE( tmp_source_name_50, const_str_plain_Null );
    if ( tmp_tuple_element_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_150 );

        exception_lineno = 167;
        goto try_except_handler_28;
    }
    PyTuple_SET_ITEM( tmp_assign_source_150, 0, tmp_tuple_element_55 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_28__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_28__bases = tmp_assign_source_150;

    tmp_assign_source_151 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_28__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_28__class_decl_dict = tmp_assign_source_151;

    tmp_compare_left_55 = const_str_plain_metaclass;
    tmp_compare_right_55 = tmp_pyasn1_modules$rfc2251_class_creation_28__class_decl_dict;

    tmp_cmp_In_55 = PySequence_Contains( tmp_compare_right_55, tmp_compare_left_55 );
    if ( tmp_cmp_In_55 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 167;
        goto try_except_handler_28;
    }
    if ( tmp_cmp_In_55 == 1 )
    {
        goto condexpr_true_82;
    }
    else
    {
        goto condexpr_false_82;
    }
    condexpr_true_82:;
    tmp_dget_dict_28 = tmp_pyasn1_modules$rfc2251_class_creation_28__class_decl_dict;

    tmp_dget_key_28 = const_str_plain_metaclass;
    tmp_class_meta_28 = DICT_GET_ITEM( tmp_dget_dict_28, tmp_dget_key_28 );
    if ( tmp_class_meta_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 167;
        goto try_except_handler_28;
    }
    goto condexpr_end_82;
    condexpr_false_82:;
    tmp_cond_value_28 = tmp_pyasn1_modules$rfc2251_class_creation_28__bases;

    tmp_cond_truth_28 = CHECK_IF_TRUE( tmp_cond_value_28 );
    if ( tmp_cond_truth_28 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 167;
        goto try_except_handler_28;
    }
    if ( tmp_cond_truth_28 == 1 )
    {
        goto condexpr_true_83;
    }
    else
    {
        goto condexpr_false_83;
    }
    condexpr_true_83:;
    tmp_subscribed_name_28 = tmp_pyasn1_modules$rfc2251_class_creation_28__bases;

    tmp_subscript_name_28 = const_int_0;
    tmp_type_arg_28 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_28, tmp_subscript_name_28 );
    if ( tmp_type_arg_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 167;
        goto try_except_handler_28;
    }
    tmp_class_meta_28 = BUILTIN_TYPE1( tmp_type_arg_28 );
    Py_DECREF( tmp_type_arg_28 );
    if ( tmp_class_meta_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 167;
        goto try_except_handler_28;
    }
    goto condexpr_end_83;
    condexpr_false_83:;
    tmp_class_meta_28 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_28 != NULL );
    Py_INCREF( tmp_class_meta_28 );
    condexpr_end_83:;
    condexpr_end_82:;
    tmp_class_bases_28 = tmp_pyasn1_modules$rfc2251_class_creation_28__bases;

    tmp_assign_source_152 = SELECT_METACLASS( tmp_class_meta_28, tmp_class_bases_28 );
    if ( tmp_assign_source_152 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_28 );

        exception_lineno = 167;
        goto try_except_handler_28;
    }
    Py_DECREF( tmp_class_meta_28 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_28__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_28__metaclass = tmp_assign_source_152;

    tmp_compare_left_56 = const_str_plain_metaclass;
    tmp_compare_right_56 = tmp_pyasn1_modules$rfc2251_class_creation_28__class_decl_dict;

    tmp_cmp_In_56 = PySequence_Contains( tmp_compare_right_56, tmp_compare_left_56 );
    if ( tmp_cmp_In_56 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 167;
        goto try_except_handler_28;
    }
    if ( tmp_cmp_In_56 == 1 )
    {
        goto branch_yes_28;
    }
    else
    {
        goto branch_no_28;
    }
    branch_yes_28:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_28__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 167;
        goto try_except_handler_28;
    }
    branch_no_28:;
    tmp_hasattr_source_28 = tmp_pyasn1_modules$rfc2251_class_creation_28__metaclass;

    tmp_hasattr_attr_28 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_28, tmp_hasattr_attr_28 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 167;
        goto try_except_handler_28;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_84;
    }
    else
    {
        goto condexpr_false_84;
    }
    condexpr_true_84:;
    tmp_source_name_51 = tmp_pyasn1_modules$rfc2251_class_creation_28__metaclass;

    tmp_called_name_29 = LOOKUP_ATTRIBUTE( tmp_source_name_51, const_str_plain___prepare__ );
    if ( tmp_called_name_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 167;
        goto try_except_handler_28;
    }
    tmp_args_name_28 = PyTuple_New( 2 );
    tmp_tuple_element_56 = const_str_plain_UnbindRequest;
    Py_INCREF( tmp_tuple_element_56 );
    PyTuple_SET_ITEM( tmp_args_name_28, 0, tmp_tuple_element_56 );
    tmp_tuple_element_56 = tmp_pyasn1_modules$rfc2251_class_creation_28__bases;

    Py_INCREF( tmp_tuple_element_56 );
    PyTuple_SET_ITEM( tmp_args_name_28, 1, tmp_tuple_element_56 );
    tmp_kw_name_28 = tmp_pyasn1_modules$rfc2251_class_creation_28__class_decl_dict;

    frame_module->f_lineno = 167;
    tmp_assign_source_153 = CALL_FUNCTION( tmp_called_name_29, tmp_args_name_28, tmp_kw_name_28 );
    Py_DECREF( tmp_called_name_29 );
    Py_DECREF( tmp_args_name_28 );
    if ( tmp_assign_source_153 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 167;
        goto try_except_handler_28;
    }
    goto condexpr_end_84;
    condexpr_false_84:;
    tmp_assign_source_153 = PyDict_New();
    condexpr_end_84:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_28__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_28__prepared = tmp_assign_source_153;

    tmp_assign_source_154 = impl_class_28_UnbindRequest_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_28__bases, tmp_pyasn1_modules$rfc2251_class_creation_28__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_28__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_28__prepared );
    if ( tmp_assign_source_154 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 167;
        goto try_except_handler_28;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_UnbindRequest, tmp_assign_source_154 );
    goto try_end_28;
    // Exception handler code:
    try_except_handler_28:;
    exception_keeper_type_28 = exception_type;
    exception_keeper_value_28 = exception_value;
    exception_keeper_tb_28 = exception_tb;
    exception_keeper_lineno_28 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_28__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_28__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_28__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_28__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_28__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_28__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_28__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_28__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_28;
    exception_value = exception_keeper_value_28;
    exception_tb = exception_keeper_tb_28;
    exception_lineno = exception_keeper_lineno_28;

    goto frame_exception_exit_1;
    // End of try:
    try_end_28:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_28__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_28__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_28__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_28__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_28__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_28__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_28__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_28__prepared = NULL;

    // Tried code:
    tmp_assign_source_155 = PyTuple_New( 1 );
    tmp_source_name_52 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_52 == NULL ))
    {
        tmp_source_name_52 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_52 == NULL )
    {
        Py_DECREF( tmp_assign_source_155 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 172;
        goto try_except_handler_29;
    }

    tmp_tuple_element_57 = LOOKUP_ATTRIBUTE( tmp_source_name_52, const_str_plain_Sequence );
    if ( tmp_tuple_element_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_155 );

        exception_lineno = 172;
        goto try_except_handler_29;
    }
    PyTuple_SET_ITEM( tmp_assign_source_155, 0, tmp_tuple_element_57 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_29__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_29__bases = tmp_assign_source_155;

    tmp_assign_source_156 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_29__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_29__class_decl_dict = tmp_assign_source_156;

    tmp_compare_left_57 = const_str_plain_metaclass;
    tmp_compare_right_57 = tmp_pyasn1_modules$rfc2251_class_creation_29__class_decl_dict;

    tmp_cmp_In_57 = PySequence_Contains( tmp_compare_right_57, tmp_compare_left_57 );
    if ( tmp_cmp_In_57 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 172;
        goto try_except_handler_29;
    }
    if ( tmp_cmp_In_57 == 1 )
    {
        goto condexpr_true_85;
    }
    else
    {
        goto condexpr_false_85;
    }
    condexpr_true_85:;
    tmp_dget_dict_29 = tmp_pyasn1_modules$rfc2251_class_creation_29__class_decl_dict;

    tmp_dget_key_29 = const_str_plain_metaclass;
    tmp_class_meta_29 = DICT_GET_ITEM( tmp_dget_dict_29, tmp_dget_key_29 );
    if ( tmp_class_meta_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 172;
        goto try_except_handler_29;
    }
    goto condexpr_end_85;
    condexpr_false_85:;
    tmp_cond_value_29 = tmp_pyasn1_modules$rfc2251_class_creation_29__bases;

    tmp_cond_truth_29 = CHECK_IF_TRUE( tmp_cond_value_29 );
    if ( tmp_cond_truth_29 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 172;
        goto try_except_handler_29;
    }
    if ( tmp_cond_truth_29 == 1 )
    {
        goto condexpr_true_86;
    }
    else
    {
        goto condexpr_false_86;
    }
    condexpr_true_86:;
    tmp_subscribed_name_29 = tmp_pyasn1_modules$rfc2251_class_creation_29__bases;

    tmp_subscript_name_29 = const_int_0;
    tmp_type_arg_29 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_29, tmp_subscript_name_29 );
    if ( tmp_type_arg_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 172;
        goto try_except_handler_29;
    }
    tmp_class_meta_29 = BUILTIN_TYPE1( tmp_type_arg_29 );
    Py_DECREF( tmp_type_arg_29 );
    if ( tmp_class_meta_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 172;
        goto try_except_handler_29;
    }
    goto condexpr_end_86;
    condexpr_false_86:;
    tmp_class_meta_29 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_29 != NULL );
    Py_INCREF( tmp_class_meta_29 );
    condexpr_end_86:;
    condexpr_end_85:;
    tmp_class_bases_29 = tmp_pyasn1_modules$rfc2251_class_creation_29__bases;

    tmp_assign_source_157 = SELECT_METACLASS( tmp_class_meta_29, tmp_class_bases_29 );
    if ( tmp_assign_source_157 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_29 );

        exception_lineno = 172;
        goto try_except_handler_29;
    }
    Py_DECREF( tmp_class_meta_29 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_29__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_29__metaclass = tmp_assign_source_157;

    tmp_compare_left_58 = const_str_plain_metaclass;
    tmp_compare_right_58 = tmp_pyasn1_modules$rfc2251_class_creation_29__class_decl_dict;

    tmp_cmp_In_58 = PySequence_Contains( tmp_compare_right_58, tmp_compare_left_58 );
    if ( tmp_cmp_In_58 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 172;
        goto try_except_handler_29;
    }
    if ( tmp_cmp_In_58 == 1 )
    {
        goto branch_yes_29;
    }
    else
    {
        goto branch_no_29;
    }
    branch_yes_29:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_29__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 172;
        goto try_except_handler_29;
    }
    branch_no_29:;
    tmp_hasattr_source_29 = tmp_pyasn1_modules$rfc2251_class_creation_29__metaclass;

    tmp_hasattr_attr_29 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_29, tmp_hasattr_attr_29 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 172;
        goto try_except_handler_29;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_87;
    }
    else
    {
        goto condexpr_false_87;
    }
    condexpr_true_87:;
    tmp_source_name_53 = tmp_pyasn1_modules$rfc2251_class_creation_29__metaclass;

    tmp_called_name_30 = LOOKUP_ATTRIBUTE( tmp_source_name_53, const_str_plain___prepare__ );
    if ( tmp_called_name_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 172;
        goto try_except_handler_29;
    }
    tmp_args_name_29 = PyTuple_New( 2 );
    tmp_tuple_element_58 = const_str_plain_BindResponse;
    Py_INCREF( tmp_tuple_element_58 );
    PyTuple_SET_ITEM( tmp_args_name_29, 0, tmp_tuple_element_58 );
    tmp_tuple_element_58 = tmp_pyasn1_modules$rfc2251_class_creation_29__bases;

    Py_INCREF( tmp_tuple_element_58 );
    PyTuple_SET_ITEM( tmp_args_name_29, 1, tmp_tuple_element_58 );
    tmp_kw_name_29 = tmp_pyasn1_modules$rfc2251_class_creation_29__class_decl_dict;

    frame_module->f_lineno = 172;
    tmp_assign_source_158 = CALL_FUNCTION( tmp_called_name_30, tmp_args_name_29, tmp_kw_name_29 );
    Py_DECREF( tmp_called_name_30 );
    Py_DECREF( tmp_args_name_29 );
    if ( tmp_assign_source_158 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 172;
        goto try_except_handler_29;
    }
    goto condexpr_end_87;
    condexpr_false_87:;
    tmp_assign_source_158 = PyDict_New();
    condexpr_end_87:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_29__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_29__prepared = tmp_assign_source_158;

    tmp_assign_source_159 = impl_class_29_BindResponse_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_29__bases, tmp_pyasn1_modules$rfc2251_class_creation_29__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_29__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_29__prepared );
    if ( tmp_assign_source_159 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 172;
        goto try_except_handler_29;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_BindResponse, tmp_assign_source_159 );
    goto try_end_29;
    // Exception handler code:
    try_except_handler_29:;
    exception_keeper_type_29 = exception_type;
    exception_keeper_value_29 = exception_value;
    exception_keeper_tb_29 = exception_tb;
    exception_keeper_lineno_29 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_29__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_29__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_29__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_29__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_29__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_29__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_29__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_29__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_29;
    exception_value = exception_keeper_value_29;
    exception_tb = exception_keeper_tb_29;
    exception_lineno = exception_keeper_lineno_29;

    goto frame_exception_exit_1;
    // End of try:
    try_end_29:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_29__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_29__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_29__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_29__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_29__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_29__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_29__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_29__prepared = NULL;

    // Tried code:
    tmp_assign_source_160 = PyTuple_New( 1 );
    tmp_source_name_54 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_54 == NULL ))
    {
        tmp_source_name_54 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_54 == NULL )
    {
        Py_DECREF( tmp_assign_source_160 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 184;
        goto try_except_handler_30;
    }

    tmp_tuple_element_59 = LOOKUP_ATTRIBUTE( tmp_source_name_54, const_str_plain_Sequence );
    if ( tmp_tuple_element_59 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_160 );

        exception_lineno = 184;
        goto try_except_handler_30;
    }
    PyTuple_SET_ITEM( tmp_assign_source_160, 0, tmp_tuple_element_59 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_30__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_30__bases = tmp_assign_source_160;

    tmp_assign_source_161 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_30__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_30__class_decl_dict = tmp_assign_source_161;

    tmp_compare_left_59 = const_str_plain_metaclass;
    tmp_compare_right_59 = tmp_pyasn1_modules$rfc2251_class_creation_30__class_decl_dict;

    tmp_cmp_In_59 = PySequence_Contains( tmp_compare_right_59, tmp_compare_left_59 );
    if ( tmp_cmp_In_59 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 184;
        goto try_except_handler_30;
    }
    if ( tmp_cmp_In_59 == 1 )
    {
        goto condexpr_true_88;
    }
    else
    {
        goto condexpr_false_88;
    }
    condexpr_true_88:;
    tmp_dget_dict_30 = tmp_pyasn1_modules$rfc2251_class_creation_30__class_decl_dict;

    tmp_dget_key_30 = const_str_plain_metaclass;
    tmp_class_meta_30 = DICT_GET_ITEM( tmp_dget_dict_30, tmp_dget_key_30 );
    if ( tmp_class_meta_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 184;
        goto try_except_handler_30;
    }
    goto condexpr_end_88;
    condexpr_false_88:;
    tmp_cond_value_30 = tmp_pyasn1_modules$rfc2251_class_creation_30__bases;

    tmp_cond_truth_30 = CHECK_IF_TRUE( tmp_cond_value_30 );
    if ( tmp_cond_truth_30 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 184;
        goto try_except_handler_30;
    }
    if ( tmp_cond_truth_30 == 1 )
    {
        goto condexpr_true_89;
    }
    else
    {
        goto condexpr_false_89;
    }
    condexpr_true_89:;
    tmp_subscribed_name_30 = tmp_pyasn1_modules$rfc2251_class_creation_30__bases;

    tmp_subscript_name_30 = const_int_0;
    tmp_type_arg_30 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_30, tmp_subscript_name_30 );
    if ( tmp_type_arg_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 184;
        goto try_except_handler_30;
    }
    tmp_class_meta_30 = BUILTIN_TYPE1( tmp_type_arg_30 );
    Py_DECREF( tmp_type_arg_30 );
    if ( tmp_class_meta_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 184;
        goto try_except_handler_30;
    }
    goto condexpr_end_89;
    condexpr_false_89:;
    tmp_class_meta_30 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_30 != NULL );
    Py_INCREF( tmp_class_meta_30 );
    condexpr_end_89:;
    condexpr_end_88:;
    tmp_class_bases_30 = tmp_pyasn1_modules$rfc2251_class_creation_30__bases;

    tmp_assign_source_162 = SELECT_METACLASS( tmp_class_meta_30, tmp_class_bases_30 );
    if ( tmp_assign_source_162 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_30 );

        exception_lineno = 184;
        goto try_except_handler_30;
    }
    Py_DECREF( tmp_class_meta_30 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_30__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_30__metaclass = tmp_assign_source_162;

    tmp_compare_left_60 = const_str_plain_metaclass;
    tmp_compare_right_60 = tmp_pyasn1_modules$rfc2251_class_creation_30__class_decl_dict;

    tmp_cmp_In_60 = PySequence_Contains( tmp_compare_right_60, tmp_compare_left_60 );
    if ( tmp_cmp_In_60 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 184;
        goto try_except_handler_30;
    }
    if ( tmp_cmp_In_60 == 1 )
    {
        goto branch_yes_30;
    }
    else
    {
        goto branch_no_30;
    }
    branch_yes_30:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_30__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 184;
        goto try_except_handler_30;
    }
    branch_no_30:;
    tmp_hasattr_source_30 = tmp_pyasn1_modules$rfc2251_class_creation_30__metaclass;

    tmp_hasattr_attr_30 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_30, tmp_hasattr_attr_30 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 184;
        goto try_except_handler_30;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_90;
    }
    else
    {
        goto condexpr_false_90;
    }
    condexpr_true_90:;
    tmp_source_name_55 = tmp_pyasn1_modules$rfc2251_class_creation_30__metaclass;

    tmp_called_name_31 = LOOKUP_ATTRIBUTE( tmp_source_name_55, const_str_plain___prepare__ );
    if ( tmp_called_name_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 184;
        goto try_except_handler_30;
    }
    tmp_args_name_30 = PyTuple_New( 2 );
    tmp_tuple_element_60 = const_str_plain_LDAPResult;
    Py_INCREF( tmp_tuple_element_60 );
    PyTuple_SET_ITEM( tmp_args_name_30, 0, tmp_tuple_element_60 );
    tmp_tuple_element_60 = tmp_pyasn1_modules$rfc2251_class_creation_30__bases;

    Py_INCREF( tmp_tuple_element_60 );
    PyTuple_SET_ITEM( tmp_args_name_30, 1, tmp_tuple_element_60 );
    tmp_kw_name_30 = tmp_pyasn1_modules$rfc2251_class_creation_30__class_decl_dict;

    frame_module->f_lineno = 184;
    tmp_assign_source_163 = CALL_FUNCTION( tmp_called_name_31, tmp_args_name_30, tmp_kw_name_30 );
    Py_DECREF( tmp_called_name_31 );
    Py_DECREF( tmp_args_name_30 );
    if ( tmp_assign_source_163 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 184;
        goto try_except_handler_30;
    }
    goto condexpr_end_90;
    condexpr_false_90:;
    tmp_assign_source_163 = PyDict_New();
    condexpr_end_90:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_30__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_30__prepared = tmp_assign_source_163;

    tmp_assign_source_164 = impl_class_30_LDAPResult_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_30__bases, tmp_pyasn1_modules$rfc2251_class_creation_30__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_30__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_30__prepared );
    if ( tmp_assign_source_164 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 184;
        goto try_except_handler_30;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPResult, tmp_assign_source_164 );
    goto try_end_30;
    // Exception handler code:
    try_except_handler_30:;
    exception_keeper_type_30 = exception_type;
    exception_keeper_value_30 = exception_value;
    exception_keeper_tb_30 = exception_tb;
    exception_keeper_lineno_30 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_30__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_30__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_30__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_30__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_30__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_30__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_30__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_30__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_30;
    exception_value = exception_keeper_value_30;
    exception_tb = exception_keeper_tb_30;
    exception_lineno = exception_keeper_lineno_30;

    goto frame_exception_exit_1;
    // End of try:
    try_end_30:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_30__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_30__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_30__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_30__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_30__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_30__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_30__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_30__prepared = NULL;

    // Tried code:
    tmp_assign_source_165 = PyTuple_New( 1 );
    tmp_source_name_56 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_56 == NULL ))
    {
        tmp_source_name_56 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_56 == NULL )
    {
        Py_DECREF( tmp_assign_source_165 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 192;
        goto try_except_handler_31;
    }

    tmp_tuple_element_61 = LOOKUP_ATTRIBUTE( tmp_source_name_56, const_str_plain_SequenceOf );
    if ( tmp_tuple_element_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_165 );

        exception_lineno = 192;
        goto try_except_handler_31;
    }
    PyTuple_SET_ITEM( tmp_assign_source_165, 0, tmp_tuple_element_61 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_31__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_31__bases = tmp_assign_source_165;

    tmp_assign_source_166 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_31__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_31__class_decl_dict = tmp_assign_source_166;

    tmp_compare_left_61 = const_str_plain_metaclass;
    tmp_compare_right_61 = tmp_pyasn1_modules$rfc2251_class_creation_31__class_decl_dict;

    tmp_cmp_In_61 = PySequence_Contains( tmp_compare_right_61, tmp_compare_left_61 );
    if ( tmp_cmp_In_61 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 192;
        goto try_except_handler_31;
    }
    if ( tmp_cmp_In_61 == 1 )
    {
        goto condexpr_true_91;
    }
    else
    {
        goto condexpr_false_91;
    }
    condexpr_true_91:;
    tmp_dget_dict_31 = tmp_pyasn1_modules$rfc2251_class_creation_31__class_decl_dict;

    tmp_dget_key_31 = const_str_plain_metaclass;
    tmp_class_meta_31 = DICT_GET_ITEM( tmp_dget_dict_31, tmp_dget_key_31 );
    if ( tmp_class_meta_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 192;
        goto try_except_handler_31;
    }
    goto condexpr_end_91;
    condexpr_false_91:;
    tmp_cond_value_31 = tmp_pyasn1_modules$rfc2251_class_creation_31__bases;

    tmp_cond_truth_31 = CHECK_IF_TRUE( tmp_cond_value_31 );
    if ( tmp_cond_truth_31 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 192;
        goto try_except_handler_31;
    }
    if ( tmp_cond_truth_31 == 1 )
    {
        goto condexpr_true_92;
    }
    else
    {
        goto condexpr_false_92;
    }
    condexpr_true_92:;
    tmp_subscribed_name_31 = tmp_pyasn1_modules$rfc2251_class_creation_31__bases;

    tmp_subscript_name_31 = const_int_0;
    tmp_type_arg_31 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_31, tmp_subscript_name_31 );
    if ( tmp_type_arg_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 192;
        goto try_except_handler_31;
    }
    tmp_class_meta_31 = BUILTIN_TYPE1( tmp_type_arg_31 );
    Py_DECREF( tmp_type_arg_31 );
    if ( tmp_class_meta_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 192;
        goto try_except_handler_31;
    }
    goto condexpr_end_92;
    condexpr_false_92:;
    tmp_class_meta_31 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_31 != NULL );
    Py_INCREF( tmp_class_meta_31 );
    condexpr_end_92:;
    condexpr_end_91:;
    tmp_class_bases_31 = tmp_pyasn1_modules$rfc2251_class_creation_31__bases;

    tmp_assign_source_167 = SELECT_METACLASS( tmp_class_meta_31, tmp_class_bases_31 );
    if ( tmp_assign_source_167 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_31 );

        exception_lineno = 192;
        goto try_except_handler_31;
    }
    Py_DECREF( tmp_class_meta_31 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_31__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_31__metaclass = tmp_assign_source_167;

    tmp_compare_left_62 = const_str_plain_metaclass;
    tmp_compare_right_62 = tmp_pyasn1_modules$rfc2251_class_creation_31__class_decl_dict;

    tmp_cmp_In_62 = PySequence_Contains( tmp_compare_right_62, tmp_compare_left_62 );
    if ( tmp_cmp_In_62 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 192;
        goto try_except_handler_31;
    }
    if ( tmp_cmp_In_62 == 1 )
    {
        goto branch_yes_31;
    }
    else
    {
        goto branch_no_31;
    }
    branch_yes_31:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_31__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 192;
        goto try_except_handler_31;
    }
    branch_no_31:;
    tmp_hasattr_source_31 = tmp_pyasn1_modules$rfc2251_class_creation_31__metaclass;

    tmp_hasattr_attr_31 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_31, tmp_hasattr_attr_31 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 192;
        goto try_except_handler_31;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_93;
    }
    else
    {
        goto condexpr_false_93;
    }
    condexpr_true_93:;
    tmp_source_name_57 = tmp_pyasn1_modules$rfc2251_class_creation_31__metaclass;

    tmp_called_name_32 = LOOKUP_ATTRIBUTE( tmp_source_name_57, const_str_plain___prepare__ );
    if ( tmp_called_name_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 192;
        goto try_except_handler_31;
    }
    tmp_args_name_31 = PyTuple_New( 2 );
    tmp_tuple_element_62 = const_str_plain_SearchResultReference;
    Py_INCREF( tmp_tuple_element_62 );
    PyTuple_SET_ITEM( tmp_args_name_31, 0, tmp_tuple_element_62 );
    tmp_tuple_element_62 = tmp_pyasn1_modules$rfc2251_class_creation_31__bases;

    Py_INCREF( tmp_tuple_element_62 );
    PyTuple_SET_ITEM( tmp_args_name_31, 1, tmp_tuple_element_62 );
    tmp_kw_name_31 = tmp_pyasn1_modules$rfc2251_class_creation_31__class_decl_dict;

    frame_module->f_lineno = 192;
    tmp_assign_source_168 = CALL_FUNCTION( tmp_called_name_32, tmp_args_name_31, tmp_kw_name_31 );
    Py_DECREF( tmp_called_name_32 );
    Py_DECREF( tmp_args_name_31 );
    if ( tmp_assign_source_168 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 192;
        goto try_except_handler_31;
    }
    goto condexpr_end_93;
    condexpr_false_93:;
    tmp_assign_source_168 = PyDict_New();
    condexpr_end_93:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_31__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_31__prepared = tmp_assign_source_168;

    tmp_assign_source_169 = impl_class_31_SearchResultReference_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_31__bases, tmp_pyasn1_modules$rfc2251_class_creation_31__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_31__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_31__prepared );
    if ( tmp_assign_source_169 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 192;
        goto try_except_handler_31;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_SearchResultReference, tmp_assign_source_169 );
    goto try_end_31;
    // Exception handler code:
    try_except_handler_31:;
    exception_keeper_type_31 = exception_type;
    exception_keeper_value_31 = exception_value;
    exception_keeper_tb_31 = exception_tb;
    exception_keeper_lineno_31 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_31__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_31__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_31__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_31__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_31__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_31__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_31__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_31__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_31;
    exception_value = exception_keeper_value_31;
    exception_tb = exception_keeper_tb_31;
    exception_lineno = exception_keeper_lineno_31;

    goto frame_exception_exit_1;
    // End of try:
    try_end_31:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_31__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_31__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_31__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_31__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_31__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_31__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_31__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_31__prepared = NULL;

    // Tried code:
    tmp_assign_source_170 = PyTuple_New( 1 );
    tmp_tuple_element_63 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPResult );

    if (unlikely( tmp_tuple_element_63 == NULL ))
    {
        tmp_tuple_element_63 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPResult );
    }

    if ( tmp_tuple_element_63 == NULL )
    {
        Py_DECREF( tmp_assign_source_170 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52537 ], 32, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 198;
        goto try_except_handler_32;
    }

    Py_INCREF( tmp_tuple_element_63 );
    PyTuple_SET_ITEM( tmp_assign_source_170, 0, tmp_tuple_element_63 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_32__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_32__bases = tmp_assign_source_170;

    tmp_assign_source_171 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_32__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_32__class_decl_dict = tmp_assign_source_171;

    tmp_compare_left_63 = const_str_plain_metaclass;
    tmp_compare_right_63 = tmp_pyasn1_modules$rfc2251_class_creation_32__class_decl_dict;

    tmp_cmp_In_63 = PySequence_Contains( tmp_compare_right_63, tmp_compare_left_63 );
    if ( tmp_cmp_In_63 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 198;
        goto try_except_handler_32;
    }
    if ( tmp_cmp_In_63 == 1 )
    {
        goto condexpr_true_94;
    }
    else
    {
        goto condexpr_false_94;
    }
    condexpr_true_94:;
    tmp_dget_dict_32 = tmp_pyasn1_modules$rfc2251_class_creation_32__class_decl_dict;

    tmp_dget_key_32 = const_str_plain_metaclass;
    tmp_class_meta_32 = DICT_GET_ITEM( tmp_dget_dict_32, tmp_dget_key_32 );
    if ( tmp_class_meta_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 198;
        goto try_except_handler_32;
    }
    goto condexpr_end_94;
    condexpr_false_94:;
    tmp_cond_value_32 = tmp_pyasn1_modules$rfc2251_class_creation_32__bases;

    tmp_cond_truth_32 = CHECK_IF_TRUE( tmp_cond_value_32 );
    if ( tmp_cond_truth_32 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 198;
        goto try_except_handler_32;
    }
    if ( tmp_cond_truth_32 == 1 )
    {
        goto condexpr_true_95;
    }
    else
    {
        goto condexpr_false_95;
    }
    condexpr_true_95:;
    tmp_subscribed_name_32 = tmp_pyasn1_modules$rfc2251_class_creation_32__bases;

    tmp_subscript_name_32 = const_int_0;
    tmp_type_arg_32 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_32, tmp_subscript_name_32 );
    if ( tmp_type_arg_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 198;
        goto try_except_handler_32;
    }
    tmp_class_meta_32 = BUILTIN_TYPE1( tmp_type_arg_32 );
    Py_DECREF( tmp_type_arg_32 );
    if ( tmp_class_meta_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 198;
        goto try_except_handler_32;
    }
    goto condexpr_end_95;
    condexpr_false_95:;
    tmp_class_meta_32 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_32 != NULL );
    Py_INCREF( tmp_class_meta_32 );
    condexpr_end_95:;
    condexpr_end_94:;
    tmp_class_bases_32 = tmp_pyasn1_modules$rfc2251_class_creation_32__bases;

    tmp_assign_source_172 = SELECT_METACLASS( tmp_class_meta_32, tmp_class_bases_32 );
    if ( tmp_assign_source_172 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_32 );

        exception_lineno = 198;
        goto try_except_handler_32;
    }
    Py_DECREF( tmp_class_meta_32 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_32__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_32__metaclass = tmp_assign_source_172;

    tmp_compare_left_64 = const_str_plain_metaclass;
    tmp_compare_right_64 = tmp_pyasn1_modules$rfc2251_class_creation_32__class_decl_dict;

    tmp_cmp_In_64 = PySequence_Contains( tmp_compare_right_64, tmp_compare_left_64 );
    if ( tmp_cmp_In_64 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 198;
        goto try_except_handler_32;
    }
    if ( tmp_cmp_In_64 == 1 )
    {
        goto branch_yes_32;
    }
    else
    {
        goto branch_no_32;
    }
    branch_yes_32:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_32__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 198;
        goto try_except_handler_32;
    }
    branch_no_32:;
    tmp_hasattr_source_32 = tmp_pyasn1_modules$rfc2251_class_creation_32__metaclass;

    tmp_hasattr_attr_32 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_32, tmp_hasattr_attr_32 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 198;
        goto try_except_handler_32;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_96;
    }
    else
    {
        goto condexpr_false_96;
    }
    condexpr_true_96:;
    tmp_source_name_58 = tmp_pyasn1_modules$rfc2251_class_creation_32__metaclass;

    tmp_called_name_33 = LOOKUP_ATTRIBUTE( tmp_source_name_58, const_str_plain___prepare__ );
    if ( tmp_called_name_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 198;
        goto try_except_handler_32;
    }
    tmp_args_name_32 = PyTuple_New( 2 );
    tmp_tuple_element_64 = const_str_plain_SearchResultDone;
    Py_INCREF( tmp_tuple_element_64 );
    PyTuple_SET_ITEM( tmp_args_name_32, 0, tmp_tuple_element_64 );
    tmp_tuple_element_64 = tmp_pyasn1_modules$rfc2251_class_creation_32__bases;

    Py_INCREF( tmp_tuple_element_64 );
    PyTuple_SET_ITEM( tmp_args_name_32, 1, tmp_tuple_element_64 );
    tmp_kw_name_32 = tmp_pyasn1_modules$rfc2251_class_creation_32__class_decl_dict;

    frame_module->f_lineno = 198;
    tmp_assign_source_173 = CALL_FUNCTION( tmp_called_name_33, tmp_args_name_32, tmp_kw_name_32 );
    Py_DECREF( tmp_called_name_33 );
    Py_DECREF( tmp_args_name_32 );
    if ( tmp_assign_source_173 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 198;
        goto try_except_handler_32;
    }
    goto condexpr_end_96;
    condexpr_false_96:;
    tmp_assign_source_173 = PyDict_New();
    condexpr_end_96:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_32__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_32__prepared = tmp_assign_source_173;

    tmp_assign_source_174 = impl_class_32_SearchResultDone_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_32__bases, tmp_pyasn1_modules$rfc2251_class_creation_32__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_32__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_32__prepared );
    if ( tmp_assign_source_174 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 198;
        goto try_except_handler_32;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_SearchResultDone, tmp_assign_source_174 );
    goto try_end_32;
    // Exception handler code:
    try_except_handler_32:;
    exception_keeper_type_32 = exception_type;
    exception_keeper_value_32 = exception_value;
    exception_keeper_tb_32 = exception_tb;
    exception_keeper_lineno_32 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_32__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_32__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_32__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_32__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_32__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_32__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_32__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_32__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_32;
    exception_value = exception_keeper_value_32;
    exception_tb = exception_keeper_tb_32;
    exception_lineno = exception_keeper_lineno_32;

    goto frame_exception_exit_1;
    // End of try:
    try_end_32:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_32__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_32__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_32__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_32__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_32__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_32__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_32__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_32__prepared = NULL;

    // Tried code:
    tmp_assign_source_175 = PyTuple_New( 1 );
    tmp_source_name_59 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_59 == NULL ))
    {
        tmp_source_name_59 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_59 == NULL )
    {
        Py_DECREF( tmp_assign_source_175 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 203;
        goto try_except_handler_33;
    }

    tmp_tuple_element_65 = LOOKUP_ATTRIBUTE( tmp_source_name_59, const_str_plain_Sequence );
    if ( tmp_tuple_element_65 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_175 );

        exception_lineno = 203;
        goto try_except_handler_33;
    }
    PyTuple_SET_ITEM( tmp_assign_source_175, 0, tmp_tuple_element_65 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_33__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_33__bases = tmp_assign_source_175;

    tmp_assign_source_176 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_33__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_33__class_decl_dict = tmp_assign_source_176;

    tmp_compare_left_65 = const_str_plain_metaclass;
    tmp_compare_right_65 = tmp_pyasn1_modules$rfc2251_class_creation_33__class_decl_dict;

    tmp_cmp_In_65 = PySequence_Contains( tmp_compare_right_65, tmp_compare_left_65 );
    if ( tmp_cmp_In_65 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 203;
        goto try_except_handler_33;
    }
    if ( tmp_cmp_In_65 == 1 )
    {
        goto condexpr_true_97;
    }
    else
    {
        goto condexpr_false_97;
    }
    condexpr_true_97:;
    tmp_dget_dict_33 = tmp_pyasn1_modules$rfc2251_class_creation_33__class_decl_dict;

    tmp_dget_key_33 = const_str_plain_metaclass;
    tmp_class_meta_33 = DICT_GET_ITEM( tmp_dget_dict_33, tmp_dget_key_33 );
    if ( tmp_class_meta_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 203;
        goto try_except_handler_33;
    }
    goto condexpr_end_97;
    condexpr_false_97:;
    tmp_cond_value_33 = tmp_pyasn1_modules$rfc2251_class_creation_33__bases;

    tmp_cond_truth_33 = CHECK_IF_TRUE( tmp_cond_value_33 );
    if ( tmp_cond_truth_33 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 203;
        goto try_except_handler_33;
    }
    if ( tmp_cond_truth_33 == 1 )
    {
        goto condexpr_true_98;
    }
    else
    {
        goto condexpr_false_98;
    }
    condexpr_true_98:;
    tmp_subscribed_name_33 = tmp_pyasn1_modules$rfc2251_class_creation_33__bases;

    tmp_subscript_name_33 = const_int_0;
    tmp_type_arg_33 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_33, tmp_subscript_name_33 );
    if ( tmp_type_arg_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 203;
        goto try_except_handler_33;
    }
    tmp_class_meta_33 = BUILTIN_TYPE1( tmp_type_arg_33 );
    Py_DECREF( tmp_type_arg_33 );
    if ( tmp_class_meta_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 203;
        goto try_except_handler_33;
    }
    goto condexpr_end_98;
    condexpr_false_98:;
    tmp_class_meta_33 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_33 != NULL );
    Py_INCREF( tmp_class_meta_33 );
    condexpr_end_98:;
    condexpr_end_97:;
    tmp_class_bases_33 = tmp_pyasn1_modules$rfc2251_class_creation_33__bases;

    tmp_assign_source_177 = SELECT_METACLASS( tmp_class_meta_33, tmp_class_bases_33 );
    if ( tmp_assign_source_177 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_33 );

        exception_lineno = 203;
        goto try_except_handler_33;
    }
    Py_DECREF( tmp_class_meta_33 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_33__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_33__metaclass = tmp_assign_source_177;

    tmp_compare_left_66 = const_str_plain_metaclass;
    tmp_compare_right_66 = tmp_pyasn1_modules$rfc2251_class_creation_33__class_decl_dict;

    tmp_cmp_In_66 = PySequence_Contains( tmp_compare_right_66, tmp_compare_left_66 );
    if ( tmp_cmp_In_66 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 203;
        goto try_except_handler_33;
    }
    if ( tmp_cmp_In_66 == 1 )
    {
        goto branch_yes_33;
    }
    else
    {
        goto branch_no_33;
    }
    branch_yes_33:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_33__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 203;
        goto try_except_handler_33;
    }
    branch_no_33:;
    tmp_hasattr_source_33 = tmp_pyasn1_modules$rfc2251_class_creation_33__metaclass;

    tmp_hasattr_attr_33 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_33, tmp_hasattr_attr_33 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 203;
        goto try_except_handler_33;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_99;
    }
    else
    {
        goto condexpr_false_99;
    }
    condexpr_true_99:;
    tmp_source_name_60 = tmp_pyasn1_modules$rfc2251_class_creation_33__metaclass;

    tmp_called_name_34 = LOOKUP_ATTRIBUTE( tmp_source_name_60, const_str_plain___prepare__ );
    if ( tmp_called_name_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 203;
        goto try_except_handler_33;
    }
    tmp_args_name_33 = PyTuple_New( 2 );
    tmp_tuple_element_66 = const_str_plain_AttributeTypeAndValues;
    Py_INCREF( tmp_tuple_element_66 );
    PyTuple_SET_ITEM( tmp_args_name_33, 0, tmp_tuple_element_66 );
    tmp_tuple_element_66 = tmp_pyasn1_modules$rfc2251_class_creation_33__bases;

    Py_INCREF( tmp_tuple_element_66 );
    PyTuple_SET_ITEM( tmp_args_name_33, 1, tmp_tuple_element_66 );
    tmp_kw_name_33 = tmp_pyasn1_modules$rfc2251_class_creation_33__class_decl_dict;

    frame_module->f_lineno = 203;
    tmp_assign_source_178 = CALL_FUNCTION( tmp_called_name_34, tmp_args_name_33, tmp_kw_name_33 );
    Py_DECREF( tmp_called_name_34 );
    Py_DECREF( tmp_args_name_33 );
    if ( tmp_assign_source_178 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 203;
        goto try_except_handler_33;
    }
    goto condexpr_end_99;
    condexpr_false_99:;
    tmp_assign_source_178 = PyDict_New();
    condexpr_end_99:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_33__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_33__prepared = tmp_assign_source_178;

    tmp_assign_source_179 = impl_class_33_AttributeTypeAndValues_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_33__bases, tmp_pyasn1_modules$rfc2251_class_creation_33__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_33__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_33__prepared );
    if ( tmp_assign_source_179 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 203;
        goto try_except_handler_33;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeTypeAndValues, tmp_assign_source_179 );
    goto try_end_33;
    // Exception handler code:
    try_except_handler_33:;
    exception_keeper_type_33 = exception_type;
    exception_keeper_value_33 = exception_value;
    exception_keeper_tb_33 = exception_tb;
    exception_keeper_lineno_33 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_33__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_33__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_33__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_33__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_33__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_33__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_33__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_33__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_33;
    exception_value = exception_keeper_value_33;
    exception_tb = exception_keeper_tb_33;
    exception_lineno = exception_keeper_lineno_33;

    goto frame_exception_exit_1;
    // End of try:
    try_end_33:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_33__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_33__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_33__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_33__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_33__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_33__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_33__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_33__prepared = NULL;

    // Tried code:
    tmp_assign_source_180 = PyTuple_New( 1 );
    tmp_source_name_61 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_61 == NULL ))
    {
        tmp_source_name_61 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_61 == NULL )
    {
        Py_DECREF( tmp_assign_source_180 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 209;
        goto try_except_handler_34;
    }

    tmp_tuple_element_67 = LOOKUP_ATTRIBUTE( tmp_source_name_61, const_str_plain_Sequence );
    if ( tmp_tuple_element_67 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_180 );

        exception_lineno = 209;
        goto try_except_handler_34;
    }
    PyTuple_SET_ITEM( tmp_assign_source_180, 0, tmp_tuple_element_67 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_34__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_34__bases = tmp_assign_source_180;

    tmp_assign_source_181 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_34__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_34__class_decl_dict = tmp_assign_source_181;

    tmp_compare_left_67 = const_str_plain_metaclass;
    tmp_compare_right_67 = tmp_pyasn1_modules$rfc2251_class_creation_34__class_decl_dict;

    tmp_cmp_In_67 = PySequence_Contains( tmp_compare_right_67, tmp_compare_left_67 );
    if ( tmp_cmp_In_67 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 209;
        goto try_except_handler_34;
    }
    if ( tmp_cmp_In_67 == 1 )
    {
        goto condexpr_true_100;
    }
    else
    {
        goto condexpr_false_100;
    }
    condexpr_true_100:;
    tmp_dget_dict_34 = tmp_pyasn1_modules$rfc2251_class_creation_34__class_decl_dict;

    tmp_dget_key_34 = const_str_plain_metaclass;
    tmp_class_meta_34 = DICT_GET_ITEM( tmp_dget_dict_34, tmp_dget_key_34 );
    if ( tmp_class_meta_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 209;
        goto try_except_handler_34;
    }
    goto condexpr_end_100;
    condexpr_false_100:;
    tmp_cond_value_34 = tmp_pyasn1_modules$rfc2251_class_creation_34__bases;

    tmp_cond_truth_34 = CHECK_IF_TRUE( tmp_cond_value_34 );
    if ( tmp_cond_truth_34 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 209;
        goto try_except_handler_34;
    }
    if ( tmp_cond_truth_34 == 1 )
    {
        goto condexpr_true_101;
    }
    else
    {
        goto condexpr_false_101;
    }
    condexpr_true_101:;
    tmp_subscribed_name_34 = tmp_pyasn1_modules$rfc2251_class_creation_34__bases;

    tmp_subscript_name_34 = const_int_0;
    tmp_type_arg_34 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_34, tmp_subscript_name_34 );
    if ( tmp_type_arg_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 209;
        goto try_except_handler_34;
    }
    tmp_class_meta_34 = BUILTIN_TYPE1( tmp_type_arg_34 );
    Py_DECREF( tmp_type_arg_34 );
    if ( tmp_class_meta_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 209;
        goto try_except_handler_34;
    }
    goto condexpr_end_101;
    condexpr_false_101:;
    tmp_class_meta_34 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_34 != NULL );
    Py_INCREF( tmp_class_meta_34 );
    condexpr_end_101:;
    condexpr_end_100:;
    tmp_class_bases_34 = tmp_pyasn1_modules$rfc2251_class_creation_34__bases;

    tmp_assign_source_182 = SELECT_METACLASS( tmp_class_meta_34, tmp_class_bases_34 );
    if ( tmp_assign_source_182 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_34 );

        exception_lineno = 209;
        goto try_except_handler_34;
    }
    Py_DECREF( tmp_class_meta_34 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_34__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_34__metaclass = tmp_assign_source_182;

    tmp_compare_left_68 = const_str_plain_metaclass;
    tmp_compare_right_68 = tmp_pyasn1_modules$rfc2251_class_creation_34__class_decl_dict;

    tmp_cmp_In_68 = PySequence_Contains( tmp_compare_right_68, tmp_compare_left_68 );
    if ( tmp_cmp_In_68 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 209;
        goto try_except_handler_34;
    }
    if ( tmp_cmp_In_68 == 1 )
    {
        goto branch_yes_34;
    }
    else
    {
        goto branch_no_34;
    }
    branch_yes_34:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_34__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 209;
        goto try_except_handler_34;
    }
    branch_no_34:;
    tmp_hasattr_source_34 = tmp_pyasn1_modules$rfc2251_class_creation_34__metaclass;

    tmp_hasattr_attr_34 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_34, tmp_hasattr_attr_34 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 209;
        goto try_except_handler_34;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_102;
    }
    else
    {
        goto condexpr_false_102;
    }
    condexpr_true_102:;
    tmp_source_name_62 = tmp_pyasn1_modules$rfc2251_class_creation_34__metaclass;

    tmp_called_name_35 = LOOKUP_ATTRIBUTE( tmp_source_name_62, const_str_plain___prepare__ );
    if ( tmp_called_name_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 209;
        goto try_except_handler_34;
    }
    tmp_args_name_34 = PyTuple_New( 2 );
    tmp_tuple_element_68 = const_str_plain_ModifyRequest;
    Py_INCREF( tmp_tuple_element_68 );
    PyTuple_SET_ITEM( tmp_args_name_34, 0, tmp_tuple_element_68 );
    tmp_tuple_element_68 = tmp_pyasn1_modules$rfc2251_class_creation_34__bases;

    Py_INCREF( tmp_tuple_element_68 );
    PyTuple_SET_ITEM( tmp_args_name_34, 1, tmp_tuple_element_68 );
    tmp_kw_name_34 = tmp_pyasn1_modules$rfc2251_class_creation_34__class_decl_dict;

    frame_module->f_lineno = 209;
    tmp_assign_source_183 = CALL_FUNCTION( tmp_called_name_35, tmp_args_name_34, tmp_kw_name_34 );
    Py_DECREF( tmp_called_name_35 );
    Py_DECREF( tmp_args_name_34 );
    if ( tmp_assign_source_183 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 209;
        goto try_except_handler_34;
    }
    goto condexpr_end_102;
    condexpr_false_102:;
    tmp_assign_source_183 = PyDict_New();
    condexpr_end_102:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_34__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_34__prepared = tmp_assign_source_183;

    tmp_assign_source_184 = impl_class_34_ModifyRequest_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_34__bases, tmp_pyasn1_modules$rfc2251_class_creation_34__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_34__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_34__prepared );
    if ( tmp_assign_source_184 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 209;
        goto try_except_handler_34;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_ModifyRequest, tmp_assign_source_184 );
    goto try_end_34;
    // Exception handler code:
    try_except_handler_34:;
    exception_keeper_type_34 = exception_type;
    exception_keeper_value_34 = exception_value;
    exception_keeper_tb_34 = exception_tb;
    exception_keeper_lineno_34 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_34__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_34__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_34__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_34__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_34__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_34__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_34__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_34__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_34;
    exception_value = exception_keeper_value_34;
    exception_tb = exception_keeper_tb_34;
    exception_lineno = exception_keeper_lineno_34;

    goto frame_exception_exit_1;
    // End of try:
    try_end_34:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_34__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_34__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_34__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_34__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_34__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_34__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_34__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_34__prepared = NULL;

    // Tried code:
    tmp_assign_source_185 = PyTuple_New( 1 );
    tmp_tuple_element_69 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPResult );

    if (unlikely( tmp_tuple_element_69 == NULL ))
    {
        tmp_tuple_element_69 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPResult );
    }

    if ( tmp_tuple_element_69 == NULL )
    {
        Py_DECREF( tmp_assign_source_185 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52537 ], 32, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 218;
        goto try_except_handler_35;
    }

    Py_INCREF( tmp_tuple_element_69 );
    PyTuple_SET_ITEM( tmp_assign_source_185, 0, tmp_tuple_element_69 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_35__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_35__bases = tmp_assign_source_185;

    tmp_assign_source_186 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_35__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_35__class_decl_dict = tmp_assign_source_186;

    tmp_compare_left_69 = const_str_plain_metaclass;
    tmp_compare_right_69 = tmp_pyasn1_modules$rfc2251_class_creation_35__class_decl_dict;

    tmp_cmp_In_69 = PySequence_Contains( tmp_compare_right_69, tmp_compare_left_69 );
    if ( tmp_cmp_In_69 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 218;
        goto try_except_handler_35;
    }
    if ( tmp_cmp_In_69 == 1 )
    {
        goto condexpr_true_103;
    }
    else
    {
        goto condexpr_false_103;
    }
    condexpr_true_103:;
    tmp_dget_dict_35 = tmp_pyasn1_modules$rfc2251_class_creation_35__class_decl_dict;

    tmp_dget_key_35 = const_str_plain_metaclass;
    tmp_class_meta_35 = DICT_GET_ITEM( tmp_dget_dict_35, tmp_dget_key_35 );
    if ( tmp_class_meta_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 218;
        goto try_except_handler_35;
    }
    goto condexpr_end_103;
    condexpr_false_103:;
    tmp_cond_value_35 = tmp_pyasn1_modules$rfc2251_class_creation_35__bases;

    tmp_cond_truth_35 = CHECK_IF_TRUE( tmp_cond_value_35 );
    if ( tmp_cond_truth_35 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 218;
        goto try_except_handler_35;
    }
    if ( tmp_cond_truth_35 == 1 )
    {
        goto condexpr_true_104;
    }
    else
    {
        goto condexpr_false_104;
    }
    condexpr_true_104:;
    tmp_subscribed_name_35 = tmp_pyasn1_modules$rfc2251_class_creation_35__bases;

    tmp_subscript_name_35 = const_int_0;
    tmp_type_arg_35 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_35, tmp_subscript_name_35 );
    if ( tmp_type_arg_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 218;
        goto try_except_handler_35;
    }
    tmp_class_meta_35 = BUILTIN_TYPE1( tmp_type_arg_35 );
    Py_DECREF( tmp_type_arg_35 );
    if ( tmp_class_meta_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 218;
        goto try_except_handler_35;
    }
    goto condexpr_end_104;
    condexpr_false_104:;
    tmp_class_meta_35 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_35 != NULL );
    Py_INCREF( tmp_class_meta_35 );
    condexpr_end_104:;
    condexpr_end_103:;
    tmp_class_bases_35 = tmp_pyasn1_modules$rfc2251_class_creation_35__bases;

    tmp_assign_source_187 = SELECT_METACLASS( tmp_class_meta_35, tmp_class_bases_35 );
    if ( tmp_assign_source_187 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_35 );

        exception_lineno = 218;
        goto try_except_handler_35;
    }
    Py_DECREF( tmp_class_meta_35 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_35__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_35__metaclass = tmp_assign_source_187;

    tmp_compare_left_70 = const_str_plain_metaclass;
    tmp_compare_right_70 = tmp_pyasn1_modules$rfc2251_class_creation_35__class_decl_dict;

    tmp_cmp_In_70 = PySequence_Contains( tmp_compare_right_70, tmp_compare_left_70 );
    if ( tmp_cmp_In_70 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 218;
        goto try_except_handler_35;
    }
    if ( tmp_cmp_In_70 == 1 )
    {
        goto branch_yes_35;
    }
    else
    {
        goto branch_no_35;
    }
    branch_yes_35:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_35__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 218;
        goto try_except_handler_35;
    }
    branch_no_35:;
    tmp_hasattr_source_35 = tmp_pyasn1_modules$rfc2251_class_creation_35__metaclass;

    tmp_hasattr_attr_35 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_35, tmp_hasattr_attr_35 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 218;
        goto try_except_handler_35;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_105;
    }
    else
    {
        goto condexpr_false_105;
    }
    condexpr_true_105:;
    tmp_source_name_63 = tmp_pyasn1_modules$rfc2251_class_creation_35__metaclass;

    tmp_called_name_36 = LOOKUP_ATTRIBUTE( tmp_source_name_63, const_str_plain___prepare__ );
    if ( tmp_called_name_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 218;
        goto try_except_handler_35;
    }
    tmp_args_name_35 = PyTuple_New( 2 );
    tmp_tuple_element_70 = const_str_plain_ModifyResponse;
    Py_INCREF( tmp_tuple_element_70 );
    PyTuple_SET_ITEM( tmp_args_name_35, 0, tmp_tuple_element_70 );
    tmp_tuple_element_70 = tmp_pyasn1_modules$rfc2251_class_creation_35__bases;

    Py_INCREF( tmp_tuple_element_70 );
    PyTuple_SET_ITEM( tmp_args_name_35, 1, tmp_tuple_element_70 );
    tmp_kw_name_35 = tmp_pyasn1_modules$rfc2251_class_creation_35__class_decl_dict;

    frame_module->f_lineno = 218;
    tmp_assign_source_188 = CALL_FUNCTION( tmp_called_name_36, tmp_args_name_35, tmp_kw_name_35 );
    Py_DECREF( tmp_called_name_36 );
    Py_DECREF( tmp_args_name_35 );
    if ( tmp_assign_source_188 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 218;
        goto try_except_handler_35;
    }
    goto condexpr_end_105;
    condexpr_false_105:;
    tmp_assign_source_188 = PyDict_New();
    condexpr_end_105:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_35__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_35__prepared = tmp_assign_source_188;

    tmp_assign_source_189 = impl_class_35_ModifyResponse_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_35__bases, tmp_pyasn1_modules$rfc2251_class_creation_35__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_35__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_35__prepared );
    if ( tmp_assign_source_189 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 218;
        goto try_except_handler_35;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_ModifyResponse, tmp_assign_source_189 );
    goto try_end_35;
    // Exception handler code:
    try_except_handler_35:;
    exception_keeper_type_35 = exception_type;
    exception_keeper_value_35 = exception_value;
    exception_keeper_tb_35 = exception_tb;
    exception_keeper_lineno_35 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_35__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_35__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_35__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_35__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_35__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_35__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_35__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_35__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_35;
    exception_value = exception_keeper_value_35;
    exception_tb = exception_keeper_tb_35;
    exception_lineno = exception_keeper_lineno_35;

    goto frame_exception_exit_1;
    // End of try:
    try_end_35:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_35__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_35__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_35__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_35__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_35__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_35__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_35__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_35__prepared = NULL;

    // Tried code:
    tmp_assign_source_190 = PyTuple_New( 1 );
    tmp_source_name_64 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_64 == NULL ))
    {
        tmp_source_name_64 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_64 == NULL )
    {
        Py_DECREF( tmp_assign_source_190 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 223;
        goto try_except_handler_36;
    }

    tmp_tuple_element_71 = LOOKUP_ATTRIBUTE( tmp_source_name_64, const_str_plain_SequenceOf );
    if ( tmp_tuple_element_71 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_190 );

        exception_lineno = 223;
        goto try_except_handler_36;
    }
    PyTuple_SET_ITEM( tmp_assign_source_190, 0, tmp_tuple_element_71 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_36__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_36__bases = tmp_assign_source_190;

    tmp_assign_source_191 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_36__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_36__class_decl_dict = tmp_assign_source_191;

    tmp_compare_left_71 = const_str_plain_metaclass;
    tmp_compare_right_71 = tmp_pyasn1_modules$rfc2251_class_creation_36__class_decl_dict;

    tmp_cmp_In_71 = PySequence_Contains( tmp_compare_right_71, tmp_compare_left_71 );
    if ( tmp_cmp_In_71 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 223;
        goto try_except_handler_36;
    }
    if ( tmp_cmp_In_71 == 1 )
    {
        goto condexpr_true_106;
    }
    else
    {
        goto condexpr_false_106;
    }
    condexpr_true_106:;
    tmp_dget_dict_36 = tmp_pyasn1_modules$rfc2251_class_creation_36__class_decl_dict;

    tmp_dget_key_36 = const_str_plain_metaclass;
    tmp_class_meta_36 = DICT_GET_ITEM( tmp_dget_dict_36, tmp_dget_key_36 );
    if ( tmp_class_meta_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 223;
        goto try_except_handler_36;
    }
    goto condexpr_end_106;
    condexpr_false_106:;
    tmp_cond_value_36 = tmp_pyasn1_modules$rfc2251_class_creation_36__bases;

    tmp_cond_truth_36 = CHECK_IF_TRUE( tmp_cond_value_36 );
    if ( tmp_cond_truth_36 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 223;
        goto try_except_handler_36;
    }
    if ( tmp_cond_truth_36 == 1 )
    {
        goto condexpr_true_107;
    }
    else
    {
        goto condexpr_false_107;
    }
    condexpr_true_107:;
    tmp_subscribed_name_36 = tmp_pyasn1_modules$rfc2251_class_creation_36__bases;

    tmp_subscript_name_36 = const_int_0;
    tmp_type_arg_36 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_36, tmp_subscript_name_36 );
    if ( tmp_type_arg_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 223;
        goto try_except_handler_36;
    }
    tmp_class_meta_36 = BUILTIN_TYPE1( tmp_type_arg_36 );
    Py_DECREF( tmp_type_arg_36 );
    if ( tmp_class_meta_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 223;
        goto try_except_handler_36;
    }
    goto condexpr_end_107;
    condexpr_false_107:;
    tmp_class_meta_36 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_36 != NULL );
    Py_INCREF( tmp_class_meta_36 );
    condexpr_end_107:;
    condexpr_end_106:;
    tmp_class_bases_36 = tmp_pyasn1_modules$rfc2251_class_creation_36__bases;

    tmp_assign_source_192 = SELECT_METACLASS( tmp_class_meta_36, tmp_class_bases_36 );
    if ( tmp_assign_source_192 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_36 );

        exception_lineno = 223;
        goto try_except_handler_36;
    }
    Py_DECREF( tmp_class_meta_36 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_36__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_36__metaclass = tmp_assign_source_192;

    tmp_compare_left_72 = const_str_plain_metaclass;
    tmp_compare_right_72 = tmp_pyasn1_modules$rfc2251_class_creation_36__class_decl_dict;

    tmp_cmp_In_72 = PySequence_Contains( tmp_compare_right_72, tmp_compare_left_72 );
    if ( tmp_cmp_In_72 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 223;
        goto try_except_handler_36;
    }
    if ( tmp_cmp_In_72 == 1 )
    {
        goto branch_yes_36;
    }
    else
    {
        goto branch_no_36;
    }
    branch_yes_36:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_36__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 223;
        goto try_except_handler_36;
    }
    branch_no_36:;
    tmp_hasattr_source_36 = tmp_pyasn1_modules$rfc2251_class_creation_36__metaclass;

    tmp_hasattr_attr_36 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_36, tmp_hasattr_attr_36 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 223;
        goto try_except_handler_36;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_108;
    }
    else
    {
        goto condexpr_false_108;
    }
    condexpr_true_108:;
    tmp_source_name_65 = tmp_pyasn1_modules$rfc2251_class_creation_36__metaclass;

    tmp_called_name_37 = LOOKUP_ATTRIBUTE( tmp_source_name_65, const_str_plain___prepare__ );
    if ( tmp_called_name_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 223;
        goto try_except_handler_36;
    }
    tmp_args_name_36 = PyTuple_New( 2 );
    tmp_tuple_element_72 = const_str_plain_AttributeList;
    Py_INCREF( tmp_tuple_element_72 );
    PyTuple_SET_ITEM( tmp_args_name_36, 0, tmp_tuple_element_72 );
    tmp_tuple_element_72 = tmp_pyasn1_modules$rfc2251_class_creation_36__bases;

    Py_INCREF( tmp_tuple_element_72 );
    PyTuple_SET_ITEM( tmp_args_name_36, 1, tmp_tuple_element_72 );
    tmp_kw_name_36 = tmp_pyasn1_modules$rfc2251_class_creation_36__class_decl_dict;

    frame_module->f_lineno = 223;
    tmp_assign_source_193 = CALL_FUNCTION( tmp_called_name_37, tmp_args_name_36, tmp_kw_name_36 );
    Py_DECREF( tmp_called_name_37 );
    Py_DECREF( tmp_args_name_36 );
    if ( tmp_assign_source_193 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 223;
        goto try_except_handler_36;
    }
    goto condexpr_end_108;
    condexpr_false_108:;
    tmp_assign_source_193 = PyDict_New();
    condexpr_end_108:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_36__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_36__prepared = tmp_assign_source_193;

    tmp_assign_source_194 = impl_class_36_AttributeList_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_36__bases, tmp_pyasn1_modules$rfc2251_class_creation_36__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_36__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_36__prepared );
    if ( tmp_assign_source_194 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 223;
        goto try_except_handler_36;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AttributeList, tmp_assign_source_194 );
    goto try_end_36;
    // Exception handler code:
    try_except_handler_36:;
    exception_keeper_type_36 = exception_type;
    exception_keeper_value_36 = exception_value;
    exception_keeper_tb_36 = exception_tb;
    exception_keeper_lineno_36 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_36__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_36__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_36__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_36__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_36__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_36__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_36__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_36__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_36;
    exception_value = exception_keeper_value_36;
    exception_tb = exception_keeper_tb_36;
    exception_lineno = exception_keeper_lineno_36;

    goto frame_exception_exit_1;
    // End of try:
    try_end_36:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_36__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_36__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_36__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_36__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_36__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_36__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_36__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_36__prepared = NULL;

    // Tried code:
    tmp_assign_source_195 = PyTuple_New( 1 );
    tmp_source_name_66 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_66 == NULL ))
    {
        tmp_source_name_66 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_66 == NULL )
    {
        Py_DECREF( tmp_assign_source_195 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 226;
        goto try_except_handler_37;
    }

    tmp_tuple_element_73 = LOOKUP_ATTRIBUTE( tmp_source_name_66, const_str_plain_Sequence );
    if ( tmp_tuple_element_73 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_195 );

        exception_lineno = 226;
        goto try_except_handler_37;
    }
    PyTuple_SET_ITEM( tmp_assign_source_195, 0, tmp_tuple_element_73 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_37__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_37__bases = tmp_assign_source_195;

    tmp_assign_source_196 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_37__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_37__class_decl_dict = tmp_assign_source_196;

    tmp_compare_left_73 = const_str_plain_metaclass;
    tmp_compare_right_73 = tmp_pyasn1_modules$rfc2251_class_creation_37__class_decl_dict;

    tmp_cmp_In_73 = PySequence_Contains( tmp_compare_right_73, tmp_compare_left_73 );
    if ( tmp_cmp_In_73 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 226;
        goto try_except_handler_37;
    }
    if ( tmp_cmp_In_73 == 1 )
    {
        goto condexpr_true_109;
    }
    else
    {
        goto condexpr_false_109;
    }
    condexpr_true_109:;
    tmp_dget_dict_37 = tmp_pyasn1_modules$rfc2251_class_creation_37__class_decl_dict;

    tmp_dget_key_37 = const_str_plain_metaclass;
    tmp_class_meta_37 = DICT_GET_ITEM( tmp_dget_dict_37, tmp_dget_key_37 );
    if ( tmp_class_meta_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 226;
        goto try_except_handler_37;
    }
    goto condexpr_end_109;
    condexpr_false_109:;
    tmp_cond_value_37 = tmp_pyasn1_modules$rfc2251_class_creation_37__bases;

    tmp_cond_truth_37 = CHECK_IF_TRUE( tmp_cond_value_37 );
    if ( tmp_cond_truth_37 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 226;
        goto try_except_handler_37;
    }
    if ( tmp_cond_truth_37 == 1 )
    {
        goto condexpr_true_110;
    }
    else
    {
        goto condexpr_false_110;
    }
    condexpr_true_110:;
    tmp_subscribed_name_37 = tmp_pyasn1_modules$rfc2251_class_creation_37__bases;

    tmp_subscript_name_37 = const_int_0;
    tmp_type_arg_37 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_37, tmp_subscript_name_37 );
    if ( tmp_type_arg_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 226;
        goto try_except_handler_37;
    }
    tmp_class_meta_37 = BUILTIN_TYPE1( tmp_type_arg_37 );
    Py_DECREF( tmp_type_arg_37 );
    if ( tmp_class_meta_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 226;
        goto try_except_handler_37;
    }
    goto condexpr_end_110;
    condexpr_false_110:;
    tmp_class_meta_37 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_37 != NULL );
    Py_INCREF( tmp_class_meta_37 );
    condexpr_end_110:;
    condexpr_end_109:;
    tmp_class_bases_37 = tmp_pyasn1_modules$rfc2251_class_creation_37__bases;

    tmp_assign_source_197 = SELECT_METACLASS( tmp_class_meta_37, tmp_class_bases_37 );
    if ( tmp_assign_source_197 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_37 );

        exception_lineno = 226;
        goto try_except_handler_37;
    }
    Py_DECREF( tmp_class_meta_37 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_37__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_37__metaclass = tmp_assign_source_197;

    tmp_compare_left_74 = const_str_plain_metaclass;
    tmp_compare_right_74 = tmp_pyasn1_modules$rfc2251_class_creation_37__class_decl_dict;

    tmp_cmp_In_74 = PySequence_Contains( tmp_compare_right_74, tmp_compare_left_74 );
    if ( tmp_cmp_In_74 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 226;
        goto try_except_handler_37;
    }
    if ( tmp_cmp_In_74 == 1 )
    {
        goto branch_yes_37;
    }
    else
    {
        goto branch_no_37;
    }
    branch_yes_37:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_37__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 226;
        goto try_except_handler_37;
    }
    branch_no_37:;
    tmp_hasattr_source_37 = tmp_pyasn1_modules$rfc2251_class_creation_37__metaclass;

    tmp_hasattr_attr_37 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_37, tmp_hasattr_attr_37 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 226;
        goto try_except_handler_37;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_111;
    }
    else
    {
        goto condexpr_false_111;
    }
    condexpr_true_111:;
    tmp_source_name_67 = tmp_pyasn1_modules$rfc2251_class_creation_37__metaclass;

    tmp_called_name_38 = LOOKUP_ATTRIBUTE( tmp_source_name_67, const_str_plain___prepare__ );
    if ( tmp_called_name_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 226;
        goto try_except_handler_37;
    }
    tmp_args_name_37 = PyTuple_New( 2 );
    tmp_tuple_element_74 = const_str_plain_AddRequest;
    Py_INCREF( tmp_tuple_element_74 );
    PyTuple_SET_ITEM( tmp_args_name_37, 0, tmp_tuple_element_74 );
    tmp_tuple_element_74 = tmp_pyasn1_modules$rfc2251_class_creation_37__bases;

    Py_INCREF( tmp_tuple_element_74 );
    PyTuple_SET_ITEM( tmp_args_name_37, 1, tmp_tuple_element_74 );
    tmp_kw_name_37 = tmp_pyasn1_modules$rfc2251_class_creation_37__class_decl_dict;

    frame_module->f_lineno = 226;
    tmp_assign_source_198 = CALL_FUNCTION( tmp_called_name_38, tmp_args_name_37, tmp_kw_name_37 );
    Py_DECREF( tmp_called_name_38 );
    Py_DECREF( tmp_args_name_37 );
    if ( tmp_assign_source_198 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 226;
        goto try_except_handler_37;
    }
    goto condexpr_end_111;
    condexpr_false_111:;
    tmp_assign_source_198 = PyDict_New();
    condexpr_end_111:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_37__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_37__prepared = tmp_assign_source_198;

    tmp_assign_source_199 = impl_class_37_AddRequest_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_37__bases, tmp_pyasn1_modules$rfc2251_class_creation_37__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_37__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_37__prepared );
    if ( tmp_assign_source_199 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 226;
        goto try_except_handler_37;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AddRequest, tmp_assign_source_199 );
    goto try_end_37;
    // Exception handler code:
    try_except_handler_37:;
    exception_keeper_type_37 = exception_type;
    exception_keeper_value_37 = exception_value;
    exception_keeper_tb_37 = exception_tb;
    exception_keeper_lineno_37 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_37__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_37__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_37__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_37__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_37__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_37__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_37__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_37__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_37;
    exception_value = exception_keeper_value_37;
    exception_tb = exception_keeper_tb_37;
    exception_lineno = exception_keeper_lineno_37;

    goto frame_exception_exit_1;
    // End of try:
    try_end_37:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_37__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_37__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_37__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_37__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_37__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_37__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_37__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_37__prepared = NULL;

    // Tried code:
    tmp_assign_source_200 = PyTuple_New( 1 );
    tmp_tuple_element_75 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPResult );

    if (unlikely( tmp_tuple_element_75 == NULL ))
    {
        tmp_tuple_element_75 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPResult );
    }

    if ( tmp_tuple_element_75 == NULL )
    {
        Py_DECREF( tmp_assign_source_200 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52537 ], 32, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 235;
        goto try_except_handler_38;
    }

    Py_INCREF( tmp_tuple_element_75 );
    PyTuple_SET_ITEM( tmp_assign_source_200, 0, tmp_tuple_element_75 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_38__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_38__bases = tmp_assign_source_200;

    tmp_assign_source_201 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_38__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_38__class_decl_dict = tmp_assign_source_201;

    tmp_compare_left_75 = const_str_plain_metaclass;
    tmp_compare_right_75 = tmp_pyasn1_modules$rfc2251_class_creation_38__class_decl_dict;

    tmp_cmp_In_75 = PySequence_Contains( tmp_compare_right_75, tmp_compare_left_75 );
    if ( tmp_cmp_In_75 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 235;
        goto try_except_handler_38;
    }
    if ( tmp_cmp_In_75 == 1 )
    {
        goto condexpr_true_112;
    }
    else
    {
        goto condexpr_false_112;
    }
    condexpr_true_112:;
    tmp_dget_dict_38 = tmp_pyasn1_modules$rfc2251_class_creation_38__class_decl_dict;

    tmp_dget_key_38 = const_str_plain_metaclass;
    tmp_class_meta_38 = DICT_GET_ITEM( tmp_dget_dict_38, tmp_dget_key_38 );
    if ( tmp_class_meta_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 235;
        goto try_except_handler_38;
    }
    goto condexpr_end_112;
    condexpr_false_112:;
    tmp_cond_value_38 = tmp_pyasn1_modules$rfc2251_class_creation_38__bases;

    tmp_cond_truth_38 = CHECK_IF_TRUE( tmp_cond_value_38 );
    if ( tmp_cond_truth_38 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 235;
        goto try_except_handler_38;
    }
    if ( tmp_cond_truth_38 == 1 )
    {
        goto condexpr_true_113;
    }
    else
    {
        goto condexpr_false_113;
    }
    condexpr_true_113:;
    tmp_subscribed_name_38 = tmp_pyasn1_modules$rfc2251_class_creation_38__bases;

    tmp_subscript_name_38 = const_int_0;
    tmp_type_arg_38 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_38, tmp_subscript_name_38 );
    if ( tmp_type_arg_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 235;
        goto try_except_handler_38;
    }
    tmp_class_meta_38 = BUILTIN_TYPE1( tmp_type_arg_38 );
    Py_DECREF( tmp_type_arg_38 );
    if ( tmp_class_meta_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 235;
        goto try_except_handler_38;
    }
    goto condexpr_end_113;
    condexpr_false_113:;
    tmp_class_meta_38 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_38 != NULL );
    Py_INCREF( tmp_class_meta_38 );
    condexpr_end_113:;
    condexpr_end_112:;
    tmp_class_bases_38 = tmp_pyasn1_modules$rfc2251_class_creation_38__bases;

    tmp_assign_source_202 = SELECT_METACLASS( tmp_class_meta_38, tmp_class_bases_38 );
    if ( tmp_assign_source_202 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_38 );

        exception_lineno = 235;
        goto try_except_handler_38;
    }
    Py_DECREF( tmp_class_meta_38 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_38__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_38__metaclass = tmp_assign_source_202;

    tmp_compare_left_76 = const_str_plain_metaclass;
    tmp_compare_right_76 = tmp_pyasn1_modules$rfc2251_class_creation_38__class_decl_dict;

    tmp_cmp_In_76 = PySequence_Contains( tmp_compare_right_76, tmp_compare_left_76 );
    if ( tmp_cmp_In_76 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 235;
        goto try_except_handler_38;
    }
    if ( tmp_cmp_In_76 == 1 )
    {
        goto branch_yes_38;
    }
    else
    {
        goto branch_no_38;
    }
    branch_yes_38:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_38__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 235;
        goto try_except_handler_38;
    }
    branch_no_38:;
    tmp_hasattr_source_38 = tmp_pyasn1_modules$rfc2251_class_creation_38__metaclass;

    tmp_hasattr_attr_38 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_38, tmp_hasattr_attr_38 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 235;
        goto try_except_handler_38;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_114;
    }
    else
    {
        goto condexpr_false_114;
    }
    condexpr_true_114:;
    tmp_source_name_68 = tmp_pyasn1_modules$rfc2251_class_creation_38__metaclass;

    tmp_called_name_39 = LOOKUP_ATTRIBUTE( tmp_source_name_68, const_str_plain___prepare__ );
    if ( tmp_called_name_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 235;
        goto try_except_handler_38;
    }
    tmp_args_name_38 = PyTuple_New( 2 );
    tmp_tuple_element_76 = const_str_plain_AddResponse;
    Py_INCREF( tmp_tuple_element_76 );
    PyTuple_SET_ITEM( tmp_args_name_38, 0, tmp_tuple_element_76 );
    tmp_tuple_element_76 = tmp_pyasn1_modules$rfc2251_class_creation_38__bases;

    Py_INCREF( tmp_tuple_element_76 );
    PyTuple_SET_ITEM( tmp_args_name_38, 1, tmp_tuple_element_76 );
    tmp_kw_name_38 = tmp_pyasn1_modules$rfc2251_class_creation_38__class_decl_dict;

    frame_module->f_lineno = 235;
    tmp_assign_source_203 = CALL_FUNCTION( tmp_called_name_39, tmp_args_name_38, tmp_kw_name_38 );
    Py_DECREF( tmp_called_name_39 );
    Py_DECREF( tmp_args_name_38 );
    if ( tmp_assign_source_203 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 235;
        goto try_except_handler_38;
    }
    goto condexpr_end_114;
    condexpr_false_114:;
    tmp_assign_source_203 = PyDict_New();
    condexpr_end_114:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_38__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_38__prepared = tmp_assign_source_203;

    tmp_assign_source_204 = impl_class_38_AddResponse_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_38__bases, tmp_pyasn1_modules$rfc2251_class_creation_38__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_38__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_38__prepared );
    if ( tmp_assign_source_204 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 235;
        goto try_except_handler_38;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AddResponse, tmp_assign_source_204 );
    goto try_end_38;
    // Exception handler code:
    try_except_handler_38:;
    exception_keeper_type_38 = exception_type;
    exception_keeper_value_38 = exception_value;
    exception_keeper_tb_38 = exception_tb;
    exception_keeper_lineno_38 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_38__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_38__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_38__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_38__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_38__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_38__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_38__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_38__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_38;
    exception_value = exception_keeper_value_38;
    exception_tb = exception_keeper_tb_38;
    exception_lineno = exception_keeper_lineno_38;

    goto frame_exception_exit_1;
    // End of try:
    try_end_38:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_38__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_38__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_38__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_38__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_38__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_38__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_38__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_38__prepared = NULL;

    // Tried code:
    tmp_assign_source_205 = PyTuple_New( 1 );
    tmp_tuple_element_77 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPResult );

    if (unlikely( tmp_tuple_element_77 == NULL ))
    {
        tmp_tuple_element_77 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPResult );
    }

    if ( tmp_tuple_element_77 == NULL )
    {
        Py_DECREF( tmp_assign_source_205 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52537 ], 32, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 240;
        goto try_except_handler_39;
    }

    Py_INCREF( tmp_tuple_element_77 );
    PyTuple_SET_ITEM( tmp_assign_source_205, 0, tmp_tuple_element_77 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_39__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_39__bases = tmp_assign_source_205;

    tmp_assign_source_206 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_39__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_39__class_decl_dict = tmp_assign_source_206;

    tmp_compare_left_77 = const_str_plain_metaclass;
    tmp_compare_right_77 = tmp_pyasn1_modules$rfc2251_class_creation_39__class_decl_dict;

    tmp_cmp_In_77 = PySequence_Contains( tmp_compare_right_77, tmp_compare_left_77 );
    if ( tmp_cmp_In_77 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 240;
        goto try_except_handler_39;
    }
    if ( tmp_cmp_In_77 == 1 )
    {
        goto condexpr_true_115;
    }
    else
    {
        goto condexpr_false_115;
    }
    condexpr_true_115:;
    tmp_dget_dict_39 = tmp_pyasn1_modules$rfc2251_class_creation_39__class_decl_dict;

    tmp_dget_key_39 = const_str_plain_metaclass;
    tmp_class_meta_39 = DICT_GET_ITEM( tmp_dget_dict_39, tmp_dget_key_39 );
    if ( tmp_class_meta_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 240;
        goto try_except_handler_39;
    }
    goto condexpr_end_115;
    condexpr_false_115:;
    tmp_cond_value_39 = tmp_pyasn1_modules$rfc2251_class_creation_39__bases;

    tmp_cond_truth_39 = CHECK_IF_TRUE( tmp_cond_value_39 );
    if ( tmp_cond_truth_39 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 240;
        goto try_except_handler_39;
    }
    if ( tmp_cond_truth_39 == 1 )
    {
        goto condexpr_true_116;
    }
    else
    {
        goto condexpr_false_116;
    }
    condexpr_true_116:;
    tmp_subscribed_name_39 = tmp_pyasn1_modules$rfc2251_class_creation_39__bases;

    tmp_subscript_name_39 = const_int_0;
    tmp_type_arg_39 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_39, tmp_subscript_name_39 );
    if ( tmp_type_arg_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 240;
        goto try_except_handler_39;
    }
    tmp_class_meta_39 = BUILTIN_TYPE1( tmp_type_arg_39 );
    Py_DECREF( tmp_type_arg_39 );
    if ( tmp_class_meta_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 240;
        goto try_except_handler_39;
    }
    goto condexpr_end_116;
    condexpr_false_116:;
    tmp_class_meta_39 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_39 != NULL );
    Py_INCREF( tmp_class_meta_39 );
    condexpr_end_116:;
    condexpr_end_115:;
    tmp_class_bases_39 = tmp_pyasn1_modules$rfc2251_class_creation_39__bases;

    tmp_assign_source_207 = SELECT_METACLASS( tmp_class_meta_39, tmp_class_bases_39 );
    if ( tmp_assign_source_207 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_39 );

        exception_lineno = 240;
        goto try_except_handler_39;
    }
    Py_DECREF( tmp_class_meta_39 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_39__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_39__metaclass = tmp_assign_source_207;

    tmp_compare_left_78 = const_str_plain_metaclass;
    tmp_compare_right_78 = tmp_pyasn1_modules$rfc2251_class_creation_39__class_decl_dict;

    tmp_cmp_In_78 = PySequence_Contains( tmp_compare_right_78, tmp_compare_left_78 );
    if ( tmp_cmp_In_78 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 240;
        goto try_except_handler_39;
    }
    if ( tmp_cmp_In_78 == 1 )
    {
        goto branch_yes_39;
    }
    else
    {
        goto branch_no_39;
    }
    branch_yes_39:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_39__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 240;
        goto try_except_handler_39;
    }
    branch_no_39:;
    tmp_hasattr_source_39 = tmp_pyasn1_modules$rfc2251_class_creation_39__metaclass;

    tmp_hasattr_attr_39 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_39, tmp_hasattr_attr_39 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 240;
        goto try_except_handler_39;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_117;
    }
    else
    {
        goto condexpr_false_117;
    }
    condexpr_true_117:;
    tmp_source_name_69 = tmp_pyasn1_modules$rfc2251_class_creation_39__metaclass;

    tmp_called_name_40 = LOOKUP_ATTRIBUTE( tmp_source_name_69, const_str_plain___prepare__ );
    if ( tmp_called_name_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 240;
        goto try_except_handler_39;
    }
    tmp_args_name_39 = PyTuple_New( 2 );
    tmp_tuple_element_78 = const_str_plain_DelRequest;
    Py_INCREF( tmp_tuple_element_78 );
    PyTuple_SET_ITEM( tmp_args_name_39, 0, tmp_tuple_element_78 );
    tmp_tuple_element_78 = tmp_pyasn1_modules$rfc2251_class_creation_39__bases;

    Py_INCREF( tmp_tuple_element_78 );
    PyTuple_SET_ITEM( tmp_args_name_39, 1, tmp_tuple_element_78 );
    tmp_kw_name_39 = tmp_pyasn1_modules$rfc2251_class_creation_39__class_decl_dict;

    frame_module->f_lineno = 240;
    tmp_assign_source_208 = CALL_FUNCTION( tmp_called_name_40, tmp_args_name_39, tmp_kw_name_39 );
    Py_DECREF( tmp_called_name_40 );
    Py_DECREF( tmp_args_name_39 );
    if ( tmp_assign_source_208 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 240;
        goto try_except_handler_39;
    }
    goto condexpr_end_117;
    condexpr_false_117:;
    tmp_assign_source_208 = PyDict_New();
    condexpr_end_117:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_39__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_39__prepared = tmp_assign_source_208;

    tmp_assign_source_209 = impl_class_39_DelRequest_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_39__bases, tmp_pyasn1_modules$rfc2251_class_creation_39__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_39__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_39__prepared );
    if ( tmp_assign_source_209 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 240;
        goto try_except_handler_39;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_DelRequest, tmp_assign_source_209 );
    goto try_end_39;
    // Exception handler code:
    try_except_handler_39:;
    exception_keeper_type_39 = exception_type;
    exception_keeper_value_39 = exception_value;
    exception_keeper_tb_39 = exception_tb;
    exception_keeper_lineno_39 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_39__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_39__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_39__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_39__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_39__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_39__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_39__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_39__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_39;
    exception_value = exception_keeper_value_39;
    exception_tb = exception_keeper_tb_39;
    exception_lineno = exception_keeper_lineno_39;

    goto frame_exception_exit_1;
    // End of try:
    try_end_39:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_39__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_39__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_39__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_39__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_39__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_39__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_39__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_39__prepared = NULL;

    // Tried code:
    tmp_assign_source_210 = PyTuple_New( 1 );
    tmp_tuple_element_79 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPResult );

    if (unlikely( tmp_tuple_element_79 == NULL ))
    {
        tmp_tuple_element_79 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPResult );
    }

    if ( tmp_tuple_element_79 == NULL )
    {
        Py_DECREF( tmp_assign_source_210 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52537 ], 32, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 245;
        goto try_except_handler_40;
    }

    Py_INCREF( tmp_tuple_element_79 );
    PyTuple_SET_ITEM( tmp_assign_source_210, 0, tmp_tuple_element_79 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_40__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_40__bases = tmp_assign_source_210;

    tmp_assign_source_211 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_40__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_40__class_decl_dict = tmp_assign_source_211;

    tmp_compare_left_79 = const_str_plain_metaclass;
    tmp_compare_right_79 = tmp_pyasn1_modules$rfc2251_class_creation_40__class_decl_dict;

    tmp_cmp_In_79 = PySequence_Contains( tmp_compare_right_79, tmp_compare_left_79 );
    if ( tmp_cmp_In_79 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 245;
        goto try_except_handler_40;
    }
    if ( tmp_cmp_In_79 == 1 )
    {
        goto condexpr_true_118;
    }
    else
    {
        goto condexpr_false_118;
    }
    condexpr_true_118:;
    tmp_dget_dict_40 = tmp_pyasn1_modules$rfc2251_class_creation_40__class_decl_dict;

    tmp_dget_key_40 = const_str_plain_metaclass;
    tmp_class_meta_40 = DICT_GET_ITEM( tmp_dget_dict_40, tmp_dget_key_40 );
    if ( tmp_class_meta_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 245;
        goto try_except_handler_40;
    }
    goto condexpr_end_118;
    condexpr_false_118:;
    tmp_cond_value_40 = tmp_pyasn1_modules$rfc2251_class_creation_40__bases;

    tmp_cond_truth_40 = CHECK_IF_TRUE( tmp_cond_value_40 );
    if ( tmp_cond_truth_40 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 245;
        goto try_except_handler_40;
    }
    if ( tmp_cond_truth_40 == 1 )
    {
        goto condexpr_true_119;
    }
    else
    {
        goto condexpr_false_119;
    }
    condexpr_true_119:;
    tmp_subscribed_name_40 = tmp_pyasn1_modules$rfc2251_class_creation_40__bases;

    tmp_subscript_name_40 = const_int_0;
    tmp_type_arg_40 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_40, tmp_subscript_name_40 );
    if ( tmp_type_arg_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 245;
        goto try_except_handler_40;
    }
    tmp_class_meta_40 = BUILTIN_TYPE1( tmp_type_arg_40 );
    Py_DECREF( tmp_type_arg_40 );
    if ( tmp_class_meta_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 245;
        goto try_except_handler_40;
    }
    goto condexpr_end_119;
    condexpr_false_119:;
    tmp_class_meta_40 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_40 != NULL );
    Py_INCREF( tmp_class_meta_40 );
    condexpr_end_119:;
    condexpr_end_118:;
    tmp_class_bases_40 = tmp_pyasn1_modules$rfc2251_class_creation_40__bases;

    tmp_assign_source_212 = SELECT_METACLASS( tmp_class_meta_40, tmp_class_bases_40 );
    if ( tmp_assign_source_212 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_40 );

        exception_lineno = 245;
        goto try_except_handler_40;
    }
    Py_DECREF( tmp_class_meta_40 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_40__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_40__metaclass = tmp_assign_source_212;

    tmp_compare_left_80 = const_str_plain_metaclass;
    tmp_compare_right_80 = tmp_pyasn1_modules$rfc2251_class_creation_40__class_decl_dict;

    tmp_cmp_In_80 = PySequence_Contains( tmp_compare_right_80, tmp_compare_left_80 );
    if ( tmp_cmp_In_80 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 245;
        goto try_except_handler_40;
    }
    if ( tmp_cmp_In_80 == 1 )
    {
        goto branch_yes_40;
    }
    else
    {
        goto branch_no_40;
    }
    branch_yes_40:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_40__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 245;
        goto try_except_handler_40;
    }
    branch_no_40:;
    tmp_hasattr_source_40 = tmp_pyasn1_modules$rfc2251_class_creation_40__metaclass;

    tmp_hasattr_attr_40 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_40, tmp_hasattr_attr_40 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 245;
        goto try_except_handler_40;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_120;
    }
    else
    {
        goto condexpr_false_120;
    }
    condexpr_true_120:;
    tmp_source_name_70 = tmp_pyasn1_modules$rfc2251_class_creation_40__metaclass;

    tmp_called_name_41 = LOOKUP_ATTRIBUTE( tmp_source_name_70, const_str_plain___prepare__ );
    if ( tmp_called_name_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 245;
        goto try_except_handler_40;
    }
    tmp_args_name_40 = PyTuple_New( 2 );
    tmp_tuple_element_80 = const_str_plain_DelResponse;
    Py_INCREF( tmp_tuple_element_80 );
    PyTuple_SET_ITEM( tmp_args_name_40, 0, tmp_tuple_element_80 );
    tmp_tuple_element_80 = tmp_pyasn1_modules$rfc2251_class_creation_40__bases;

    Py_INCREF( tmp_tuple_element_80 );
    PyTuple_SET_ITEM( tmp_args_name_40, 1, tmp_tuple_element_80 );
    tmp_kw_name_40 = tmp_pyasn1_modules$rfc2251_class_creation_40__class_decl_dict;

    frame_module->f_lineno = 245;
    tmp_assign_source_213 = CALL_FUNCTION( tmp_called_name_41, tmp_args_name_40, tmp_kw_name_40 );
    Py_DECREF( tmp_called_name_41 );
    Py_DECREF( tmp_args_name_40 );
    if ( tmp_assign_source_213 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 245;
        goto try_except_handler_40;
    }
    goto condexpr_end_120;
    condexpr_false_120:;
    tmp_assign_source_213 = PyDict_New();
    condexpr_end_120:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_40__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_40__prepared = tmp_assign_source_213;

    tmp_assign_source_214 = impl_class_40_DelResponse_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_40__bases, tmp_pyasn1_modules$rfc2251_class_creation_40__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_40__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_40__prepared );
    if ( tmp_assign_source_214 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 245;
        goto try_except_handler_40;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_DelResponse, tmp_assign_source_214 );
    goto try_end_40;
    // Exception handler code:
    try_except_handler_40:;
    exception_keeper_type_40 = exception_type;
    exception_keeper_value_40 = exception_value;
    exception_keeper_tb_40 = exception_tb;
    exception_keeper_lineno_40 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_40__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_40__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_40__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_40__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_40__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_40__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_40__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_40__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_40;
    exception_value = exception_keeper_value_40;
    exception_tb = exception_keeper_tb_40;
    exception_lineno = exception_keeper_lineno_40;

    goto frame_exception_exit_1;
    // End of try:
    try_end_40:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_40__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_40__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_40__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_40__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_40__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_40__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_40__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_40__prepared = NULL;

    // Tried code:
    tmp_assign_source_215 = PyTuple_New( 1 );
    tmp_source_name_71 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_71 == NULL ))
    {
        tmp_source_name_71 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_71 == NULL )
    {
        Py_DECREF( tmp_assign_source_215 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 250;
        goto try_except_handler_41;
    }

    tmp_tuple_element_81 = LOOKUP_ATTRIBUTE( tmp_source_name_71, const_str_plain_Sequence );
    if ( tmp_tuple_element_81 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_215 );

        exception_lineno = 250;
        goto try_except_handler_41;
    }
    PyTuple_SET_ITEM( tmp_assign_source_215, 0, tmp_tuple_element_81 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_41__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_41__bases = tmp_assign_source_215;

    tmp_assign_source_216 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_41__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_41__class_decl_dict = tmp_assign_source_216;

    tmp_compare_left_81 = const_str_plain_metaclass;
    tmp_compare_right_81 = tmp_pyasn1_modules$rfc2251_class_creation_41__class_decl_dict;

    tmp_cmp_In_81 = PySequence_Contains( tmp_compare_right_81, tmp_compare_left_81 );
    if ( tmp_cmp_In_81 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 250;
        goto try_except_handler_41;
    }
    if ( tmp_cmp_In_81 == 1 )
    {
        goto condexpr_true_121;
    }
    else
    {
        goto condexpr_false_121;
    }
    condexpr_true_121:;
    tmp_dget_dict_41 = tmp_pyasn1_modules$rfc2251_class_creation_41__class_decl_dict;

    tmp_dget_key_41 = const_str_plain_metaclass;
    tmp_class_meta_41 = DICT_GET_ITEM( tmp_dget_dict_41, tmp_dget_key_41 );
    if ( tmp_class_meta_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 250;
        goto try_except_handler_41;
    }
    goto condexpr_end_121;
    condexpr_false_121:;
    tmp_cond_value_41 = tmp_pyasn1_modules$rfc2251_class_creation_41__bases;

    tmp_cond_truth_41 = CHECK_IF_TRUE( tmp_cond_value_41 );
    if ( tmp_cond_truth_41 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 250;
        goto try_except_handler_41;
    }
    if ( tmp_cond_truth_41 == 1 )
    {
        goto condexpr_true_122;
    }
    else
    {
        goto condexpr_false_122;
    }
    condexpr_true_122:;
    tmp_subscribed_name_41 = tmp_pyasn1_modules$rfc2251_class_creation_41__bases;

    tmp_subscript_name_41 = const_int_0;
    tmp_type_arg_41 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_41, tmp_subscript_name_41 );
    if ( tmp_type_arg_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 250;
        goto try_except_handler_41;
    }
    tmp_class_meta_41 = BUILTIN_TYPE1( tmp_type_arg_41 );
    Py_DECREF( tmp_type_arg_41 );
    if ( tmp_class_meta_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 250;
        goto try_except_handler_41;
    }
    goto condexpr_end_122;
    condexpr_false_122:;
    tmp_class_meta_41 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_41 != NULL );
    Py_INCREF( tmp_class_meta_41 );
    condexpr_end_122:;
    condexpr_end_121:;
    tmp_class_bases_41 = tmp_pyasn1_modules$rfc2251_class_creation_41__bases;

    tmp_assign_source_217 = SELECT_METACLASS( tmp_class_meta_41, tmp_class_bases_41 );
    if ( tmp_assign_source_217 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_41 );

        exception_lineno = 250;
        goto try_except_handler_41;
    }
    Py_DECREF( tmp_class_meta_41 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_41__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_41__metaclass = tmp_assign_source_217;

    tmp_compare_left_82 = const_str_plain_metaclass;
    tmp_compare_right_82 = tmp_pyasn1_modules$rfc2251_class_creation_41__class_decl_dict;

    tmp_cmp_In_82 = PySequence_Contains( tmp_compare_right_82, tmp_compare_left_82 );
    if ( tmp_cmp_In_82 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 250;
        goto try_except_handler_41;
    }
    if ( tmp_cmp_In_82 == 1 )
    {
        goto branch_yes_41;
    }
    else
    {
        goto branch_no_41;
    }
    branch_yes_41:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_41__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 250;
        goto try_except_handler_41;
    }
    branch_no_41:;
    tmp_hasattr_source_41 = tmp_pyasn1_modules$rfc2251_class_creation_41__metaclass;

    tmp_hasattr_attr_41 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_41, tmp_hasattr_attr_41 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 250;
        goto try_except_handler_41;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_123;
    }
    else
    {
        goto condexpr_false_123;
    }
    condexpr_true_123:;
    tmp_source_name_72 = tmp_pyasn1_modules$rfc2251_class_creation_41__metaclass;

    tmp_called_name_42 = LOOKUP_ATTRIBUTE( tmp_source_name_72, const_str_plain___prepare__ );
    if ( tmp_called_name_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 250;
        goto try_except_handler_41;
    }
    tmp_args_name_41 = PyTuple_New( 2 );
    tmp_tuple_element_82 = const_str_plain_ModifyDNRequest;
    Py_INCREF( tmp_tuple_element_82 );
    PyTuple_SET_ITEM( tmp_args_name_41, 0, tmp_tuple_element_82 );
    tmp_tuple_element_82 = tmp_pyasn1_modules$rfc2251_class_creation_41__bases;

    Py_INCREF( tmp_tuple_element_82 );
    PyTuple_SET_ITEM( tmp_args_name_41, 1, tmp_tuple_element_82 );
    tmp_kw_name_41 = tmp_pyasn1_modules$rfc2251_class_creation_41__class_decl_dict;

    frame_module->f_lineno = 250;
    tmp_assign_source_218 = CALL_FUNCTION( tmp_called_name_42, tmp_args_name_41, tmp_kw_name_41 );
    Py_DECREF( tmp_called_name_42 );
    Py_DECREF( tmp_args_name_41 );
    if ( tmp_assign_source_218 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 250;
        goto try_except_handler_41;
    }
    goto condexpr_end_123;
    condexpr_false_123:;
    tmp_assign_source_218 = PyDict_New();
    condexpr_end_123:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_41__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_41__prepared = tmp_assign_source_218;

    tmp_assign_source_219 = impl_class_41_ModifyDNRequest_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_41__bases, tmp_pyasn1_modules$rfc2251_class_creation_41__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_41__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_41__prepared );
    if ( tmp_assign_source_219 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 250;
        goto try_except_handler_41;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_ModifyDNRequest, tmp_assign_source_219 );
    goto try_end_41;
    // Exception handler code:
    try_except_handler_41:;
    exception_keeper_type_41 = exception_type;
    exception_keeper_value_41 = exception_value;
    exception_keeper_tb_41 = exception_tb;
    exception_keeper_lineno_41 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_41__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_41__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_41__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_41__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_41__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_41__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_41__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_41__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_41;
    exception_value = exception_keeper_value_41;
    exception_tb = exception_keeper_tb_41;
    exception_lineno = exception_keeper_lineno_41;

    goto frame_exception_exit_1;
    // End of try:
    try_end_41:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_41__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_41__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_41__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_41__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_41__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_41__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_41__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_41__prepared = NULL;

    // Tried code:
    tmp_assign_source_220 = PyTuple_New( 1 );
    tmp_tuple_element_83 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPResult );

    if (unlikely( tmp_tuple_element_83 == NULL ))
    {
        tmp_tuple_element_83 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPResult );
    }

    if ( tmp_tuple_element_83 == NULL )
    {
        Py_DECREF( tmp_assign_source_220 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52537 ], 32, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 262;
        goto try_except_handler_42;
    }

    Py_INCREF( tmp_tuple_element_83 );
    PyTuple_SET_ITEM( tmp_assign_source_220, 0, tmp_tuple_element_83 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_42__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_42__bases = tmp_assign_source_220;

    tmp_assign_source_221 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_42__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_42__class_decl_dict = tmp_assign_source_221;

    tmp_compare_left_83 = const_str_plain_metaclass;
    tmp_compare_right_83 = tmp_pyasn1_modules$rfc2251_class_creation_42__class_decl_dict;

    tmp_cmp_In_83 = PySequence_Contains( tmp_compare_right_83, tmp_compare_left_83 );
    if ( tmp_cmp_In_83 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 262;
        goto try_except_handler_42;
    }
    if ( tmp_cmp_In_83 == 1 )
    {
        goto condexpr_true_124;
    }
    else
    {
        goto condexpr_false_124;
    }
    condexpr_true_124:;
    tmp_dget_dict_42 = tmp_pyasn1_modules$rfc2251_class_creation_42__class_decl_dict;

    tmp_dget_key_42 = const_str_plain_metaclass;
    tmp_class_meta_42 = DICT_GET_ITEM( tmp_dget_dict_42, tmp_dget_key_42 );
    if ( tmp_class_meta_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 262;
        goto try_except_handler_42;
    }
    goto condexpr_end_124;
    condexpr_false_124:;
    tmp_cond_value_42 = tmp_pyasn1_modules$rfc2251_class_creation_42__bases;

    tmp_cond_truth_42 = CHECK_IF_TRUE( tmp_cond_value_42 );
    if ( tmp_cond_truth_42 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 262;
        goto try_except_handler_42;
    }
    if ( tmp_cond_truth_42 == 1 )
    {
        goto condexpr_true_125;
    }
    else
    {
        goto condexpr_false_125;
    }
    condexpr_true_125:;
    tmp_subscribed_name_42 = tmp_pyasn1_modules$rfc2251_class_creation_42__bases;

    tmp_subscript_name_42 = const_int_0;
    tmp_type_arg_42 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_42, tmp_subscript_name_42 );
    if ( tmp_type_arg_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 262;
        goto try_except_handler_42;
    }
    tmp_class_meta_42 = BUILTIN_TYPE1( tmp_type_arg_42 );
    Py_DECREF( tmp_type_arg_42 );
    if ( tmp_class_meta_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 262;
        goto try_except_handler_42;
    }
    goto condexpr_end_125;
    condexpr_false_125:;
    tmp_class_meta_42 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_42 != NULL );
    Py_INCREF( tmp_class_meta_42 );
    condexpr_end_125:;
    condexpr_end_124:;
    tmp_class_bases_42 = tmp_pyasn1_modules$rfc2251_class_creation_42__bases;

    tmp_assign_source_222 = SELECT_METACLASS( tmp_class_meta_42, tmp_class_bases_42 );
    if ( tmp_assign_source_222 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_42 );

        exception_lineno = 262;
        goto try_except_handler_42;
    }
    Py_DECREF( tmp_class_meta_42 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_42__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_42__metaclass = tmp_assign_source_222;

    tmp_compare_left_84 = const_str_plain_metaclass;
    tmp_compare_right_84 = tmp_pyasn1_modules$rfc2251_class_creation_42__class_decl_dict;

    tmp_cmp_In_84 = PySequence_Contains( tmp_compare_right_84, tmp_compare_left_84 );
    if ( tmp_cmp_In_84 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 262;
        goto try_except_handler_42;
    }
    if ( tmp_cmp_In_84 == 1 )
    {
        goto branch_yes_42;
    }
    else
    {
        goto branch_no_42;
    }
    branch_yes_42:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_42__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 262;
        goto try_except_handler_42;
    }
    branch_no_42:;
    tmp_hasattr_source_42 = tmp_pyasn1_modules$rfc2251_class_creation_42__metaclass;

    tmp_hasattr_attr_42 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_42, tmp_hasattr_attr_42 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 262;
        goto try_except_handler_42;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_126;
    }
    else
    {
        goto condexpr_false_126;
    }
    condexpr_true_126:;
    tmp_source_name_73 = tmp_pyasn1_modules$rfc2251_class_creation_42__metaclass;

    tmp_called_name_43 = LOOKUP_ATTRIBUTE( tmp_source_name_73, const_str_plain___prepare__ );
    if ( tmp_called_name_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 262;
        goto try_except_handler_42;
    }
    tmp_args_name_42 = PyTuple_New( 2 );
    tmp_tuple_element_84 = const_str_plain_ModifyDNResponse;
    Py_INCREF( tmp_tuple_element_84 );
    PyTuple_SET_ITEM( tmp_args_name_42, 0, tmp_tuple_element_84 );
    tmp_tuple_element_84 = tmp_pyasn1_modules$rfc2251_class_creation_42__bases;

    Py_INCREF( tmp_tuple_element_84 );
    PyTuple_SET_ITEM( tmp_args_name_42, 1, tmp_tuple_element_84 );
    tmp_kw_name_42 = tmp_pyasn1_modules$rfc2251_class_creation_42__class_decl_dict;

    frame_module->f_lineno = 262;
    tmp_assign_source_223 = CALL_FUNCTION( tmp_called_name_43, tmp_args_name_42, tmp_kw_name_42 );
    Py_DECREF( tmp_called_name_43 );
    Py_DECREF( tmp_args_name_42 );
    if ( tmp_assign_source_223 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 262;
        goto try_except_handler_42;
    }
    goto condexpr_end_126;
    condexpr_false_126:;
    tmp_assign_source_223 = PyDict_New();
    condexpr_end_126:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_42__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_42__prepared = tmp_assign_source_223;

    tmp_assign_source_224 = impl_class_42_ModifyDNResponse_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_42__bases, tmp_pyasn1_modules$rfc2251_class_creation_42__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_42__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_42__prepared );
    if ( tmp_assign_source_224 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 262;
        goto try_except_handler_42;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_ModifyDNResponse, tmp_assign_source_224 );
    goto try_end_42;
    // Exception handler code:
    try_except_handler_42:;
    exception_keeper_type_42 = exception_type;
    exception_keeper_value_42 = exception_value;
    exception_keeper_tb_42 = exception_tb;
    exception_keeper_lineno_42 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_42__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_42__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_42__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_42__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_42__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_42__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_42__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_42__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_42;
    exception_value = exception_keeper_value_42;
    exception_tb = exception_keeper_tb_42;
    exception_lineno = exception_keeper_lineno_42;

    goto frame_exception_exit_1;
    // End of try:
    try_end_42:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_42__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_42__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_42__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_42__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_42__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_42__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_42__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_42__prepared = NULL;

    // Tried code:
    tmp_assign_source_225 = PyTuple_New( 1 );
    tmp_source_name_74 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_74 == NULL ))
    {
        tmp_source_name_74 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_74 == NULL )
    {
        Py_DECREF( tmp_assign_source_225 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 267;
        goto try_except_handler_43;
    }

    tmp_tuple_element_85 = LOOKUP_ATTRIBUTE( tmp_source_name_74, const_str_plain_Sequence );
    if ( tmp_tuple_element_85 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_225 );

        exception_lineno = 267;
        goto try_except_handler_43;
    }
    PyTuple_SET_ITEM( tmp_assign_source_225, 0, tmp_tuple_element_85 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_43__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_43__bases = tmp_assign_source_225;

    tmp_assign_source_226 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_43__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_43__class_decl_dict = tmp_assign_source_226;

    tmp_compare_left_85 = const_str_plain_metaclass;
    tmp_compare_right_85 = tmp_pyasn1_modules$rfc2251_class_creation_43__class_decl_dict;

    tmp_cmp_In_85 = PySequence_Contains( tmp_compare_right_85, tmp_compare_left_85 );
    if ( tmp_cmp_In_85 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 267;
        goto try_except_handler_43;
    }
    if ( tmp_cmp_In_85 == 1 )
    {
        goto condexpr_true_127;
    }
    else
    {
        goto condexpr_false_127;
    }
    condexpr_true_127:;
    tmp_dget_dict_43 = tmp_pyasn1_modules$rfc2251_class_creation_43__class_decl_dict;

    tmp_dget_key_43 = const_str_plain_metaclass;
    tmp_class_meta_43 = DICT_GET_ITEM( tmp_dget_dict_43, tmp_dget_key_43 );
    if ( tmp_class_meta_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 267;
        goto try_except_handler_43;
    }
    goto condexpr_end_127;
    condexpr_false_127:;
    tmp_cond_value_43 = tmp_pyasn1_modules$rfc2251_class_creation_43__bases;

    tmp_cond_truth_43 = CHECK_IF_TRUE( tmp_cond_value_43 );
    if ( tmp_cond_truth_43 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 267;
        goto try_except_handler_43;
    }
    if ( tmp_cond_truth_43 == 1 )
    {
        goto condexpr_true_128;
    }
    else
    {
        goto condexpr_false_128;
    }
    condexpr_true_128:;
    tmp_subscribed_name_43 = tmp_pyasn1_modules$rfc2251_class_creation_43__bases;

    tmp_subscript_name_43 = const_int_0;
    tmp_type_arg_43 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_43, tmp_subscript_name_43 );
    if ( tmp_type_arg_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 267;
        goto try_except_handler_43;
    }
    tmp_class_meta_43 = BUILTIN_TYPE1( tmp_type_arg_43 );
    Py_DECREF( tmp_type_arg_43 );
    if ( tmp_class_meta_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 267;
        goto try_except_handler_43;
    }
    goto condexpr_end_128;
    condexpr_false_128:;
    tmp_class_meta_43 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_43 != NULL );
    Py_INCREF( tmp_class_meta_43 );
    condexpr_end_128:;
    condexpr_end_127:;
    tmp_class_bases_43 = tmp_pyasn1_modules$rfc2251_class_creation_43__bases;

    tmp_assign_source_227 = SELECT_METACLASS( tmp_class_meta_43, tmp_class_bases_43 );
    if ( tmp_assign_source_227 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_43 );

        exception_lineno = 267;
        goto try_except_handler_43;
    }
    Py_DECREF( tmp_class_meta_43 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_43__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_43__metaclass = tmp_assign_source_227;

    tmp_compare_left_86 = const_str_plain_metaclass;
    tmp_compare_right_86 = tmp_pyasn1_modules$rfc2251_class_creation_43__class_decl_dict;

    tmp_cmp_In_86 = PySequence_Contains( tmp_compare_right_86, tmp_compare_left_86 );
    if ( tmp_cmp_In_86 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 267;
        goto try_except_handler_43;
    }
    if ( tmp_cmp_In_86 == 1 )
    {
        goto branch_yes_43;
    }
    else
    {
        goto branch_no_43;
    }
    branch_yes_43:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_43__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 267;
        goto try_except_handler_43;
    }
    branch_no_43:;
    tmp_hasattr_source_43 = tmp_pyasn1_modules$rfc2251_class_creation_43__metaclass;

    tmp_hasattr_attr_43 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_43, tmp_hasattr_attr_43 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 267;
        goto try_except_handler_43;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_129;
    }
    else
    {
        goto condexpr_false_129;
    }
    condexpr_true_129:;
    tmp_source_name_75 = tmp_pyasn1_modules$rfc2251_class_creation_43__metaclass;

    tmp_called_name_44 = LOOKUP_ATTRIBUTE( tmp_source_name_75, const_str_plain___prepare__ );
    if ( tmp_called_name_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 267;
        goto try_except_handler_43;
    }
    tmp_args_name_43 = PyTuple_New( 2 );
    tmp_tuple_element_86 = const_str_plain_CompareRequest;
    Py_INCREF( tmp_tuple_element_86 );
    PyTuple_SET_ITEM( tmp_args_name_43, 0, tmp_tuple_element_86 );
    tmp_tuple_element_86 = tmp_pyasn1_modules$rfc2251_class_creation_43__bases;

    Py_INCREF( tmp_tuple_element_86 );
    PyTuple_SET_ITEM( tmp_args_name_43, 1, tmp_tuple_element_86 );
    tmp_kw_name_43 = tmp_pyasn1_modules$rfc2251_class_creation_43__class_decl_dict;

    frame_module->f_lineno = 267;
    tmp_assign_source_228 = CALL_FUNCTION( tmp_called_name_44, tmp_args_name_43, tmp_kw_name_43 );
    Py_DECREF( tmp_called_name_44 );
    Py_DECREF( tmp_args_name_43 );
    if ( tmp_assign_source_228 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 267;
        goto try_except_handler_43;
    }
    goto condexpr_end_129;
    condexpr_false_129:;
    tmp_assign_source_228 = PyDict_New();
    condexpr_end_129:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_43__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_43__prepared = tmp_assign_source_228;

    tmp_assign_source_229 = impl_class_43_CompareRequest_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_43__bases, tmp_pyasn1_modules$rfc2251_class_creation_43__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_43__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_43__prepared );
    if ( tmp_assign_source_229 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 267;
        goto try_except_handler_43;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_CompareRequest, tmp_assign_source_229 );
    goto try_end_43;
    // Exception handler code:
    try_except_handler_43:;
    exception_keeper_type_43 = exception_type;
    exception_keeper_value_43 = exception_value;
    exception_keeper_tb_43 = exception_tb;
    exception_keeper_lineno_43 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_43__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_43__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_43__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_43__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_43__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_43__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_43__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_43__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_43;
    exception_value = exception_keeper_value_43;
    exception_tb = exception_keeper_tb_43;
    exception_lineno = exception_keeper_lineno_43;

    goto frame_exception_exit_1;
    // End of try:
    try_end_43:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_43__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_43__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_43__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_43__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_43__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_43__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_43__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_43__prepared = NULL;

    // Tried code:
    tmp_assign_source_230 = PyTuple_New( 1 );
    tmp_tuple_element_87 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPResult );

    if (unlikely( tmp_tuple_element_87 == NULL ))
    {
        tmp_tuple_element_87 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPResult );
    }

    if ( tmp_tuple_element_87 == NULL )
    {
        Py_DECREF( tmp_assign_source_230 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52537 ], 32, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 276;
        goto try_except_handler_44;
    }

    Py_INCREF( tmp_tuple_element_87 );
    PyTuple_SET_ITEM( tmp_assign_source_230, 0, tmp_tuple_element_87 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_44__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_44__bases = tmp_assign_source_230;

    tmp_assign_source_231 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_44__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_44__class_decl_dict = tmp_assign_source_231;

    tmp_compare_left_87 = const_str_plain_metaclass;
    tmp_compare_right_87 = tmp_pyasn1_modules$rfc2251_class_creation_44__class_decl_dict;

    tmp_cmp_In_87 = PySequence_Contains( tmp_compare_right_87, tmp_compare_left_87 );
    if ( tmp_cmp_In_87 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 276;
        goto try_except_handler_44;
    }
    if ( tmp_cmp_In_87 == 1 )
    {
        goto condexpr_true_130;
    }
    else
    {
        goto condexpr_false_130;
    }
    condexpr_true_130:;
    tmp_dget_dict_44 = tmp_pyasn1_modules$rfc2251_class_creation_44__class_decl_dict;

    tmp_dget_key_44 = const_str_plain_metaclass;
    tmp_class_meta_44 = DICT_GET_ITEM( tmp_dget_dict_44, tmp_dget_key_44 );
    if ( tmp_class_meta_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 276;
        goto try_except_handler_44;
    }
    goto condexpr_end_130;
    condexpr_false_130:;
    tmp_cond_value_44 = tmp_pyasn1_modules$rfc2251_class_creation_44__bases;

    tmp_cond_truth_44 = CHECK_IF_TRUE( tmp_cond_value_44 );
    if ( tmp_cond_truth_44 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 276;
        goto try_except_handler_44;
    }
    if ( tmp_cond_truth_44 == 1 )
    {
        goto condexpr_true_131;
    }
    else
    {
        goto condexpr_false_131;
    }
    condexpr_true_131:;
    tmp_subscribed_name_44 = tmp_pyasn1_modules$rfc2251_class_creation_44__bases;

    tmp_subscript_name_44 = const_int_0;
    tmp_type_arg_44 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_44, tmp_subscript_name_44 );
    if ( tmp_type_arg_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 276;
        goto try_except_handler_44;
    }
    tmp_class_meta_44 = BUILTIN_TYPE1( tmp_type_arg_44 );
    Py_DECREF( tmp_type_arg_44 );
    if ( tmp_class_meta_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 276;
        goto try_except_handler_44;
    }
    goto condexpr_end_131;
    condexpr_false_131:;
    tmp_class_meta_44 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_44 != NULL );
    Py_INCREF( tmp_class_meta_44 );
    condexpr_end_131:;
    condexpr_end_130:;
    tmp_class_bases_44 = tmp_pyasn1_modules$rfc2251_class_creation_44__bases;

    tmp_assign_source_232 = SELECT_METACLASS( tmp_class_meta_44, tmp_class_bases_44 );
    if ( tmp_assign_source_232 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_44 );

        exception_lineno = 276;
        goto try_except_handler_44;
    }
    Py_DECREF( tmp_class_meta_44 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_44__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_44__metaclass = tmp_assign_source_232;

    tmp_compare_left_88 = const_str_plain_metaclass;
    tmp_compare_right_88 = tmp_pyasn1_modules$rfc2251_class_creation_44__class_decl_dict;

    tmp_cmp_In_88 = PySequence_Contains( tmp_compare_right_88, tmp_compare_left_88 );
    if ( tmp_cmp_In_88 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 276;
        goto try_except_handler_44;
    }
    if ( tmp_cmp_In_88 == 1 )
    {
        goto branch_yes_44;
    }
    else
    {
        goto branch_no_44;
    }
    branch_yes_44:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_44__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 276;
        goto try_except_handler_44;
    }
    branch_no_44:;
    tmp_hasattr_source_44 = tmp_pyasn1_modules$rfc2251_class_creation_44__metaclass;

    tmp_hasattr_attr_44 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_44, tmp_hasattr_attr_44 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 276;
        goto try_except_handler_44;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_132;
    }
    else
    {
        goto condexpr_false_132;
    }
    condexpr_true_132:;
    tmp_source_name_76 = tmp_pyasn1_modules$rfc2251_class_creation_44__metaclass;

    tmp_called_name_45 = LOOKUP_ATTRIBUTE( tmp_source_name_76, const_str_plain___prepare__ );
    if ( tmp_called_name_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 276;
        goto try_except_handler_44;
    }
    tmp_args_name_44 = PyTuple_New( 2 );
    tmp_tuple_element_88 = const_str_plain_CompareResponse;
    Py_INCREF( tmp_tuple_element_88 );
    PyTuple_SET_ITEM( tmp_args_name_44, 0, tmp_tuple_element_88 );
    tmp_tuple_element_88 = tmp_pyasn1_modules$rfc2251_class_creation_44__bases;

    Py_INCREF( tmp_tuple_element_88 );
    PyTuple_SET_ITEM( tmp_args_name_44, 1, tmp_tuple_element_88 );
    tmp_kw_name_44 = tmp_pyasn1_modules$rfc2251_class_creation_44__class_decl_dict;

    frame_module->f_lineno = 276;
    tmp_assign_source_233 = CALL_FUNCTION( tmp_called_name_45, tmp_args_name_44, tmp_kw_name_44 );
    Py_DECREF( tmp_called_name_45 );
    Py_DECREF( tmp_args_name_44 );
    if ( tmp_assign_source_233 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 276;
        goto try_except_handler_44;
    }
    goto condexpr_end_132;
    condexpr_false_132:;
    tmp_assign_source_233 = PyDict_New();
    condexpr_end_132:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_44__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_44__prepared = tmp_assign_source_233;

    tmp_assign_source_234 = impl_class_44_CompareResponse_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_44__bases, tmp_pyasn1_modules$rfc2251_class_creation_44__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_44__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_44__prepared );
    if ( tmp_assign_source_234 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 276;
        goto try_except_handler_44;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_CompareResponse, tmp_assign_source_234 );
    goto try_end_44;
    // Exception handler code:
    try_except_handler_44:;
    exception_keeper_type_44 = exception_type;
    exception_keeper_value_44 = exception_value;
    exception_keeper_tb_44 = exception_tb;
    exception_keeper_lineno_44 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_44__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_44__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_44__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_44__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_44__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_44__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_44__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_44__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_44;
    exception_value = exception_keeper_value_44;
    exception_tb = exception_keeper_tb_44;
    exception_lineno = exception_keeper_lineno_44;

    goto frame_exception_exit_1;
    // End of try:
    try_end_44:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_44__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_44__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_44__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_44__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_44__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_44__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_44__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_44__prepared = NULL;

    // Tried code:
    tmp_assign_source_235 = PyTuple_New( 1 );
    tmp_tuple_element_89 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPResult );

    if (unlikely( tmp_tuple_element_89 == NULL ))
    {
        tmp_tuple_element_89 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LDAPResult );
    }

    if ( tmp_tuple_element_89 == NULL )
    {
        Py_DECREF( tmp_assign_source_235 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52537 ], 32, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 281;
        goto try_except_handler_45;
    }

    Py_INCREF( tmp_tuple_element_89 );
    PyTuple_SET_ITEM( tmp_assign_source_235, 0, tmp_tuple_element_89 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_45__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_45__bases = tmp_assign_source_235;

    tmp_assign_source_236 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_45__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_45__class_decl_dict = tmp_assign_source_236;

    tmp_compare_left_89 = const_str_plain_metaclass;
    tmp_compare_right_89 = tmp_pyasn1_modules$rfc2251_class_creation_45__class_decl_dict;

    tmp_cmp_In_89 = PySequence_Contains( tmp_compare_right_89, tmp_compare_left_89 );
    if ( tmp_cmp_In_89 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 281;
        goto try_except_handler_45;
    }
    if ( tmp_cmp_In_89 == 1 )
    {
        goto condexpr_true_133;
    }
    else
    {
        goto condexpr_false_133;
    }
    condexpr_true_133:;
    tmp_dget_dict_45 = tmp_pyasn1_modules$rfc2251_class_creation_45__class_decl_dict;

    tmp_dget_key_45 = const_str_plain_metaclass;
    tmp_class_meta_45 = DICT_GET_ITEM( tmp_dget_dict_45, tmp_dget_key_45 );
    if ( tmp_class_meta_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 281;
        goto try_except_handler_45;
    }
    goto condexpr_end_133;
    condexpr_false_133:;
    tmp_cond_value_45 = tmp_pyasn1_modules$rfc2251_class_creation_45__bases;

    tmp_cond_truth_45 = CHECK_IF_TRUE( tmp_cond_value_45 );
    if ( tmp_cond_truth_45 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 281;
        goto try_except_handler_45;
    }
    if ( tmp_cond_truth_45 == 1 )
    {
        goto condexpr_true_134;
    }
    else
    {
        goto condexpr_false_134;
    }
    condexpr_true_134:;
    tmp_subscribed_name_45 = tmp_pyasn1_modules$rfc2251_class_creation_45__bases;

    tmp_subscript_name_45 = const_int_0;
    tmp_type_arg_45 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_45, tmp_subscript_name_45 );
    if ( tmp_type_arg_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 281;
        goto try_except_handler_45;
    }
    tmp_class_meta_45 = BUILTIN_TYPE1( tmp_type_arg_45 );
    Py_DECREF( tmp_type_arg_45 );
    if ( tmp_class_meta_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 281;
        goto try_except_handler_45;
    }
    goto condexpr_end_134;
    condexpr_false_134:;
    tmp_class_meta_45 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_45 != NULL );
    Py_INCREF( tmp_class_meta_45 );
    condexpr_end_134:;
    condexpr_end_133:;
    tmp_class_bases_45 = tmp_pyasn1_modules$rfc2251_class_creation_45__bases;

    tmp_assign_source_237 = SELECT_METACLASS( tmp_class_meta_45, tmp_class_bases_45 );
    if ( tmp_assign_source_237 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_45 );

        exception_lineno = 281;
        goto try_except_handler_45;
    }
    Py_DECREF( tmp_class_meta_45 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_45__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_45__metaclass = tmp_assign_source_237;

    tmp_compare_left_90 = const_str_plain_metaclass;
    tmp_compare_right_90 = tmp_pyasn1_modules$rfc2251_class_creation_45__class_decl_dict;

    tmp_cmp_In_90 = PySequence_Contains( tmp_compare_right_90, tmp_compare_left_90 );
    if ( tmp_cmp_In_90 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 281;
        goto try_except_handler_45;
    }
    if ( tmp_cmp_In_90 == 1 )
    {
        goto branch_yes_45;
    }
    else
    {
        goto branch_no_45;
    }
    branch_yes_45:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_45__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 281;
        goto try_except_handler_45;
    }
    branch_no_45:;
    tmp_hasattr_source_45 = tmp_pyasn1_modules$rfc2251_class_creation_45__metaclass;

    tmp_hasattr_attr_45 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_45, tmp_hasattr_attr_45 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 281;
        goto try_except_handler_45;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_135;
    }
    else
    {
        goto condexpr_false_135;
    }
    condexpr_true_135:;
    tmp_source_name_77 = tmp_pyasn1_modules$rfc2251_class_creation_45__metaclass;

    tmp_called_name_46 = LOOKUP_ATTRIBUTE( tmp_source_name_77, const_str_plain___prepare__ );
    if ( tmp_called_name_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 281;
        goto try_except_handler_45;
    }
    tmp_args_name_45 = PyTuple_New( 2 );
    tmp_tuple_element_90 = const_str_plain_AbandonRequest;
    Py_INCREF( tmp_tuple_element_90 );
    PyTuple_SET_ITEM( tmp_args_name_45, 0, tmp_tuple_element_90 );
    tmp_tuple_element_90 = tmp_pyasn1_modules$rfc2251_class_creation_45__bases;

    Py_INCREF( tmp_tuple_element_90 );
    PyTuple_SET_ITEM( tmp_args_name_45, 1, tmp_tuple_element_90 );
    tmp_kw_name_45 = tmp_pyasn1_modules$rfc2251_class_creation_45__class_decl_dict;

    frame_module->f_lineno = 281;
    tmp_assign_source_238 = CALL_FUNCTION( tmp_called_name_46, tmp_args_name_45, tmp_kw_name_45 );
    Py_DECREF( tmp_called_name_46 );
    Py_DECREF( tmp_args_name_45 );
    if ( tmp_assign_source_238 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 281;
        goto try_except_handler_45;
    }
    goto condexpr_end_135;
    condexpr_false_135:;
    tmp_assign_source_238 = PyDict_New();
    condexpr_end_135:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_45__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_45__prepared = tmp_assign_source_238;

    tmp_assign_source_239 = impl_class_45_AbandonRequest_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_45__bases, tmp_pyasn1_modules$rfc2251_class_creation_45__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_45__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_45__prepared );
    if ( tmp_assign_source_239 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 281;
        goto try_except_handler_45;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_AbandonRequest, tmp_assign_source_239 );
    goto try_end_45;
    // Exception handler code:
    try_except_handler_45:;
    exception_keeper_type_45 = exception_type;
    exception_keeper_value_45 = exception_value;
    exception_keeper_tb_45 = exception_tb;
    exception_keeper_lineno_45 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_45__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_45__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_45__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_45__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_45__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_45__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_45__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_45__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_45;
    exception_value = exception_keeper_value_45;
    exception_tb = exception_keeper_tb_45;
    exception_lineno = exception_keeper_lineno_45;

    goto frame_exception_exit_1;
    // End of try:
    try_end_45:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_45__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_45__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_45__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_45__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_45__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_45__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_45__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_45__prepared = NULL;

    // Tried code:
    tmp_assign_source_240 = PyTuple_New( 1 );
    tmp_source_name_78 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_78 == NULL ))
    {
        tmp_source_name_78 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_78 == NULL )
    {
        Py_DECREF( tmp_assign_source_240 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 286;
        goto try_except_handler_46;
    }

    tmp_tuple_element_91 = LOOKUP_ATTRIBUTE( tmp_source_name_78, const_str_plain_Sequence );
    if ( tmp_tuple_element_91 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_240 );

        exception_lineno = 286;
        goto try_except_handler_46;
    }
    PyTuple_SET_ITEM( tmp_assign_source_240, 0, tmp_tuple_element_91 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_46__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_46__bases = tmp_assign_source_240;

    tmp_assign_source_241 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_46__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_46__class_decl_dict = tmp_assign_source_241;

    tmp_compare_left_91 = const_str_plain_metaclass;
    tmp_compare_right_91 = tmp_pyasn1_modules$rfc2251_class_creation_46__class_decl_dict;

    tmp_cmp_In_91 = PySequence_Contains( tmp_compare_right_91, tmp_compare_left_91 );
    if ( tmp_cmp_In_91 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 286;
        goto try_except_handler_46;
    }
    if ( tmp_cmp_In_91 == 1 )
    {
        goto condexpr_true_136;
    }
    else
    {
        goto condexpr_false_136;
    }
    condexpr_true_136:;
    tmp_dget_dict_46 = tmp_pyasn1_modules$rfc2251_class_creation_46__class_decl_dict;

    tmp_dget_key_46 = const_str_plain_metaclass;
    tmp_class_meta_46 = DICT_GET_ITEM( tmp_dget_dict_46, tmp_dget_key_46 );
    if ( tmp_class_meta_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 286;
        goto try_except_handler_46;
    }
    goto condexpr_end_136;
    condexpr_false_136:;
    tmp_cond_value_46 = tmp_pyasn1_modules$rfc2251_class_creation_46__bases;

    tmp_cond_truth_46 = CHECK_IF_TRUE( tmp_cond_value_46 );
    if ( tmp_cond_truth_46 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 286;
        goto try_except_handler_46;
    }
    if ( tmp_cond_truth_46 == 1 )
    {
        goto condexpr_true_137;
    }
    else
    {
        goto condexpr_false_137;
    }
    condexpr_true_137:;
    tmp_subscribed_name_46 = tmp_pyasn1_modules$rfc2251_class_creation_46__bases;

    tmp_subscript_name_46 = const_int_0;
    tmp_type_arg_46 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_46, tmp_subscript_name_46 );
    if ( tmp_type_arg_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 286;
        goto try_except_handler_46;
    }
    tmp_class_meta_46 = BUILTIN_TYPE1( tmp_type_arg_46 );
    Py_DECREF( tmp_type_arg_46 );
    if ( tmp_class_meta_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 286;
        goto try_except_handler_46;
    }
    goto condexpr_end_137;
    condexpr_false_137:;
    tmp_class_meta_46 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_46 != NULL );
    Py_INCREF( tmp_class_meta_46 );
    condexpr_end_137:;
    condexpr_end_136:;
    tmp_class_bases_46 = tmp_pyasn1_modules$rfc2251_class_creation_46__bases;

    tmp_assign_source_242 = SELECT_METACLASS( tmp_class_meta_46, tmp_class_bases_46 );
    if ( tmp_assign_source_242 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_46 );

        exception_lineno = 286;
        goto try_except_handler_46;
    }
    Py_DECREF( tmp_class_meta_46 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_46__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_46__metaclass = tmp_assign_source_242;

    tmp_compare_left_92 = const_str_plain_metaclass;
    tmp_compare_right_92 = tmp_pyasn1_modules$rfc2251_class_creation_46__class_decl_dict;

    tmp_cmp_In_92 = PySequence_Contains( tmp_compare_right_92, tmp_compare_left_92 );
    if ( tmp_cmp_In_92 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 286;
        goto try_except_handler_46;
    }
    if ( tmp_cmp_In_92 == 1 )
    {
        goto branch_yes_46;
    }
    else
    {
        goto branch_no_46;
    }
    branch_yes_46:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_46__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 286;
        goto try_except_handler_46;
    }
    branch_no_46:;
    tmp_hasattr_source_46 = tmp_pyasn1_modules$rfc2251_class_creation_46__metaclass;

    tmp_hasattr_attr_46 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_46, tmp_hasattr_attr_46 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 286;
        goto try_except_handler_46;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_138;
    }
    else
    {
        goto condexpr_false_138;
    }
    condexpr_true_138:;
    tmp_source_name_79 = tmp_pyasn1_modules$rfc2251_class_creation_46__metaclass;

    tmp_called_name_47 = LOOKUP_ATTRIBUTE( tmp_source_name_79, const_str_plain___prepare__ );
    if ( tmp_called_name_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 286;
        goto try_except_handler_46;
    }
    tmp_args_name_46 = PyTuple_New( 2 );
    tmp_tuple_element_92 = const_str_plain_ExtendedRequest;
    Py_INCREF( tmp_tuple_element_92 );
    PyTuple_SET_ITEM( tmp_args_name_46, 0, tmp_tuple_element_92 );
    tmp_tuple_element_92 = tmp_pyasn1_modules$rfc2251_class_creation_46__bases;

    Py_INCREF( tmp_tuple_element_92 );
    PyTuple_SET_ITEM( tmp_args_name_46, 1, tmp_tuple_element_92 );
    tmp_kw_name_46 = tmp_pyasn1_modules$rfc2251_class_creation_46__class_decl_dict;

    frame_module->f_lineno = 286;
    tmp_assign_source_243 = CALL_FUNCTION( tmp_called_name_47, tmp_args_name_46, tmp_kw_name_46 );
    Py_DECREF( tmp_called_name_47 );
    Py_DECREF( tmp_args_name_46 );
    if ( tmp_assign_source_243 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 286;
        goto try_except_handler_46;
    }
    goto condexpr_end_138;
    condexpr_false_138:;
    tmp_assign_source_243 = PyDict_New();
    condexpr_end_138:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_46__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_46__prepared = tmp_assign_source_243;

    tmp_assign_source_244 = impl_class_46_ExtendedRequest_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_46__bases, tmp_pyasn1_modules$rfc2251_class_creation_46__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_46__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_46__prepared );
    if ( tmp_assign_source_244 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 286;
        goto try_except_handler_46;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_ExtendedRequest, tmp_assign_source_244 );
    goto try_end_46;
    // Exception handler code:
    try_except_handler_46:;
    exception_keeper_type_46 = exception_type;
    exception_keeper_value_46 = exception_value;
    exception_keeper_tb_46 = exception_tb;
    exception_keeper_lineno_46 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_46__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_46__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_46__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_46__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_46__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_46__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_46__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_46__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_46;
    exception_value = exception_keeper_value_46;
    exception_tb = exception_keeper_tb_46;
    exception_lineno = exception_keeper_lineno_46;

    goto frame_exception_exit_1;
    // End of try:
    try_end_46:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_46__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_46__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_46__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_46__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_46__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_46__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_46__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_46__prepared = NULL;

    // Tried code:
    tmp_assign_source_245 = PyTuple_New( 1 );
    tmp_source_name_80 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_80 == NULL ))
    {
        tmp_source_name_80 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_80 == NULL )
    {
        Py_DECREF( tmp_assign_source_245 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 295;
        goto try_except_handler_47;
    }

    tmp_tuple_element_93 = LOOKUP_ATTRIBUTE( tmp_source_name_80, const_str_plain_Sequence );
    if ( tmp_tuple_element_93 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_245 );

        exception_lineno = 295;
        goto try_except_handler_47;
    }
    PyTuple_SET_ITEM( tmp_assign_source_245, 0, tmp_tuple_element_93 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_47__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_47__bases = tmp_assign_source_245;

    tmp_assign_source_246 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_47__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_47__class_decl_dict = tmp_assign_source_246;

    tmp_compare_left_93 = const_str_plain_metaclass;
    tmp_compare_right_93 = tmp_pyasn1_modules$rfc2251_class_creation_47__class_decl_dict;

    tmp_cmp_In_93 = PySequence_Contains( tmp_compare_right_93, tmp_compare_left_93 );
    if ( tmp_cmp_In_93 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 295;
        goto try_except_handler_47;
    }
    if ( tmp_cmp_In_93 == 1 )
    {
        goto condexpr_true_139;
    }
    else
    {
        goto condexpr_false_139;
    }
    condexpr_true_139:;
    tmp_dget_dict_47 = tmp_pyasn1_modules$rfc2251_class_creation_47__class_decl_dict;

    tmp_dget_key_47 = const_str_plain_metaclass;
    tmp_class_meta_47 = DICT_GET_ITEM( tmp_dget_dict_47, tmp_dget_key_47 );
    if ( tmp_class_meta_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 295;
        goto try_except_handler_47;
    }
    goto condexpr_end_139;
    condexpr_false_139:;
    tmp_cond_value_47 = tmp_pyasn1_modules$rfc2251_class_creation_47__bases;

    tmp_cond_truth_47 = CHECK_IF_TRUE( tmp_cond_value_47 );
    if ( tmp_cond_truth_47 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 295;
        goto try_except_handler_47;
    }
    if ( tmp_cond_truth_47 == 1 )
    {
        goto condexpr_true_140;
    }
    else
    {
        goto condexpr_false_140;
    }
    condexpr_true_140:;
    tmp_subscribed_name_47 = tmp_pyasn1_modules$rfc2251_class_creation_47__bases;

    tmp_subscript_name_47 = const_int_0;
    tmp_type_arg_47 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_47, tmp_subscript_name_47 );
    if ( tmp_type_arg_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 295;
        goto try_except_handler_47;
    }
    tmp_class_meta_47 = BUILTIN_TYPE1( tmp_type_arg_47 );
    Py_DECREF( tmp_type_arg_47 );
    if ( tmp_class_meta_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 295;
        goto try_except_handler_47;
    }
    goto condexpr_end_140;
    condexpr_false_140:;
    tmp_class_meta_47 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_47 != NULL );
    Py_INCREF( tmp_class_meta_47 );
    condexpr_end_140:;
    condexpr_end_139:;
    tmp_class_bases_47 = tmp_pyasn1_modules$rfc2251_class_creation_47__bases;

    tmp_assign_source_247 = SELECT_METACLASS( tmp_class_meta_47, tmp_class_bases_47 );
    if ( tmp_assign_source_247 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_47 );

        exception_lineno = 295;
        goto try_except_handler_47;
    }
    Py_DECREF( tmp_class_meta_47 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_47__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_47__metaclass = tmp_assign_source_247;

    tmp_compare_left_94 = const_str_plain_metaclass;
    tmp_compare_right_94 = tmp_pyasn1_modules$rfc2251_class_creation_47__class_decl_dict;

    tmp_cmp_In_94 = PySequence_Contains( tmp_compare_right_94, tmp_compare_left_94 );
    if ( tmp_cmp_In_94 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 295;
        goto try_except_handler_47;
    }
    if ( tmp_cmp_In_94 == 1 )
    {
        goto branch_yes_47;
    }
    else
    {
        goto branch_no_47;
    }
    branch_yes_47:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_47__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 295;
        goto try_except_handler_47;
    }
    branch_no_47:;
    tmp_hasattr_source_47 = tmp_pyasn1_modules$rfc2251_class_creation_47__metaclass;

    tmp_hasattr_attr_47 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_47, tmp_hasattr_attr_47 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 295;
        goto try_except_handler_47;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_141;
    }
    else
    {
        goto condexpr_false_141;
    }
    condexpr_true_141:;
    tmp_source_name_81 = tmp_pyasn1_modules$rfc2251_class_creation_47__metaclass;

    tmp_called_name_48 = LOOKUP_ATTRIBUTE( tmp_source_name_81, const_str_plain___prepare__ );
    if ( tmp_called_name_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 295;
        goto try_except_handler_47;
    }
    tmp_args_name_47 = PyTuple_New( 2 );
    tmp_tuple_element_94 = const_str_plain_ExtendedResponse;
    Py_INCREF( tmp_tuple_element_94 );
    PyTuple_SET_ITEM( tmp_args_name_47, 0, tmp_tuple_element_94 );
    tmp_tuple_element_94 = tmp_pyasn1_modules$rfc2251_class_creation_47__bases;

    Py_INCREF( tmp_tuple_element_94 );
    PyTuple_SET_ITEM( tmp_args_name_47, 1, tmp_tuple_element_94 );
    tmp_kw_name_47 = tmp_pyasn1_modules$rfc2251_class_creation_47__class_decl_dict;

    frame_module->f_lineno = 295;
    tmp_assign_source_248 = CALL_FUNCTION( tmp_called_name_48, tmp_args_name_47, tmp_kw_name_47 );
    Py_DECREF( tmp_called_name_48 );
    Py_DECREF( tmp_args_name_47 );
    if ( tmp_assign_source_248 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 295;
        goto try_except_handler_47;
    }
    goto condexpr_end_141;
    condexpr_false_141:;
    tmp_assign_source_248 = PyDict_New();
    condexpr_end_141:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_47__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_47__prepared = tmp_assign_source_248;

    tmp_assign_source_249 = impl_class_47_ExtendedResponse_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_47__bases, tmp_pyasn1_modules$rfc2251_class_creation_47__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_47__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_47__prepared );
    if ( tmp_assign_source_249 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 295;
        goto try_except_handler_47;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_ExtendedResponse, tmp_assign_source_249 );
    goto try_end_47;
    // Exception handler code:
    try_except_handler_47:;
    exception_keeper_type_47 = exception_type;
    exception_keeper_value_47 = exception_value;
    exception_keeper_tb_47 = exception_tb;
    exception_keeper_lineno_47 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_47__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_47__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_47__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_47__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_47__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_47__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_47__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_47__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_47;
    exception_value = exception_keeper_value_47;
    exception_tb = exception_keeper_tb_47;
    exception_lineno = exception_keeper_lineno_47;

    goto frame_exception_exit_1;
    // End of try:
    try_end_47:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_47__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_47__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_47__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_47__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_47__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_47__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_47__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_47__prepared = NULL;

    // Tried code:
    tmp_assign_source_250 = PyTuple_New( 1 );
    tmp_source_name_82 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_82 == NULL ))
    {
        tmp_source_name_82 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_82 == NULL )
    {
        Py_DECREF( tmp_assign_source_250 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 309;
        goto try_except_handler_48;
    }

    tmp_tuple_element_95 = LOOKUP_ATTRIBUTE( tmp_source_name_82, const_str_plain_Integer );
    if ( tmp_tuple_element_95 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_250 );

        exception_lineno = 309;
        goto try_except_handler_48;
    }
    PyTuple_SET_ITEM( tmp_assign_source_250, 0, tmp_tuple_element_95 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_48__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_48__bases = tmp_assign_source_250;

    tmp_assign_source_251 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_48__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_48__class_decl_dict = tmp_assign_source_251;

    tmp_compare_left_95 = const_str_plain_metaclass;
    tmp_compare_right_95 = tmp_pyasn1_modules$rfc2251_class_creation_48__class_decl_dict;

    tmp_cmp_In_95 = PySequence_Contains( tmp_compare_right_95, tmp_compare_left_95 );
    if ( tmp_cmp_In_95 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 309;
        goto try_except_handler_48;
    }
    if ( tmp_cmp_In_95 == 1 )
    {
        goto condexpr_true_142;
    }
    else
    {
        goto condexpr_false_142;
    }
    condexpr_true_142:;
    tmp_dget_dict_48 = tmp_pyasn1_modules$rfc2251_class_creation_48__class_decl_dict;

    tmp_dget_key_48 = const_str_plain_metaclass;
    tmp_class_meta_48 = DICT_GET_ITEM( tmp_dget_dict_48, tmp_dget_key_48 );
    if ( tmp_class_meta_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 309;
        goto try_except_handler_48;
    }
    goto condexpr_end_142;
    condexpr_false_142:;
    tmp_cond_value_48 = tmp_pyasn1_modules$rfc2251_class_creation_48__bases;

    tmp_cond_truth_48 = CHECK_IF_TRUE( tmp_cond_value_48 );
    if ( tmp_cond_truth_48 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 309;
        goto try_except_handler_48;
    }
    if ( tmp_cond_truth_48 == 1 )
    {
        goto condexpr_true_143;
    }
    else
    {
        goto condexpr_false_143;
    }
    condexpr_true_143:;
    tmp_subscribed_name_48 = tmp_pyasn1_modules$rfc2251_class_creation_48__bases;

    tmp_subscript_name_48 = const_int_0;
    tmp_type_arg_48 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_48, tmp_subscript_name_48 );
    if ( tmp_type_arg_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 309;
        goto try_except_handler_48;
    }
    tmp_class_meta_48 = BUILTIN_TYPE1( tmp_type_arg_48 );
    Py_DECREF( tmp_type_arg_48 );
    if ( tmp_class_meta_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 309;
        goto try_except_handler_48;
    }
    goto condexpr_end_143;
    condexpr_false_143:;
    tmp_class_meta_48 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_48 != NULL );
    Py_INCREF( tmp_class_meta_48 );
    condexpr_end_143:;
    condexpr_end_142:;
    tmp_class_bases_48 = tmp_pyasn1_modules$rfc2251_class_creation_48__bases;

    tmp_assign_source_252 = SELECT_METACLASS( tmp_class_meta_48, tmp_class_bases_48 );
    if ( tmp_assign_source_252 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_48 );

        exception_lineno = 309;
        goto try_except_handler_48;
    }
    Py_DECREF( tmp_class_meta_48 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_48__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_48__metaclass = tmp_assign_source_252;

    tmp_compare_left_96 = const_str_plain_metaclass;
    tmp_compare_right_96 = tmp_pyasn1_modules$rfc2251_class_creation_48__class_decl_dict;

    tmp_cmp_In_96 = PySequence_Contains( tmp_compare_right_96, tmp_compare_left_96 );
    if ( tmp_cmp_In_96 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 309;
        goto try_except_handler_48;
    }
    if ( tmp_cmp_In_96 == 1 )
    {
        goto branch_yes_48;
    }
    else
    {
        goto branch_no_48;
    }
    branch_yes_48:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_48__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 309;
        goto try_except_handler_48;
    }
    branch_no_48:;
    tmp_hasattr_source_48 = tmp_pyasn1_modules$rfc2251_class_creation_48__metaclass;

    tmp_hasattr_attr_48 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_48, tmp_hasattr_attr_48 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 309;
        goto try_except_handler_48;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_144;
    }
    else
    {
        goto condexpr_false_144;
    }
    condexpr_true_144:;
    tmp_source_name_83 = tmp_pyasn1_modules$rfc2251_class_creation_48__metaclass;

    tmp_called_name_49 = LOOKUP_ATTRIBUTE( tmp_source_name_83, const_str_plain___prepare__ );
    if ( tmp_called_name_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 309;
        goto try_except_handler_48;
    }
    tmp_args_name_48 = PyTuple_New( 2 );
    tmp_tuple_element_96 = const_str_plain_MessageID;
    Py_INCREF( tmp_tuple_element_96 );
    PyTuple_SET_ITEM( tmp_args_name_48, 0, tmp_tuple_element_96 );
    tmp_tuple_element_96 = tmp_pyasn1_modules$rfc2251_class_creation_48__bases;

    Py_INCREF( tmp_tuple_element_96 );
    PyTuple_SET_ITEM( tmp_args_name_48, 1, tmp_tuple_element_96 );
    tmp_kw_name_48 = tmp_pyasn1_modules$rfc2251_class_creation_48__class_decl_dict;

    frame_module->f_lineno = 309;
    tmp_assign_source_253 = CALL_FUNCTION( tmp_called_name_49, tmp_args_name_48, tmp_kw_name_48 );
    Py_DECREF( tmp_called_name_49 );
    Py_DECREF( tmp_args_name_48 );
    if ( tmp_assign_source_253 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 309;
        goto try_except_handler_48;
    }
    goto condexpr_end_144;
    condexpr_false_144:;
    tmp_assign_source_253 = PyDict_New();
    condexpr_end_144:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_48__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_48__prepared = tmp_assign_source_253;

    tmp_assign_source_254 = impl_class_48_MessageID_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_48__bases, tmp_pyasn1_modules$rfc2251_class_creation_48__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_48__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_48__prepared );
    if ( tmp_assign_source_254 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 309;
        goto try_except_handler_48;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_MessageID, tmp_assign_source_254 );
    goto try_end_48;
    // Exception handler code:
    try_except_handler_48:;
    exception_keeper_type_48 = exception_type;
    exception_keeper_value_48 = exception_value;
    exception_keeper_tb_48 = exception_tb;
    exception_keeper_lineno_48 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_48__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_48__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_48__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_48__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_48__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_48__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_48__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_48__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_48;
    exception_value = exception_keeper_value_48;
    exception_tb = exception_keeper_tb_48;
    exception_lineno = exception_keeper_lineno_48;

    goto frame_exception_exit_1;
    // End of try:
    try_end_48:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_48__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_48__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_48__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_48__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_48__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_48__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_48__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_48__prepared = NULL;

    // Tried code:
    tmp_assign_source_255 = PyTuple_New( 1 );
    tmp_source_name_84 = GET_STRING_DICT_VALUE( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_univ );

    if (unlikely( tmp_source_name_84 == NULL ))
    {
        tmp_source_name_84 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_univ );
    }

    if ( tmp_source_name_84 == NULL )
    {
        Py_DECREF( tmp_assign_source_255 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43524 ], 26, 0 );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 314;
        goto try_except_handler_49;
    }

    tmp_tuple_element_97 = LOOKUP_ATTRIBUTE( tmp_source_name_84, const_str_plain_Sequence );
    if ( tmp_tuple_element_97 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_255 );

        exception_lineno = 314;
        goto try_except_handler_49;
    }
    PyTuple_SET_ITEM( tmp_assign_source_255, 0, tmp_tuple_element_97 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_49__bases == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_49__bases = tmp_assign_source_255;

    tmp_assign_source_256 = PyDict_New();
    assert( tmp_pyasn1_modules$rfc2251_class_creation_49__class_decl_dict == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_49__class_decl_dict = tmp_assign_source_256;

    tmp_compare_left_97 = const_str_plain_metaclass;
    tmp_compare_right_97 = tmp_pyasn1_modules$rfc2251_class_creation_49__class_decl_dict;

    tmp_cmp_In_97 = PySequence_Contains( tmp_compare_right_97, tmp_compare_left_97 );
    if ( tmp_cmp_In_97 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 314;
        goto try_except_handler_49;
    }
    if ( tmp_cmp_In_97 == 1 )
    {
        goto condexpr_true_145;
    }
    else
    {
        goto condexpr_false_145;
    }
    condexpr_true_145:;
    tmp_dget_dict_49 = tmp_pyasn1_modules$rfc2251_class_creation_49__class_decl_dict;

    tmp_dget_key_49 = const_str_plain_metaclass;
    tmp_class_meta_49 = DICT_GET_ITEM( tmp_dget_dict_49, tmp_dget_key_49 );
    if ( tmp_class_meta_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 314;
        goto try_except_handler_49;
    }
    goto condexpr_end_145;
    condexpr_false_145:;
    tmp_cond_value_49 = tmp_pyasn1_modules$rfc2251_class_creation_49__bases;

    tmp_cond_truth_49 = CHECK_IF_TRUE( tmp_cond_value_49 );
    if ( tmp_cond_truth_49 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 314;
        goto try_except_handler_49;
    }
    if ( tmp_cond_truth_49 == 1 )
    {
        goto condexpr_true_146;
    }
    else
    {
        goto condexpr_false_146;
    }
    condexpr_true_146:;
    tmp_subscribed_name_49 = tmp_pyasn1_modules$rfc2251_class_creation_49__bases;

    tmp_subscript_name_49 = const_int_0;
    tmp_type_arg_49 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_49, tmp_subscript_name_49 );
    if ( tmp_type_arg_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 314;
        goto try_except_handler_49;
    }
    tmp_class_meta_49 = BUILTIN_TYPE1( tmp_type_arg_49 );
    Py_DECREF( tmp_type_arg_49 );
    if ( tmp_class_meta_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 314;
        goto try_except_handler_49;
    }
    goto condexpr_end_146;
    condexpr_false_146:;
    tmp_class_meta_49 = LOOKUP_BUILTIN( const_str_plain_type );
    assert( tmp_class_meta_49 != NULL );
    Py_INCREF( tmp_class_meta_49 );
    condexpr_end_146:;
    condexpr_end_145:;
    tmp_class_bases_49 = tmp_pyasn1_modules$rfc2251_class_creation_49__bases;

    tmp_assign_source_257 = SELECT_METACLASS( tmp_class_meta_49, tmp_class_bases_49 );
    if ( tmp_assign_source_257 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_class_meta_49 );

        exception_lineno = 314;
        goto try_except_handler_49;
    }
    Py_DECREF( tmp_class_meta_49 );
    assert( tmp_pyasn1_modules$rfc2251_class_creation_49__metaclass == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_49__metaclass = tmp_assign_source_257;

    tmp_compare_left_98 = const_str_plain_metaclass;
    tmp_compare_right_98 = tmp_pyasn1_modules$rfc2251_class_creation_49__class_decl_dict;

    tmp_cmp_In_98 = PySequence_Contains( tmp_compare_right_98, tmp_compare_left_98 );
    if ( tmp_cmp_In_98 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 314;
        goto try_except_handler_49;
    }
    if ( tmp_cmp_In_98 == 1 )
    {
        goto branch_yes_49;
    }
    else
    {
        goto branch_no_49;
    }
    branch_yes_49:;
    tmp_remove_dict = tmp_pyasn1_modules$rfc2251_class_creation_49__class_decl_dict;

    tmp_remove_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_remove_dict, tmp_remove_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 314;
        goto try_except_handler_49;
    }
    branch_no_49:;
    tmp_hasattr_source_49 = tmp_pyasn1_modules$rfc2251_class_creation_49__metaclass;

    tmp_hasattr_attr_49 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_49, tmp_hasattr_attr_49 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 314;
        goto try_except_handler_49;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_147;
    }
    else
    {
        goto condexpr_false_147;
    }
    condexpr_true_147:;
    tmp_source_name_85 = tmp_pyasn1_modules$rfc2251_class_creation_49__metaclass;

    tmp_called_name_50 = LOOKUP_ATTRIBUTE( tmp_source_name_85, const_str_plain___prepare__ );
    if ( tmp_called_name_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 314;
        goto try_except_handler_49;
    }
    tmp_args_name_49 = PyTuple_New( 2 );
    tmp_tuple_element_98 = const_str_plain_LDAPMessage;
    Py_INCREF( tmp_tuple_element_98 );
    PyTuple_SET_ITEM( tmp_args_name_49, 0, tmp_tuple_element_98 );
    tmp_tuple_element_98 = tmp_pyasn1_modules$rfc2251_class_creation_49__bases;

    Py_INCREF( tmp_tuple_element_98 );
    PyTuple_SET_ITEM( tmp_args_name_49, 1, tmp_tuple_element_98 );
    tmp_kw_name_49 = tmp_pyasn1_modules$rfc2251_class_creation_49__class_decl_dict;

    frame_module->f_lineno = 314;
    tmp_assign_source_258 = CALL_FUNCTION( tmp_called_name_50, tmp_args_name_49, tmp_kw_name_49 );
    Py_DECREF( tmp_called_name_50 );
    Py_DECREF( tmp_args_name_49 );
    if ( tmp_assign_source_258 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 314;
        goto try_except_handler_49;
    }
    goto condexpr_end_147;
    condexpr_false_147:;
    tmp_assign_source_258 = PyDict_New();
    condexpr_end_147:;
    assert( tmp_pyasn1_modules$rfc2251_class_creation_49__prepared == NULL );
    tmp_pyasn1_modules$rfc2251_class_creation_49__prepared = tmp_assign_source_258;

    tmp_assign_source_259 = impl_class_49_LDAPMessage_of_pyasn1_modules$rfc2251( tmp_pyasn1_modules$rfc2251_class_creation_49__bases, tmp_pyasn1_modules$rfc2251_class_creation_49__class_decl_dict, tmp_pyasn1_modules$rfc2251_class_creation_49__metaclass, tmp_pyasn1_modules$rfc2251_class_creation_49__prepared );
    if ( tmp_assign_source_259 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 314;
        goto try_except_handler_49;
    }
    UPDATE_STRING_DICT1( moduledict_pyasn1_modules$rfc2251, (Nuitka_StringObject *)const_str_plain_LDAPMessage, tmp_assign_source_259 );
    goto try_end_49;
    // Exception handler code:
    try_except_handler_49:;
    exception_keeper_type_49 = exception_type;
    exception_keeper_value_49 = exception_value;
    exception_keeper_tb_49 = exception_tb;
    exception_keeper_lineno_49 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_49__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_49__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_49__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_49__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_49__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_49__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_49__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_49__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_49;
    exception_value = exception_keeper_value_49;
    exception_tb = exception_keeper_tb_49;
    exception_lineno = exception_keeper_lineno_49;

    goto frame_exception_exit_1;
    // End of try:
    try_end_49:;

    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION( frame_module );
#endif
    popFrameStack();

    assertFrameObject( frame_module );
    Py_DECREF( frame_module );

    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_module );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_module, exception_lineno );
    }
    else if ( exception_tb->tb_frame != frame_module )
    {
        PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_module, exception_lineno );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }

    // Put the previous frame back on top.
    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_module->f_executing -= 1;
#endif
    Py_DECREF( frame_module );

    // Return the error.
    goto module_exception_exit;
    frame_no_exception_1:;
    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_49__bases );
    tmp_pyasn1_modules$rfc2251_class_creation_49__bases = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_49__class_decl_dict );
    tmp_pyasn1_modules$rfc2251_class_creation_49__class_decl_dict = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_49__metaclass );
    tmp_pyasn1_modules$rfc2251_class_creation_49__metaclass = NULL;

    Py_XDECREF( tmp_pyasn1_modules$rfc2251_class_creation_49__prepared );
    tmp_pyasn1_modules$rfc2251_class_creation_49__prepared = NULL;


    return MOD_RETURN_VALUE( module_pyasn1_modules$rfc2251 );
    module_exception_exit:
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );
    return MOD_RETURN_VALUE( NULL );
}
